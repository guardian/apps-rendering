/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as Price from "./Price";
export interface IGame {
    title: string;
    publisher?: string;
    platforms: Array<string>;
    price?: Price.IPrice;
    pegiRating?: number;
    genre: Array<string>;
}
export interface IGameArgs {
    title: string;
    publisher?: string;
    platforms: Array<string>;
    price?: Price.IPriceArgs;
    pegiRating?: number;
    genre: Array<string>;
}
export const GameCodec: thrift.IStructCodec<IGameArgs, IGame> = {
    encode(args: IGameArgs, output: thrift.TProtocol): void {
        const obj: any = {
            title: args.title,
            publisher: args.publisher,
            platforms: args.platforms,
            price: args.price,
            pegiRating: args.pegiRating,
            genre: args.genre
        };
        output.writeStructBegin("Game");
        if (obj.title != null) {
            output.writeFieldBegin("title", thrift.TType.STRING, 1);
            output.writeString(obj.title);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[title] is unset!");
        }
        if (obj.publisher != null) {
            output.writeFieldBegin("publisher", thrift.TType.STRING, 2);
            output.writeString(obj.publisher);
            output.writeFieldEnd();
        }
        if (obj.platforms != null) {
            output.writeFieldBegin("platforms", thrift.TType.LIST, 3);
            output.writeListBegin(thrift.TType.STRING, obj.platforms.length);
            obj.platforms.forEach((value_1: string): void => {
                output.writeString(value_1);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[platforms] is unset!");
        }
        if (obj.price != null) {
            output.writeFieldBegin("price", thrift.TType.STRUCT, 4);
            Price.PriceCodec.encode(obj.price, output);
            output.writeFieldEnd();
        }
        if (obj.pegiRating != null) {
            output.writeFieldBegin("pegiRating", thrift.TType.I32, 5);
            output.writeI32(obj.pegiRating);
            output.writeFieldEnd();
        }
        if (obj.genre != null) {
            output.writeFieldBegin("genre", thrift.TType.LIST, 6);
            output.writeListBegin(thrift.TType.STRING, obj.genre.length);
            obj.genre.forEach((value_2: string): void => {
                output.writeString(value_2);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[genre] is unset!");
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IGame {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_3: string = input.readString();
                        _args.title = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_4: string = input.readString();
                        _args.publisher = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.LIST) {
                        const value_5: Array<string> = new Array<string>();
                        const metadata_1: thrift.IThriftList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_6: string = input.readString();
                            value_5.push(value_6);
                        }
                        input.readListEnd();
                        _args.platforms = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_7: Price.IPrice = Price.PriceCodec.decode(input);
                        _args.price = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.I32) {
                        const value_8: number = input.readI32();
                        _args.pegiRating = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.LIST) {
                        const value_9: Array<string> = new Array<string>();
                        const metadata_2: thrift.IThriftList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_10: string = input.readString();
                            value_9.push(value_10);
                        }
                        input.readListEnd();
                        _args.genre = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.title !== undefined && _args.platforms !== undefined && _args.genre !== undefined) {
            return {
                title: _args.title,
                publisher: _args.publisher,
                platforms: _args.platforms,
                price: _args.price,
                pegiRating: _args.pegiRating,
                genre: _args.genre
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read Game from input");
        }
    }
};
export class Game extends thrift.StructLike implements IGame {
    public title: string;
    public publisher?: string;
    public platforms: Array<string>;
    public price?: Price.IPrice;
    public pegiRating?: number;
    public genre: Array<string>;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IGameArgs) {
        super();
        if (args.title != null) {
            const value_11: string = args.title;
            this.title = value_11;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[title] is unset!");
        }
        if (args.publisher != null) {
            const value_12: string = args.publisher;
            this.publisher = value_12;
        }
        if (args.platforms != null) {
            const value_13: Array<string> = new Array<string>();
            args.platforms.forEach((value_17: string): void => {
                const value_18: string = value_17;
                value_13.push(value_18);
            });
            this.platforms = value_13;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[platforms] is unset!");
        }
        if (args.price != null) {
            const value_14: Price.IPrice = new Price.Price(args.price);
            this.price = value_14;
        }
        if (args.pegiRating != null) {
            const value_15: number = args.pegiRating;
            this.pegiRating = value_15;
        }
        if (args.genre != null) {
            const value_16: Array<string> = new Array<string>();
            args.genre.forEach((value_19: string): void => {
                const value_20: string = value_19;
                value_16.push(value_20);
            });
            this.genre = value_16;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[genre] is unset!");
        }
    }
    public static read(input: thrift.TProtocol): Game {
        return new Game(GameCodec.decode(input));
    }
    public static write(args: IGameArgs, output: thrift.TProtocol): void {
        return GameCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return GameCodec.encode(this, output);
    }
}
