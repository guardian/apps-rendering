/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as ImageAssetDimensions from "./ImageAssetDimensions";
export interface IImageAsset {
    mimeType?: string;
    file: string;
    dimensions?: ImageAssetDimensions.IImageAssetDimensions;
    size?: thrift.Int64;
    aspectRatio?: string;
    credit?: string;
    copyright?: string;
    source?: string;
    photographer?: string;
    suppliersReference?: string;
}
export interface IImageAssetArgs {
    mimeType?: string;
    file: string;
    dimensions?: ImageAssetDimensions.IImageAssetDimensionsArgs;
    size?: number | string | thrift.Int64;
    aspectRatio?: string;
    credit?: string;
    copyright?: string;
    source?: string;
    photographer?: string;
    suppliersReference?: string;
}
export const ImageAssetCodec: thrift.IStructCodec<IImageAssetArgs, IImageAsset> = {
    encode(args: IImageAssetArgs, output: thrift.TProtocol): void {
        const obj: any = {
            mimeType: args.mimeType,
            file: args.file,
            dimensions: args.dimensions,
            size: (typeof args.size === "number" ? new thrift.Int64(args.size) : typeof args.size === "string" ? thrift.Int64.fromDecimalString(args.size) : args.size),
            aspectRatio: args.aspectRatio,
            credit: args.credit,
            copyright: args.copyright,
            source: args.source,
            photographer: args.photographer,
            suppliersReference: args.suppliersReference
        };
        output.writeStructBegin("ImageAsset");
        if (obj.mimeType != null) {
            output.writeFieldBegin("mimeType", thrift.TType.STRING, 1);
            output.writeString(obj.mimeType);
            output.writeFieldEnd();
        }
        if (obj.file != null) {
            output.writeFieldBegin("file", thrift.TType.STRING, 2);
            output.writeString(obj.file);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[file] is unset!");
        }
        if (obj.dimensions != null) {
            output.writeFieldBegin("dimensions", thrift.TType.STRUCT, 3);
            ImageAssetDimensions.ImageAssetDimensionsCodec.encode(obj.dimensions, output);
            output.writeFieldEnd();
        }
        if (obj.size != null) {
            output.writeFieldBegin("size", thrift.TType.I64, 4);
            output.writeI64((typeof obj.size === "number" ? new thrift.Int64(obj.size) : typeof obj.size === "string" ? thrift.Int64.fromDecimalString(obj.size) : obj.size));
            output.writeFieldEnd();
        }
        if (obj.aspectRatio != null) {
            output.writeFieldBegin("aspectRatio", thrift.TType.STRING, 5);
            output.writeString(obj.aspectRatio);
            output.writeFieldEnd();
        }
        if (obj.credit != null) {
            output.writeFieldBegin("credit", thrift.TType.STRING, 6);
            output.writeString(obj.credit);
            output.writeFieldEnd();
        }
        if (obj.copyright != null) {
            output.writeFieldBegin("copyright", thrift.TType.STRING, 7);
            output.writeString(obj.copyright);
            output.writeFieldEnd();
        }
        if (obj.source != null) {
            output.writeFieldBegin("source", thrift.TType.STRING, 8);
            output.writeString(obj.source);
            output.writeFieldEnd();
        }
        if (obj.photographer != null) {
            output.writeFieldBegin("photographer", thrift.TType.STRING, 9);
            output.writeString(obj.photographer);
            output.writeFieldEnd();
        }
        if (obj.suppliersReference != null) {
            output.writeFieldBegin("suppliersReference", thrift.TType.STRING, 10);
            output.writeString(obj.suppliersReference);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IImageAsset {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_1: string = input.readString();
                        _args.mimeType = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: string = input.readString();
                        _args.file = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_3: ImageAssetDimensions.IImageAssetDimensions = ImageAssetDimensions.ImageAssetDimensionsCodec.decode(input);
                        _args.dimensions = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.I64) {
                        const value_4: thrift.Int64 = input.readI64();
                        _args.size = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.STRING) {
                        const value_5: string = input.readString();
                        _args.aspectRatio = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.STRING) {
                        const value_6: string = input.readString();
                        _args.credit = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.TType.STRING) {
                        const value_7: string = input.readString();
                        _args.copyright = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.TType.STRING) {
                        const value_8: string = input.readString();
                        _args.source = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.TType.STRING) {
                        const value_9: string = input.readString();
                        _args.photographer = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.TType.STRING) {
                        const value_10: string = input.readString();
                        _args.suppliersReference = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.file !== undefined) {
            return {
                mimeType: _args.mimeType,
                file: _args.file,
                dimensions: _args.dimensions,
                size: _args.size,
                aspectRatio: _args.aspectRatio,
                credit: _args.credit,
                copyright: _args.copyright,
                source: _args.source,
                photographer: _args.photographer,
                suppliersReference: _args.suppliersReference
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read ImageAsset from input");
        }
    }
};
export class ImageAsset extends thrift.StructLike implements IImageAsset {
    public mimeType?: string;
    public file: string;
    public dimensions?: ImageAssetDimensions.IImageAssetDimensions;
    public size?: thrift.Int64;
    public aspectRatio?: string;
    public credit?: string;
    public copyright?: string;
    public source?: string;
    public photographer?: string;
    public suppliersReference?: string;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IImageAssetArgs) {
        super();
        if (args.mimeType != null) {
            const value_11: string = args.mimeType;
            this.mimeType = value_11;
        }
        if (args.file != null) {
            const value_12: string = args.file;
            this.file = value_12;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[file] is unset!");
        }
        if (args.dimensions != null) {
            const value_13: ImageAssetDimensions.IImageAssetDimensions = new ImageAssetDimensions.ImageAssetDimensions(args.dimensions);
            this.dimensions = value_13;
        }
        if (args.size != null) {
            const value_14: thrift.Int64 = (typeof args.size === "number" ? new thrift.Int64(args.size) : typeof args.size === "string" ? thrift.Int64.fromDecimalString(args.size) : args.size);
            this.size = value_14;
        }
        if (args.aspectRatio != null) {
            const value_15: string = args.aspectRatio;
            this.aspectRatio = value_15;
        }
        if (args.credit != null) {
            const value_16: string = args.credit;
            this.credit = value_16;
        }
        if (args.copyright != null) {
            const value_17: string = args.copyright;
            this.copyright = value_17;
        }
        if (args.source != null) {
            const value_18: string = args.source;
            this.source = value_18;
        }
        if (args.photographer != null) {
            const value_19: string = args.photographer;
            this.photographer = value_19;
        }
        if (args.suppliersReference != null) {
            const value_20: string = args.suppliersReference;
            this.suppliersReference = value_20;
        }
    }
    public static read(input: thrift.TProtocol): ImageAsset {
        return new ImageAsset(ImageAssetCodec.decode(input));
    }
    public static write(args: IImageAssetArgs, output: thrift.TProtocol): void {
        return ImageAssetCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return ImageAssetCodec.encode(this, output);
    }
}
