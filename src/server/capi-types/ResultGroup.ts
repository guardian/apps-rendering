/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
export interface IResultGroup {
    title: string;
    share: string;
    minScore: number;
    id: string;
}
export interface IResultGroupArgs {
    title: string;
    share: string;
    minScore: number;
    id: string;
}
export const ResultGroupCodec: thrift.IStructCodec<IResultGroupArgs, IResultGroup> = {
    encode(args: IResultGroupArgs, output: thrift.TProtocol): void {
        const obj: any = {
            title: args.title,
            share: args.share,
            minScore: args.minScore,
            id: args.id
        };
        output.writeStructBegin("ResultGroup");
        if (obj.title != null) {
            output.writeFieldBegin("title", thrift.TType.STRING, 1);
            output.writeString(obj.title);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[title] is unset!");
        }
        if (obj.share != null) {
            output.writeFieldBegin("share", thrift.TType.STRING, 2);
            output.writeString(obj.share);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[share] is unset!");
        }
        if (obj.minScore != null) {
            output.writeFieldBegin("minScore", thrift.TType.I16, 3);
            output.writeI16(obj.minScore);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[minScore] is unset!");
        }
        if (obj.id != null) {
            output.writeFieldBegin("id", thrift.TType.STRING, 4);
            output.writeString(obj.id);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[id] is unset!");
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IResultGroup {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_1: string = input.readString();
                        _args.title = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: string = input.readString();
                        _args.share = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.I16) {
                        const value_3: number = input.readI16();
                        _args.minScore = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRING) {
                        const value_4: string = input.readString();
                        _args.id = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.title !== undefined && _args.share !== undefined && _args.minScore !== undefined && _args.id !== undefined) {
            return {
                title: _args.title,
                share: _args.share,
                minScore: _args.minScore,
                id: _args.id
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read ResultGroup from input");
        }
    }
};
export class ResultGroup extends thrift.StructLike implements IResultGroup {
    public title: string;
    public share: string;
    public minScore: number;
    public id: string;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IResultGroupArgs) {
        super();
        if (args.title != null) {
            const value_5: string = args.title;
            this.title = value_5;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[title] is unset!");
        }
        if (args.share != null) {
            const value_6: string = args.share;
            this.share = value_6;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[share] is unset!");
        }
        if (args.minScore != null) {
            const value_7: number = args.minScore;
            this.minScore = value_7;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[minScore] is unset!");
        }
        if (args.id != null) {
            const value_8: string = args.id;
            this.id = value_8;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[id] is unset!");
        }
    }
    public static read(input: thrift.TProtocol): ResultGroup {
        return new ResultGroup(ResultGroupCodec.decode(input));
    }
    public static write(args: IResultGroupArgs, output: thrift.TProtocol): void {
        return ResultGroupCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return ResultGroupCodec.encode(this, output);
    }
}
