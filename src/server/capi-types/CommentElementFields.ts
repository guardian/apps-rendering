/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
export interface ICommentElementFieldsArgs {
    source?: string;
    discussionKey?: string;
    commentUrl?: string;
    originalUrl?: string;
    sourceUrl?: string;
    discussionUrl?: string;
    authorUrl?: string;
    html?: string;
    authorName?: string;
    commentId?: number;
}
export class CommentElementFields {
    public source?: string;
    public discussionKey?: string;
    public commentUrl?: string;
    public originalUrl?: string;
    public sourceUrl?: string;
    public discussionUrl?: string;
    public authorUrl?: string;
    public html?: string;
    public authorName?: string;
    public commentId?: number;
    constructor(args?: ICommentElementFieldsArgs) {
        if (args != null && args.source != null) {
            this.source = args.source;
        }
        if (args != null && args.discussionKey != null) {
            this.discussionKey = args.discussionKey;
        }
        if (args != null && args.commentUrl != null) {
            this.commentUrl = args.commentUrl;
        }
        if (args != null && args.originalUrl != null) {
            this.originalUrl = args.originalUrl;
        }
        if (args != null && args.sourceUrl != null) {
            this.sourceUrl = args.sourceUrl;
        }
        if (args != null && args.discussionUrl != null) {
            this.discussionUrl = args.discussionUrl;
        }
        if (args != null && args.authorUrl != null) {
            this.authorUrl = args.authorUrl;
        }
        if (args != null && args.html != null) {
            this.html = args.html;
        }
        if (args != null && args.authorName != null) {
            this.authorName = args.authorName;
        }
        if (args != null && args.commentId != null) {
            this.commentId = args.commentId;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CommentElementFields");
        if (this.source != null) {
            output.writeFieldBegin("source", thrift.TType.STRING, 1);
            output.writeString(this.source);
            output.writeFieldEnd();
        }
        if (this.discussionKey != null) {
            output.writeFieldBegin("discussionKey", thrift.TType.STRING, 2);
            output.writeString(this.discussionKey);
            output.writeFieldEnd();
        }
        if (this.commentUrl != null) {
            output.writeFieldBegin("commentUrl", thrift.TType.STRING, 3);
            output.writeString(this.commentUrl);
            output.writeFieldEnd();
        }
        if (this.originalUrl != null) {
            output.writeFieldBegin("originalUrl", thrift.TType.STRING, 4);
            output.writeString(this.originalUrl);
            output.writeFieldEnd();
        }
        if (this.sourceUrl != null) {
            output.writeFieldBegin("sourceUrl", thrift.TType.STRING, 5);
            output.writeString(this.sourceUrl);
            output.writeFieldEnd();
        }
        if (this.discussionUrl != null) {
            output.writeFieldBegin("discussionUrl", thrift.TType.STRING, 6);
            output.writeString(this.discussionUrl);
            output.writeFieldEnd();
        }
        if (this.authorUrl != null) {
            output.writeFieldBegin("authorUrl", thrift.TType.STRING, 7);
            output.writeString(this.authorUrl);
            output.writeFieldEnd();
        }
        if (this.html != null) {
            output.writeFieldBegin("html", thrift.TType.STRING, 8);
            output.writeString(this.html);
            output.writeFieldEnd();
        }
        if (this.authorName != null) {
            output.writeFieldBegin("authorName", thrift.TType.STRING, 9);
            output.writeString(this.authorName);
            output.writeFieldEnd();
        }
        if (this.commentId != null) {
            output.writeFieldBegin("commentId", thrift.TType.I32, 10);
            output.writeI32(this.commentId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CommentElementFields {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_1: string = input.readString();
                        _args.source = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: string = input.readString();
                        _args.discussionKey = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_3: string = input.readString();
                        _args.commentUrl = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRING) {
                        const value_4: string = input.readString();
                        _args.originalUrl = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.STRING) {
                        const value_5: string = input.readString();
                        _args.sourceUrl = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.STRING) {
                        const value_6: string = input.readString();
                        _args.discussionUrl = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.TType.STRING) {
                        const value_7: string = input.readString();
                        _args.authorUrl = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.TType.STRING) {
                        const value_8: string = input.readString();
                        _args.html = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.TType.STRING) {
                        const value_9: string = input.readString();
                        _args.authorName = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.TType.I32) {
                        const value_10: number = input.readI32();
                        _args.commentId = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new CommentElementFields(_args);
    }
}
