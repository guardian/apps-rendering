/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as PackageArticle from "./PackageArticle";
import * as CapiDateTime from "./CapiDateTime";
export interface IPackageArgs {
    packageId: string;
    articles: Array<PackageArticle.PackageArticle>;
    packageName: string;
    lastModified: CapiDateTime.CapiDateTime;
}
export class Package {
    public packageId: string;
    public articles: Array<PackageArticle.PackageArticle>;
    public packageName: string;
    public lastModified: CapiDateTime.CapiDateTime;
    constructor(args: IPackageArgs) {
        if (args != null && args.packageId != null) {
            this.packageId = args.packageId;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[packageId] is unset!");
        }
        if (args != null && args.articles != null) {
            this.articles = args.articles;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[articles] is unset!");
        }
        if (args != null && args.packageName != null) {
            this.packageName = args.packageName;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[packageName] is unset!");
        }
        if (args != null && args.lastModified != null) {
            this.lastModified = args.lastModified;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[lastModified] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("Package");
        if (this.packageId != null) {
            output.writeFieldBegin("packageId", thrift.TType.STRING, 1);
            output.writeString(this.packageId);
            output.writeFieldEnd();
        }
        if (this.articles != null) {
            output.writeFieldBegin("articles", thrift.TType.LIST, 2);
            output.writeListBegin(thrift.TType.STRUCT, this.articles.length);
            this.articles.forEach((value_1: PackageArticle.PackageArticle): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.packageName != null) {
            output.writeFieldBegin("packageName", thrift.TType.STRING, 3);
            output.writeString(this.packageName);
            output.writeFieldEnd();
        }
        if (this.lastModified != null) {
            output.writeFieldBegin("lastModified", thrift.TType.STRUCT, 4);
            this.lastModified.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): Package {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: string = input.readString();
                        _args.packageId = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.LIST) {
                        const value_3: Array<PackageArticle.PackageArticle> = new Array<PackageArticle.PackageArticle>();
                        const metadata_1: thrift.IThriftList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_4: PackageArticle.PackageArticle = PackageArticle.PackageArticle.read(input);
                            value_3.push(value_4);
                        }
                        input.readListEnd();
                        _args.articles = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_5: string = input.readString();
                        _args.packageName = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_6: CapiDateTime.CapiDateTime = CapiDateTime.CapiDateTime.read(input);
                        _args.lastModified = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.packageId !== undefined && _args.articles !== undefined && _args.packageName !== undefined && _args.lastModified !== undefined) {
            return new Package(_args);
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read Package from input");
        }
    }
}
