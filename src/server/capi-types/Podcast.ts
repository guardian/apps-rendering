/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as PodcastCategory from "./PodcastCategory";
export interface IPodcastArgs {
    linkUrl: string;
    copyright: string;
    author: string;
    subscriptionUrl?: string;
    explicit: boolean;
    image?: string;
    categories?: Array<PodcastCategory.PodcastCategory>;
    podcastType?: string;
    googlePodcastsUrl?: string;
    spotifyUrl?: string;
    acastId?: string;
}
export class Podcast {
    public linkUrl: string;
    public copyright: string;
    public author: string;
    public subscriptionUrl?: string;
    public explicit: boolean;
    public image?: string;
    public categories?: Array<PodcastCategory.PodcastCategory>;
    public podcastType?: string;
    public googlePodcastsUrl?: string;
    public spotifyUrl?: string;
    public acastId?: string;
    constructor(args: IPodcastArgs) {
        if (args != null && args.linkUrl != null) {
            this.linkUrl = args.linkUrl;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[linkUrl] is unset!");
        }
        if (args != null && args.copyright != null) {
            this.copyright = args.copyright;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[copyright] is unset!");
        }
        if (args != null && args.author != null) {
            this.author = args.author;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[author] is unset!");
        }
        if (args != null && args.subscriptionUrl != null) {
            this.subscriptionUrl = args.subscriptionUrl;
        }
        if (args != null && args.explicit != null) {
            this.explicit = args.explicit;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[explicit] is unset!");
        }
        if (args != null && args.image != null) {
            this.image = args.image;
        }
        if (args != null && args.categories != null) {
            this.categories = args.categories;
        }
        if (args != null && args.podcastType != null) {
            this.podcastType = args.podcastType;
        }
        if (args != null && args.googlePodcastsUrl != null) {
            this.googlePodcastsUrl = args.googlePodcastsUrl;
        }
        if (args != null && args.spotifyUrl != null) {
            this.spotifyUrl = args.spotifyUrl;
        }
        if (args != null && args.acastId != null) {
            this.acastId = args.acastId;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("Podcast");
        if (this.linkUrl != null) {
            output.writeFieldBegin("linkUrl", thrift.TType.STRING, 1);
            output.writeString(this.linkUrl);
            output.writeFieldEnd();
        }
        if (this.copyright != null) {
            output.writeFieldBegin("copyright", thrift.TType.STRING, 2);
            output.writeString(this.copyright);
            output.writeFieldEnd();
        }
        if (this.author != null) {
            output.writeFieldBegin("author", thrift.TType.STRING, 3);
            output.writeString(this.author);
            output.writeFieldEnd();
        }
        if (this.subscriptionUrl != null) {
            output.writeFieldBegin("subscriptionUrl", thrift.TType.STRING, 4);
            output.writeString(this.subscriptionUrl);
            output.writeFieldEnd();
        }
        if (this.explicit != null) {
            output.writeFieldBegin("explicit", thrift.TType.BOOL, 5);
            output.writeBool(this.explicit);
            output.writeFieldEnd();
        }
        if (this.image != null) {
            output.writeFieldBegin("image", thrift.TType.STRING, 6);
            output.writeString(this.image);
            output.writeFieldEnd();
        }
        if (this.categories != null) {
            output.writeFieldBegin("categories", thrift.TType.LIST, 7);
            output.writeListBegin(thrift.TType.STRUCT, this.categories.length);
            this.categories.forEach((value_1: PodcastCategory.PodcastCategory): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.podcastType != null) {
            output.writeFieldBegin("podcastType", thrift.TType.STRING, 8);
            output.writeString(this.podcastType);
            output.writeFieldEnd();
        }
        if (this.googlePodcastsUrl != null) {
            output.writeFieldBegin("googlePodcastsUrl", thrift.TType.STRING, 9);
            output.writeString(this.googlePodcastsUrl);
            output.writeFieldEnd();
        }
        if (this.spotifyUrl != null) {
            output.writeFieldBegin("spotifyUrl", thrift.TType.STRING, 10);
            output.writeString(this.spotifyUrl);
            output.writeFieldEnd();
        }
        if (this.acastId != null) {
            output.writeFieldBegin("acastId", thrift.TType.STRING, 11);
            output.writeString(this.acastId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): Podcast {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: string = input.readString();
                        _args.linkUrl = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_3: string = input.readString();
                        _args.copyright = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_4: string = input.readString();
                        _args.author = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRING) {
                        const value_5: string = input.readString();
                        _args.subscriptionUrl = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_6: boolean = input.readBool();
                        _args.explicit = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.STRING) {
                        const value_7: string = input.readString();
                        _args.image = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.TType.LIST) {
                        const value_8: Array<PodcastCategory.PodcastCategory> = new Array<PodcastCategory.PodcastCategory>();
                        const metadata_1: thrift.IThriftList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_9: PodcastCategory.PodcastCategory = PodcastCategory.PodcastCategory.read(input);
                            value_8.push(value_9);
                        }
                        input.readListEnd();
                        _args.categories = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.TType.STRING) {
                        const value_10: string = input.readString();
                        _args.podcastType = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.TType.STRING) {
                        const value_11: string = input.readString();
                        _args.googlePodcastsUrl = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.TType.STRING) {
                        const value_12: string = input.readString();
                        _args.spotifyUrl = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.TType.STRING) {
                        const value_13: string = input.readString();
                        _args.acastId = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.linkUrl !== undefined && _args.copyright !== undefined && _args.author !== undefined && _args.explicit !== undefined) {
            return new Podcast(_args);
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read Podcast from input");
        }
    }
}
