/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as QuizAtom from "./QuizAtom";
import * as MediaAtom from "./MediaAtom";
import * as ExplainerAtom from "./ExplainerAtom";
import * as CTAAtom from "./CTAAtom";
import * as InteractiveAtom from "./InteractiveAtom";
import * as ReviewAtom from "./ReviewAtom";
import * as RecipeAtom from "./RecipeAtom";
import * as StoryQuestionsAtom from "./StoryQuestionsAtom";
import * as QAndAAtom from "./QAndAAtom";
import * as GuideAtom from "./GuideAtom";
import * as ProfileAtom from "./ProfileAtom";
import * as TimelineAtom from "./TimelineAtom";
import * as CommonsDivision from "./CommonsDivision";
import * as ChartAtom from "./ChartAtom";
import * as AudioAtom from "./AudioAtom";
export interface IAtomData {
    quiz?: QuizAtom.IQuizAtom;
    media?: MediaAtom.IMediaAtom;
    explainer?: ExplainerAtom.IExplainerAtom;
    cta?: CTAAtom.ICTAAtom;
    interactive?: InteractiveAtom.IInteractiveAtom;
    review?: ReviewAtom.IReviewAtom;
    recipe?: RecipeAtom.IRecipeAtom;
    storyquestions?: StoryQuestionsAtom.IStoryQuestionsAtom;
    qanda?: QAndAAtom.IQAndAAtom;
    guide?: GuideAtom.IGuideAtom;
    profile?: ProfileAtom.IProfileAtom;
    timeline?: TimelineAtom.ITimelineAtom;
    commonsDivision?: CommonsDivision.ICommonsDivision;
    chart?: ChartAtom.IChartAtom;
    audio?: AudioAtom.IAudioAtom;
}
export interface IAtomDataArgs {
    quiz?: QuizAtom.IQuizAtomArgs;
    media?: MediaAtom.IMediaAtomArgs;
    explainer?: ExplainerAtom.IExplainerAtomArgs;
    cta?: CTAAtom.ICTAAtomArgs;
    interactive?: InteractiveAtom.IInteractiveAtomArgs;
    review?: ReviewAtom.IReviewAtomArgs;
    recipe?: RecipeAtom.IRecipeAtomArgs;
    storyquestions?: StoryQuestionsAtom.IStoryQuestionsAtomArgs;
    qanda?: QAndAAtom.IQAndAAtomArgs;
    guide?: GuideAtom.IGuideAtomArgs;
    profile?: ProfileAtom.IProfileAtomArgs;
    timeline?: TimelineAtom.ITimelineAtomArgs;
    commonsDivision?: CommonsDivision.ICommonsDivisionArgs;
    chart?: ChartAtom.IChartAtomArgs;
    audio?: AudioAtom.IAudioAtomArgs;
}
export const AtomDataCodec: thrift.IStructCodec<IAtomDataArgs, IAtomData> = {
    encode(args: IAtomDataArgs, output: thrift.TProtocol): void {
        let _fieldsSet: number = 0;
        const obj: any = {
            quiz: args.quiz,
            media: args.media,
            explainer: args.explainer,
            cta: args.cta,
            interactive: args.interactive,
            review: args.review,
            recipe: args.recipe,
            storyquestions: args.storyquestions,
            qanda: args.qanda,
            guide: args.guide,
            profile: args.profile,
            timeline: args.timeline,
            commonsDivision: args.commonsDivision,
            chart: args.chart,
            audio: args.audio
        };
        output.writeStructBegin("AtomData");
        if (obj.quiz != null) {
            _fieldsSet++;
            output.writeFieldBegin("quiz", thrift.TType.STRUCT, 1);
            QuizAtom.QuizAtomCodec.encode(obj.quiz, output);
            output.writeFieldEnd();
        }
        if (obj.media != null) {
            _fieldsSet++;
            output.writeFieldBegin("media", thrift.TType.STRUCT, 3);
            MediaAtom.MediaAtomCodec.encode(obj.media, output);
            output.writeFieldEnd();
        }
        if (obj.explainer != null) {
            _fieldsSet++;
            output.writeFieldBegin("explainer", thrift.TType.STRUCT, 4);
            ExplainerAtom.ExplainerAtomCodec.encode(obj.explainer, output);
            output.writeFieldEnd();
        }
        if (obj.cta != null) {
            _fieldsSet++;
            output.writeFieldBegin("cta", thrift.TType.STRUCT, 5);
            CTAAtom.CTAAtomCodec.encode(obj.cta, output);
            output.writeFieldEnd();
        }
        if (obj.interactive != null) {
            _fieldsSet++;
            output.writeFieldBegin("interactive", thrift.TType.STRUCT, 6);
            InteractiveAtom.InteractiveAtomCodec.encode(obj.interactive, output);
            output.writeFieldEnd();
        }
        if (obj.review != null) {
            _fieldsSet++;
            output.writeFieldBegin("review", thrift.TType.STRUCT, 7);
            ReviewAtom.ReviewAtomCodec.encode(obj.review, output);
            output.writeFieldEnd();
        }
        if (obj.recipe != null) {
            _fieldsSet++;
            output.writeFieldBegin("recipe", thrift.TType.STRUCT, 8);
            RecipeAtom.RecipeAtomCodec.encode(obj.recipe, output);
            output.writeFieldEnd();
        }
        if (obj.storyquestions != null) {
            _fieldsSet++;
            output.writeFieldBegin("storyquestions", thrift.TType.STRUCT, 9);
            StoryQuestionsAtom.StoryQuestionsAtomCodec.encode(obj.storyquestions, output);
            output.writeFieldEnd();
        }
        if (obj.qanda != null) {
            _fieldsSet++;
            output.writeFieldBegin("qanda", thrift.TType.STRUCT, 10);
            QAndAAtom.QAndAAtomCodec.encode(obj.qanda, output);
            output.writeFieldEnd();
        }
        if (obj.guide != null) {
            _fieldsSet++;
            output.writeFieldBegin("guide", thrift.TType.STRUCT, 11);
            GuideAtom.GuideAtomCodec.encode(obj.guide, output);
            output.writeFieldEnd();
        }
        if (obj.profile != null) {
            _fieldsSet++;
            output.writeFieldBegin("profile", thrift.TType.STRUCT, 12);
            ProfileAtom.ProfileAtomCodec.encode(obj.profile, output);
            output.writeFieldEnd();
        }
        if (obj.timeline != null) {
            _fieldsSet++;
            output.writeFieldBegin("timeline", thrift.TType.STRUCT, 13);
            TimelineAtom.TimelineAtomCodec.encode(obj.timeline, output);
            output.writeFieldEnd();
        }
        if (obj.commonsDivision != null) {
            _fieldsSet++;
            output.writeFieldBegin("commonsDivision", thrift.TType.STRUCT, 14);
            CommonsDivision.CommonsDivisionCodec.encode(obj.commonsDivision, output);
            output.writeFieldEnd();
        }
        if (obj.chart != null) {
            _fieldsSet++;
            output.writeFieldBegin("chart", thrift.TType.STRUCT, 15);
            ChartAtom.ChartAtomCodec.encode(obj.chart, output);
            output.writeFieldEnd();
        }
        if (obj.audio != null) {
            _fieldsSet++;
            output.writeFieldBegin("audio", thrift.TType.STRUCT, 16);
            AudioAtom.AudioAtomCodec.encode(obj.audio, output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        if (_fieldsSet > 1) {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.INVALID_DATA, "TUnion cannot have more than one value");
        }
        else if (_fieldsSet < 1) {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.INVALID_DATA, "TUnion must have one value set");
        }
        return;
    },
    decode(input: thrift.TProtocol): IAtomData {
        let _fieldsSet: number = 0;
        let _returnValue: any = null;
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRUCT) {
                        _fieldsSet++;
                        const value_1: QuizAtom.IQuizAtom = QuizAtom.QuizAtomCodec.decode(input);
                        _returnValue = { quiz: value_1 };
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRUCT) {
                        _fieldsSet++;
                        const value_2: MediaAtom.IMediaAtom = MediaAtom.MediaAtomCodec.decode(input);
                        _returnValue = { media: value_2 };
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRUCT) {
                        _fieldsSet++;
                        const value_3: ExplainerAtom.IExplainerAtom = ExplainerAtom.ExplainerAtomCodec.decode(input);
                        _returnValue = { explainer: value_3 };
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.STRUCT) {
                        _fieldsSet++;
                        const value_4: CTAAtom.ICTAAtom = CTAAtom.CTAAtomCodec.decode(input);
                        _returnValue = { cta: value_4 };
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.STRUCT) {
                        _fieldsSet++;
                        const value_5: InteractiveAtom.IInteractiveAtom = InteractiveAtom.InteractiveAtomCodec.decode(input);
                        _returnValue = { interactive: value_5 };
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.TType.STRUCT) {
                        _fieldsSet++;
                        const value_6: ReviewAtom.IReviewAtom = ReviewAtom.ReviewAtomCodec.decode(input);
                        _returnValue = { review: value_6 };
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.TType.STRUCT) {
                        _fieldsSet++;
                        const value_7: RecipeAtom.IRecipeAtom = RecipeAtom.RecipeAtomCodec.decode(input);
                        _returnValue = { recipe: value_7 };
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.TType.STRUCT) {
                        _fieldsSet++;
                        const value_8: StoryQuestionsAtom.IStoryQuestionsAtom = StoryQuestionsAtom.StoryQuestionsAtomCodec.decode(input);
                        _returnValue = { storyquestions: value_8 };
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.TType.STRUCT) {
                        _fieldsSet++;
                        const value_9: QAndAAtom.IQAndAAtom = QAndAAtom.QAndAAtomCodec.decode(input);
                        _returnValue = { qanda: value_9 };
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.TType.STRUCT) {
                        _fieldsSet++;
                        const value_10: GuideAtom.IGuideAtom = GuideAtom.GuideAtomCodec.decode(input);
                        _returnValue = { guide: value_10 };
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.TType.STRUCT) {
                        _fieldsSet++;
                        const value_11: ProfileAtom.IProfileAtom = ProfileAtom.ProfileAtomCodec.decode(input);
                        _returnValue = { profile: value_11 };
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.TType.STRUCT) {
                        _fieldsSet++;
                        const value_12: TimelineAtom.ITimelineAtom = TimelineAtom.TimelineAtomCodec.decode(input);
                        _returnValue = { timeline: value_12 };
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.TType.STRUCT) {
                        _fieldsSet++;
                        const value_13: CommonsDivision.ICommonsDivision = CommonsDivision.CommonsDivisionCodec.decode(input);
                        _returnValue = { commonsDivision: value_13 };
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.TType.STRUCT) {
                        _fieldsSet++;
                        const value_14: ChartAtom.IChartAtom = ChartAtom.ChartAtomCodec.decode(input);
                        _returnValue = { chart: value_14 };
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 16:
                    if (fieldType === thrift.TType.STRUCT) {
                        _fieldsSet++;
                        const value_15: AudioAtom.IAudioAtom = AudioAtom.AudioAtomCodec.decode(input);
                        _returnValue = { audio: value_15 };
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_fieldsSet > 1) {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.INVALID_DATA, "TUnion cannot have more than one value");
        }
        else if (_fieldsSet < 1) {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.INVALID_DATA, "TUnion must have one value set");
        }
        if (_returnValue !== null) {
            if (_returnValue.quiz !== undefined) {
                return {
                    quiz: _returnValue.quiz
                };
            }
            else {
                if (_returnValue.media !== undefined) {
                    return {
                        media: _returnValue.media
                    };
                }
                else {
                    if (_returnValue.explainer !== undefined) {
                        return {
                            explainer: _returnValue.explainer
                        };
                    }
                    else {
                        if (_returnValue.cta !== undefined) {
                            return {
                                cta: _returnValue.cta
                            };
                        }
                        else {
                            if (_returnValue.interactive !== undefined) {
                                return {
                                    interactive: _returnValue.interactive
                                };
                            }
                            else {
                                if (_returnValue.review !== undefined) {
                                    return {
                                        review: _returnValue.review
                                    };
                                }
                                else {
                                    if (_returnValue.recipe !== undefined) {
                                        return {
                                            recipe: _returnValue.recipe
                                        };
                                    }
                                    else {
                                        if (_returnValue.storyquestions !== undefined) {
                                            return {
                                                storyquestions: _returnValue.storyquestions
                                            };
                                        }
                                        else {
                                            if (_returnValue.qanda !== undefined) {
                                                return {
                                                    qanda: _returnValue.qanda
                                                };
                                            }
                                            else {
                                                if (_returnValue.guide !== undefined) {
                                                    return {
                                                        guide: _returnValue.guide
                                                    };
                                                }
                                                else {
                                                    if (_returnValue.profile !== undefined) {
                                                        return {
                                                            profile: _returnValue.profile
                                                        };
                                                    }
                                                    else {
                                                        if (_returnValue.timeline !== undefined) {
                                                            return {
                                                                timeline: _returnValue.timeline
                                                            };
                                                        }
                                                        else {
                                                            if (_returnValue.commonsDivision !== undefined) {
                                                                return {
                                                                    commonsDivision: _returnValue.commonsDivision
                                                                };
                                                            }
                                                            else {
                                                                if (_returnValue.chart !== undefined) {
                                                                    return {
                                                                        chart: _returnValue.chart
                                                                    };
                                                                }
                                                                else {
                                                                    return {
                                                                        audio: _returnValue.audio
                                                                    };
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read data for TUnion");
        }
    }
};
export class AtomData extends thrift.StructLike implements IAtomData {
    public quiz?: QuizAtom.IQuizAtom;
    public media?: MediaAtom.IMediaAtom;
    public explainer?: ExplainerAtom.IExplainerAtom;
    public cta?: CTAAtom.ICTAAtom;
    public interactive?: InteractiveAtom.IInteractiveAtom;
    public review?: ReviewAtom.IReviewAtom;
    public recipe?: RecipeAtom.IRecipeAtom;
    public storyquestions?: StoryQuestionsAtom.IStoryQuestionsAtom;
    public qanda?: QAndAAtom.IQAndAAtom;
    public guide?: GuideAtom.IGuideAtom;
    public profile?: ProfileAtom.IProfileAtom;
    public timeline?: TimelineAtom.ITimelineAtom;
    public commonsDivision?: CommonsDivision.ICommonsDivision;
    public chart?: ChartAtom.IChartAtom;
    public audio?: AudioAtom.IAudioAtom;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IAtomDataArgs = {}) {
        super();
        let _fieldsSet: number = 0;
        if (args.quiz != null) {
            _fieldsSet++;
            const value_16: QuizAtom.IQuizAtom = new QuizAtom.QuizAtom(args.quiz);
            this.quiz = value_16;
        }
        if (args.media != null) {
            _fieldsSet++;
            const value_17: MediaAtom.IMediaAtom = new MediaAtom.MediaAtom(args.media);
            this.media = value_17;
        }
        if (args.explainer != null) {
            _fieldsSet++;
            const value_18: ExplainerAtom.IExplainerAtom = new ExplainerAtom.ExplainerAtom(args.explainer);
            this.explainer = value_18;
        }
        if (args.cta != null) {
            _fieldsSet++;
            const value_19: CTAAtom.ICTAAtom = new CTAAtom.CTAAtom(args.cta);
            this.cta = value_19;
        }
        if (args.interactive != null) {
            _fieldsSet++;
            const value_20: InteractiveAtom.IInteractiveAtom = new InteractiveAtom.InteractiveAtom(args.interactive);
            this.interactive = value_20;
        }
        if (args.review != null) {
            _fieldsSet++;
            const value_21: ReviewAtom.IReviewAtom = new ReviewAtom.ReviewAtom(args.review);
            this.review = value_21;
        }
        if (args.recipe != null) {
            _fieldsSet++;
            const value_22: RecipeAtom.IRecipeAtom = new RecipeAtom.RecipeAtom(args.recipe);
            this.recipe = value_22;
        }
        if (args.storyquestions != null) {
            _fieldsSet++;
            const value_23: StoryQuestionsAtom.IStoryQuestionsAtom = new StoryQuestionsAtom.StoryQuestionsAtom(args.storyquestions);
            this.storyquestions = value_23;
        }
        if (args.qanda != null) {
            _fieldsSet++;
            const value_24: QAndAAtom.IQAndAAtom = new QAndAAtom.QAndAAtom(args.qanda);
            this.qanda = value_24;
        }
        if (args.guide != null) {
            _fieldsSet++;
            const value_25: GuideAtom.IGuideAtom = new GuideAtom.GuideAtom(args.guide);
            this.guide = value_25;
        }
        if (args.profile != null) {
            _fieldsSet++;
            const value_26: ProfileAtom.IProfileAtom = new ProfileAtom.ProfileAtom(args.profile);
            this.profile = value_26;
        }
        if (args.timeline != null) {
            _fieldsSet++;
            const value_27: TimelineAtom.ITimelineAtom = new TimelineAtom.TimelineAtom(args.timeline);
            this.timeline = value_27;
        }
        if (args.commonsDivision != null) {
            _fieldsSet++;
            const value_28: CommonsDivision.ICommonsDivision = new CommonsDivision.CommonsDivision(args.commonsDivision);
            this.commonsDivision = value_28;
        }
        if (args.chart != null) {
            _fieldsSet++;
            const value_29: ChartAtom.IChartAtom = new ChartAtom.ChartAtom(args.chart);
            this.chart = value_29;
        }
        if (args.audio != null) {
            _fieldsSet++;
            const value_30: AudioAtom.IAudioAtom = new AudioAtom.AudioAtom(args.audio);
            this.audio = value_30;
        }
        if (_fieldsSet > 1) {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.INVALID_DATA, "TUnion cannot have more than one value");
        }
        else if (_fieldsSet < 1) {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.INVALID_DATA, "TUnion must have one value set");
        }
    }
    public static read(input: thrift.TProtocol): AtomData {
        return new AtomData(AtomDataCodec.decode(input));
    }
    public static write(args: IAtomDataArgs, output: thrift.TProtocol): void {
        return AtomDataCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return AtomDataCodec.encode(this, output);
    }
}
