/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as Asset from "./Asset";
import * as Answer from "./Answer";
export interface IQuestion {
    questionText: string;
    assets: Array<Asset.IAsset>;
    answers: Array<Answer.IAnswer>;
    id: string;
}
export interface IQuestionArgs {
    questionText: string;
    assets: Array<Asset.IAssetArgs>;
    answers: Array<Answer.IAnswerArgs>;
    id: string;
}
export const QuestionCodec: thrift.IStructCodec<IQuestionArgs, IQuestion> = {
    encode(args: IQuestionArgs, output: thrift.TProtocol): void {
        const obj: any = {
            questionText: args.questionText,
            assets: args.assets,
            answers: args.answers,
            id: args.id
        };
        output.writeStructBegin("Question");
        if (obj.questionText != null) {
            output.writeFieldBegin("questionText", thrift.TType.STRING, 1);
            output.writeString(obj.questionText);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[questionText] is unset!");
        }
        if (obj.assets != null) {
            output.writeFieldBegin("assets", thrift.TType.LIST, 2);
            output.writeListBegin(thrift.TType.STRUCT, obj.assets.length);
            obj.assets.forEach((value_1: Asset.IAssetArgs): void => {
                Asset.AssetCodec.encode(value_1, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[assets] is unset!");
        }
        if (obj.answers != null) {
            output.writeFieldBegin("answers", thrift.TType.LIST, 3);
            output.writeListBegin(thrift.TType.STRUCT, obj.answers.length);
            obj.answers.forEach((value_2: Answer.IAnswerArgs): void => {
                Answer.AnswerCodec.encode(value_2, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[answers] is unset!");
        }
        if (obj.id != null) {
            output.writeFieldBegin("id", thrift.TType.STRING, 4);
            output.writeString(obj.id);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[id] is unset!");
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IQuestion {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_3: string = input.readString();
                        _args.questionText = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.LIST) {
                        const value_4: Array<Asset.IAsset> = new Array<Asset.IAsset>();
                        const metadata_1: thrift.IThriftList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_5: Asset.IAsset = Asset.AssetCodec.decode(input);
                            value_4.push(value_5);
                        }
                        input.readListEnd();
                        _args.assets = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.LIST) {
                        const value_6: Array<Answer.IAnswer> = new Array<Answer.IAnswer>();
                        const metadata_2: thrift.IThriftList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_7: Answer.IAnswer = Answer.AnswerCodec.decode(input);
                            value_6.push(value_7);
                        }
                        input.readListEnd();
                        _args.answers = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRING) {
                        const value_8: string = input.readString();
                        _args.id = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.questionText !== undefined && _args.assets !== undefined && _args.answers !== undefined && _args.id !== undefined) {
            return {
                questionText: _args.questionText,
                assets: _args.assets,
                answers: _args.answers,
                id: _args.id
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read Question from input");
        }
    }
};
export class Question extends thrift.StructLike implements IQuestion {
    public questionText: string;
    public assets: Array<Asset.IAsset>;
    public answers: Array<Answer.IAnswer>;
    public id: string;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IQuestionArgs) {
        super();
        if (args.questionText != null) {
            const value_9: string = args.questionText;
            this.questionText = value_9;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[questionText] is unset!");
        }
        if (args.assets != null) {
            const value_10: Array<Asset.IAsset> = new Array<Asset.IAsset>();
            args.assets.forEach((value_13: Asset.IAssetArgs): void => {
                const value_14: Asset.IAsset = new Asset.Asset(value_13);
                value_10.push(value_14);
            });
            this.assets = value_10;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[assets] is unset!");
        }
        if (args.answers != null) {
            const value_11: Array<Answer.IAnswer> = new Array<Answer.IAnswer>();
            args.answers.forEach((value_15: Answer.IAnswerArgs): void => {
                const value_16: Answer.IAnswer = new Answer.Answer(value_15);
                value_11.push(value_16);
            });
            this.answers = value_11;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[answers] is unset!");
        }
        if (args.id != null) {
            const value_12: string = args.id;
            this.id = value_12;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[id] is unset!");
        }
    }
    public static read(input: thrift.TProtocol): Question {
        return new Question(QuestionCodec.decode(input));
    }
    public static write(args: IQuestionArgs, output: thrift.TProtocol): void {
        return QuestionCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return QuestionCodec.encode(this, output);
    }
}
