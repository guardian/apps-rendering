/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as Tag from "./Tag";
export interface ITagUsage {
    tag: Tag.ITag;
    isLead: boolean;
}
export interface ITagUsageArgs {
    tag: Tag.ITagArgs;
    isLead?: boolean;
}
export const TagUsageCodec: thrift.IStructCodec<ITagUsageArgs, ITagUsage> = {
    encode(args: ITagUsageArgs, output: thrift.TProtocol): void {
        const obj: any = {
            tag: args.tag,
            isLead: (args.isLead != null ? args.isLead : false)
        };
        output.writeStructBegin("TagUsage");
        if (obj.tag != null) {
            output.writeFieldBegin("tag", thrift.TType.STRUCT, 1);
            Tag.TagCodec.encode(obj.tag, output);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[tag] is unset!");
        }
        if (obj.isLead != null) {
            output.writeFieldBegin("isLead", thrift.TType.BOOL, 2);
            output.writeBool(obj.isLead);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): ITagUsage {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_1: Tag.ITag = Tag.TagCodec.decode(input);
                        _args.tag = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_2: boolean = input.readBool();
                        _args.isLead = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.tag !== undefined && _args.isLead !== undefined) {
            return {
                tag: _args.tag,
                isLead: (_args.isLead != null ? _args.isLead : false)
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read TagUsage from input");
        }
    }
};
export class TagUsage extends thrift.StructLike implements ITagUsage {
    public tag: Tag.ITag;
    public isLead: boolean = false;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: ITagUsageArgs) {
        super();
        if (args.tag != null) {
            const value_3: Tag.ITag = new Tag.Tag(args.tag);
            this.tag = value_3;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[tag] is unset!");
        }
        if (args.isLead != null) {
            const value_4: boolean = args.isLead;
            this.isLead = value_4;
        }
    }
    public static read(input: thrift.TProtocol): TagUsage {
        return new TagUsage(TagUsageCodec.decode(input));
    }
    public static write(args: ITagUsageArgs, output: thrift.TProtocol): void {
        return TagUsageCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return TagUsageCodec.encode(this, output);
    }
}
