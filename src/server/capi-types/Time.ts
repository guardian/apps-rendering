/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
export interface ITime {
    preparation?: number;
    cooking?: number;
}
export interface ITimeArgs {
    preparation?: number;
    cooking?: number;
}
export const TimeCodec: thrift.IStructCodec<ITimeArgs, ITime> = {
    encode(args: ITimeArgs, output: thrift.TProtocol): void {
        const obj: any = {
            preparation: args.preparation,
            cooking: args.cooking
        };
        output.writeStructBegin("Time");
        if (obj.preparation != null) {
            output.writeFieldBegin("preparation", thrift.TType.I16, 1);
            output.writeI16(obj.preparation);
            output.writeFieldEnd();
        }
        if (obj.cooking != null) {
            output.writeFieldBegin("cooking", thrift.TType.I16, 2);
            output.writeI16(obj.cooking);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): ITime {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.I16) {
                        const value_1: number = input.readI16();
                        _args.preparation = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.I16) {
                        const value_2: number = input.readI16();
                        _args.cooking = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            preparation: _args.preparation,
            cooking: _args.cooking
        };
    }
};
export class Time extends thrift.StructLike implements ITime {
    public preparation?: number;
    public cooking?: number;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: ITimeArgs = {}) {
        super();
        if (args.preparation != null) {
            const value_3: number = args.preparation;
            this.preparation = value_3;
        }
        if (args.cooking != null) {
            const value_4: number = args.cooking;
            this.cooking = value_4;
        }
    }
    public static read(input: thrift.TProtocol): Time {
        return new Time(TimeCodec.decode(input));
    }
    public static write(args: ITimeArgs, output: thrift.TProtocol): void {
        return TimeCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return TimeCodec.encode(this, output);
    }
}
