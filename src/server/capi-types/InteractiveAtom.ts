/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
export interface IInteractiveAtom {
    type: string;
    title: string;
    css: string;
    html: string;
    mainJS?: string;
    docData?: string;
}
export interface IInteractiveAtomArgs {
    type: string;
    title: string;
    css: string;
    html: string;
    mainJS?: string;
    docData?: string;
}
export const InteractiveAtomCodec: thrift.IStructCodec<IInteractiveAtomArgs, IInteractiveAtom> = {
    encode(args: IInteractiveAtomArgs, output: thrift.TProtocol): void {
        const obj: any = {
            type: args.type,
            title: args.title,
            css: args.css,
            html: args.html,
            mainJS: args.mainJS,
            docData: args.docData
        };
        output.writeStructBegin("InteractiveAtom");
        if (obj.type != null) {
            output.writeFieldBegin("type", thrift.TType.STRING, 1);
            output.writeString(obj.type);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[type] is unset!");
        }
        if (obj.title != null) {
            output.writeFieldBegin("title", thrift.TType.STRING, 2);
            output.writeString(obj.title);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[title] is unset!");
        }
        if (obj.css != null) {
            output.writeFieldBegin("css", thrift.TType.STRING, 3);
            output.writeString(obj.css);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[css] is unset!");
        }
        if (obj.html != null) {
            output.writeFieldBegin("html", thrift.TType.STRING, 4);
            output.writeString(obj.html);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[html] is unset!");
        }
        if (obj.mainJS != null) {
            output.writeFieldBegin("mainJS", thrift.TType.STRING, 5);
            output.writeString(obj.mainJS);
            output.writeFieldEnd();
        }
        if (obj.docData != null) {
            output.writeFieldBegin("docData", thrift.TType.STRING, 6);
            output.writeString(obj.docData);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IInteractiveAtom {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_1: string = input.readString();
                        _args.type = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: string = input.readString();
                        _args.title = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_3: string = input.readString();
                        _args.css = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRING) {
                        const value_4: string = input.readString();
                        _args.html = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.STRING) {
                        const value_5: string = input.readString();
                        _args.mainJS = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.STRING) {
                        const value_6: string = input.readString();
                        _args.docData = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.type !== undefined && _args.title !== undefined && _args.css !== undefined && _args.html !== undefined) {
            return {
                type: _args.type,
                title: _args.title,
                css: _args.css,
                html: _args.html,
                mainJS: _args.mainJS,
                docData: _args.docData
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read InteractiveAtom from input");
        }
    }
};
export class InteractiveAtom extends thrift.StructLike implements IInteractiveAtom {
    public type: string;
    public title: string;
    public css: string;
    public html: string;
    public mainJS?: string;
    public docData?: string;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IInteractiveAtomArgs) {
        super();
        if (args.type != null) {
            const value_7: string = args.type;
            this.type = value_7;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[type] is unset!");
        }
        if (args.title != null) {
            const value_8: string = args.title;
            this.title = value_8;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[title] is unset!");
        }
        if (args.css != null) {
            const value_9: string = args.css;
            this.css = value_9;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[css] is unset!");
        }
        if (args.html != null) {
            const value_10: string = args.html;
            this.html = value_10;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[html] is unset!");
        }
        if (args.mainJS != null) {
            const value_11: string = args.mainJS;
            this.mainJS = value_11;
        }
        if (args.docData != null) {
            const value_12: string = args.docData;
            this.docData = value_12;
        }
    }
    public static read(input: thrift.TProtocol): InteractiveAtom {
        return new InteractiveAtom(InteractiveAtomCodec.decode(input));
    }
    public static write(args: IInteractiveAtomArgs, output: thrift.TProtocol): void {
        return InteractiveAtomCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return InteractiveAtomCodec.encode(this, output);
    }
}
