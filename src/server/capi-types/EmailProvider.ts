/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
export interface IEmailProvider {
    name: string;
    listId: string;
}
export interface IEmailProviderArgs {
    name?: string;
    listId: string;
}
export const EmailProviderCodec: thrift.IStructCodec<IEmailProviderArgs, IEmailProvider> = {
    encode(args: IEmailProviderArgs, output: thrift.TProtocol): void {
        const obj: any = {
            name: (args.name != null ? args.name : "exact-target"),
            listId: args.listId
        };
        output.writeStructBegin("EmailProvider");
        if (obj.name != null) {
            output.writeFieldBegin("name", thrift.TType.STRING, 1);
            output.writeString(obj.name);
            output.writeFieldEnd();
        }
        if (obj.listId != null) {
            output.writeFieldBegin("listId", thrift.TType.STRING, 2);
            output.writeString(obj.listId);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[listId] is unset!");
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IEmailProvider {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_1: string = input.readString();
                        _args.name = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: string = input.readString();
                        _args.listId = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.name !== undefined && _args.listId !== undefined) {
            return {
                name: (_args.name != null ? _args.name : "exact-target"),
                listId: _args.listId
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read EmailProvider from input");
        }
    }
};
export class EmailProvider extends thrift.StructLike implements IEmailProvider {
    public name: string = "exact-target";
    public listId: string;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IEmailProviderArgs) {
        super();
        if (args.name != null) {
            const value_3: string = args.name;
            this.name = value_3;
        }
        if (args.listId != null) {
            const value_4: string = args.listId;
            this.listId = value_4;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[listId] is unset!");
        }
    }
    public static read(input: thrift.TProtocol): EmailProvider {
        return new EmailProvider(EmailProviderCodec.decode(input));
    }
    public static write(args: IEmailProviderArgs, output: thrift.TProtocol): void {
        return EmailProviderCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return EmailProviderCodec.encode(this, output);
    }
}
