/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as ArticleType from "./ArticleType";
import * as Group from "./Group";
export interface IArticle {
    id: string;
    articleType: ArticleType.ArticleType;
    group: Group.Group;
    headline?: string;
    href?: string;
    trailText?: string;
    imageSrc?: string;
    isBoosted?: boolean;
    imageHide?: boolean;
    showMainVideo?: boolean;
    showKickerTag?: boolean;
    showKickerSection?: boolean;
    byline?: string;
    customKicker?: string;
    showBoostedHeadline?: boolean;
    showQuotedHeadline?: boolean;
}
export interface IArticleArgs {
    id: string;
    articleType: ArticleType.ArticleType;
    group: Group.Group;
    headline?: string;
    href?: string;
    trailText?: string;
    imageSrc?: string;
    isBoosted?: boolean;
    imageHide?: boolean;
    showMainVideo?: boolean;
    showKickerTag?: boolean;
    showKickerSection?: boolean;
    byline?: string;
    customKicker?: string;
    showBoostedHeadline?: boolean;
    showQuotedHeadline?: boolean;
}
export const ArticleCodec: thrift.IStructCodec<IArticleArgs, IArticle> = {
    encode(args: IArticleArgs, output: thrift.TProtocol): void {
        const obj: any = {
            id: args.id,
            articleType: args.articleType,
            group: args.group,
            headline: args.headline,
            href: args.href,
            trailText: args.trailText,
            imageSrc: args.imageSrc,
            isBoosted: args.isBoosted,
            imageHide: args.imageHide,
            showMainVideo: args.showMainVideo,
            showKickerTag: args.showKickerTag,
            showKickerSection: args.showKickerSection,
            byline: args.byline,
            customKicker: args.customKicker,
            showBoostedHeadline: args.showBoostedHeadline,
            showQuotedHeadline: args.showQuotedHeadline
        };
        output.writeStructBegin("Article");
        if (obj.id != null) {
            output.writeFieldBegin("id", thrift.TType.STRING, 1);
            output.writeString(obj.id);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[id] is unset!");
        }
        if (obj.articleType != null) {
            output.writeFieldBegin("articleType", thrift.TType.I32, 2);
            output.writeI32(obj.articleType);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[articleType] is unset!");
        }
        if (obj.group != null) {
            output.writeFieldBegin("group", thrift.TType.I32, 3);
            output.writeI32(obj.group);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[group] is unset!");
        }
        if (obj.headline != null) {
            output.writeFieldBegin("headline", thrift.TType.STRING, 4);
            output.writeString(obj.headline);
            output.writeFieldEnd();
        }
        if (obj.href != null) {
            output.writeFieldBegin("href", thrift.TType.STRING, 5);
            output.writeString(obj.href);
            output.writeFieldEnd();
        }
        if (obj.trailText != null) {
            output.writeFieldBegin("trailText", thrift.TType.STRING, 6);
            output.writeString(obj.trailText);
            output.writeFieldEnd();
        }
        if (obj.imageSrc != null) {
            output.writeFieldBegin("imageSrc", thrift.TType.STRING, 7);
            output.writeString(obj.imageSrc);
            output.writeFieldEnd();
        }
        if (obj.isBoosted != null) {
            output.writeFieldBegin("isBoosted", thrift.TType.BOOL, 8);
            output.writeBool(obj.isBoosted);
            output.writeFieldEnd();
        }
        if (obj.imageHide != null) {
            output.writeFieldBegin("imageHide", thrift.TType.BOOL, 9);
            output.writeBool(obj.imageHide);
            output.writeFieldEnd();
        }
        if (obj.showMainVideo != null) {
            output.writeFieldBegin("showMainVideo", thrift.TType.BOOL, 10);
            output.writeBool(obj.showMainVideo);
            output.writeFieldEnd();
        }
        if (obj.showKickerTag != null) {
            output.writeFieldBegin("showKickerTag", thrift.TType.BOOL, 11);
            output.writeBool(obj.showKickerTag);
            output.writeFieldEnd();
        }
        if (obj.showKickerSection != null) {
            output.writeFieldBegin("showKickerSection", thrift.TType.BOOL, 12);
            output.writeBool(obj.showKickerSection);
            output.writeFieldEnd();
        }
        if (obj.byline != null) {
            output.writeFieldBegin("byline", thrift.TType.STRING, 13);
            output.writeString(obj.byline);
            output.writeFieldEnd();
        }
        if (obj.customKicker != null) {
            output.writeFieldBegin("customKicker", thrift.TType.STRING, 14);
            output.writeString(obj.customKicker);
            output.writeFieldEnd();
        }
        if (obj.showBoostedHeadline != null) {
            output.writeFieldBegin("showBoostedHeadline", thrift.TType.BOOL, 15);
            output.writeBool(obj.showBoostedHeadline);
            output.writeFieldEnd();
        }
        if (obj.showQuotedHeadline != null) {
            output.writeFieldBegin("showQuotedHeadline", thrift.TType.BOOL, 16);
            output.writeBool(obj.showQuotedHeadline);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IArticle {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_1: string = input.readString();
                        _args.id = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.I32) {
                        const value_2: ArticleType.ArticleType = input.readI32();
                        _args.articleType = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.I32) {
                        const value_3: Group.Group = input.readI32();
                        _args.group = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRING) {
                        const value_4: string = input.readString();
                        _args.headline = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.STRING) {
                        const value_5: string = input.readString();
                        _args.href = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.STRING) {
                        const value_6: string = input.readString();
                        _args.trailText = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.TType.STRING) {
                        const value_7: string = input.readString();
                        _args.imageSrc = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_8: boolean = input.readBool();
                        _args.isBoosted = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_9: boolean = input.readBool();
                        _args.imageHide = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_10: boolean = input.readBool();
                        _args.showMainVideo = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_11: boolean = input.readBool();
                        _args.showKickerTag = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_12: boolean = input.readBool();
                        _args.showKickerSection = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.TType.STRING) {
                        const value_13: string = input.readString();
                        _args.byline = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.TType.STRING) {
                        const value_14: string = input.readString();
                        _args.customKicker = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_15: boolean = input.readBool();
                        _args.showBoostedHeadline = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 16:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_16: boolean = input.readBool();
                        _args.showQuotedHeadline = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.id !== undefined && _args.articleType !== undefined && _args.group !== undefined) {
            return {
                id: _args.id,
                articleType: _args.articleType,
                group: _args.group,
                headline: _args.headline,
                href: _args.href,
                trailText: _args.trailText,
                imageSrc: _args.imageSrc,
                isBoosted: _args.isBoosted,
                imageHide: _args.imageHide,
                showMainVideo: _args.showMainVideo,
                showKickerTag: _args.showKickerTag,
                showKickerSection: _args.showKickerSection,
                byline: _args.byline,
                customKicker: _args.customKicker,
                showBoostedHeadline: _args.showBoostedHeadline,
                showQuotedHeadline: _args.showQuotedHeadline
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read Article from input");
        }
    }
};
export class Article extends thrift.StructLike implements IArticle {
    public id: string;
    public articleType: ArticleType.ArticleType;
    public group: Group.Group;
    public headline?: string;
    public href?: string;
    public trailText?: string;
    public imageSrc?: string;
    public isBoosted?: boolean;
    public imageHide?: boolean;
    public showMainVideo?: boolean;
    public showKickerTag?: boolean;
    public showKickerSection?: boolean;
    public byline?: string;
    public customKicker?: string;
    public showBoostedHeadline?: boolean;
    public showQuotedHeadline?: boolean;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IArticleArgs) {
        super();
        if (args.id != null) {
            const value_17: string = args.id;
            this.id = value_17;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[id] is unset!");
        }
        if (args.articleType != null) {
            const value_18: ArticleType.ArticleType = args.articleType;
            this.articleType = value_18;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[articleType] is unset!");
        }
        if (args.group != null) {
            const value_19: Group.Group = args.group;
            this.group = value_19;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[group] is unset!");
        }
        if (args.headline != null) {
            const value_20: string = args.headline;
            this.headline = value_20;
        }
        if (args.href != null) {
            const value_21: string = args.href;
            this.href = value_21;
        }
        if (args.trailText != null) {
            const value_22: string = args.trailText;
            this.trailText = value_22;
        }
        if (args.imageSrc != null) {
            const value_23: string = args.imageSrc;
            this.imageSrc = value_23;
        }
        if (args.isBoosted != null) {
            const value_24: boolean = args.isBoosted;
            this.isBoosted = value_24;
        }
        if (args.imageHide != null) {
            const value_25: boolean = args.imageHide;
            this.imageHide = value_25;
        }
        if (args.showMainVideo != null) {
            const value_26: boolean = args.showMainVideo;
            this.showMainVideo = value_26;
        }
        if (args.showKickerTag != null) {
            const value_27: boolean = args.showKickerTag;
            this.showKickerTag = value_27;
        }
        if (args.showKickerSection != null) {
            const value_28: boolean = args.showKickerSection;
            this.showKickerSection = value_28;
        }
        if (args.byline != null) {
            const value_29: string = args.byline;
            this.byline = value_29;
        }
        if (args.customKicker != null) {
            const value_30: string = args.customKicker;
            this.customKicker = value_30;
        }
        if (args.showBoostedHeadline != null) {
            const value_31: boolean = args.showBoostedHeadline;
            this.showBoostedHeadline = value_31;
        }
        if (args.showQuotedHeadline != null) {
            const value_32: boolean = args.showQuotedHeadline;
            this.showQuotedHeadline = value_32;
        }
    }
    public static read(input: thrift.TProtocol): Article {
        return new Article(ArticleCodec.decode(input));
    }
    public static write(args: IArticleArgs, output: thrift.TProtocol): void {
        return ArticleCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return ArticleCodec.encode(this, output);
    }
}
