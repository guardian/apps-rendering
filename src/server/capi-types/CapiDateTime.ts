/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
export interface ICapiDateTime {
    dateTime: thrift.Int64;
    iso8601: string;
}
export interface ICapiDateTimeArgs {
    dateTime: number | string | thrift.Int64;
    iso8601: string;
}
export const CapiDateTimeCodec: thrift.IStructCodec<ICapiDateTimeArgs, ICapiDateTime> = {
    encode(args: ICapiDateTimeArgs, output: thrift.TProtocol): void {
        const obj: any = {
            dateTime: (typeof args.dateTime === "number" ? new thrift.Int64(args.dateTime) : typeof args.dateTime === "string" ? thrift.Int64.fromDecimalString(args.dateTime) : args.dateTime),
            iso8601: args.iso8601
        };
        output.writeStructBegin("CapiDateTime");
        if (obj.dateTime != null) {
            output.writeFieldBegin("dateTime", thrift.TType.I64, 1);
            output.writeI64((typeof obj.dateTime === "number" ? new thrift.Int64(obj.dateTime) : typeof obj.dateTime === "string" ? thrift.Int64.fromDecimalString(obj.dateTime) : obj.dateTime));
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[dateTime] is unset!");
        }
        if (obj.iso8601 != null) {
            output.writeFieldBegin("iso8601", thrift.TType.STRING, 2);
            output.writeString(obj.iso8601);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[iso8601] is unset!");
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): ICapiDateTime {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.I64) {
                        const value_1: thrift.Int64 = input.readI64();
                        _args.dateTime = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: string = input.readString();
                        _args.iso8601 = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.dateTime !== undefined && _args.iso8601 !== undefined) {
            return {
                dateTime: _args.dateTime,
                iso8601: _args.iso8601
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read CapiDateTime from input");
        }
    }
};
export class CapiDateTime extends thrift.StructLike implements ICapiDateTime {
    public dateTime: thrift.Int64;
    public iso8601: string;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: ICapiDateTimeArgs) {
        super();
        if (args.dateTime != null) {
            const value_3: thrift.Int64 = (typeof args.dateTime === "number" ? new thrift.Int64(args.dateTime) : typeof args.dateTime === "string" ? thrift.Int64.fromDecimalString(args.dateTime) : args.dateTime);
            this.dateTime = value_3;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[dateTime] is unset!");
        }
        if (args.iso8601 != null) {
            const value_4: string = args.iso8601;
            this.iso8601 = value_4;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[iso8601] is unset!");
        }
    }
    public static read(input: thrift.TProtocol): CapiDateTime {
        return new CapiDateTime(CapiDateTimeCodec.decode(input));
    }
    public static write(args: ICapiDateTimeArgs, output: thrift.TProtocol): void {
        return CapiDateTimeCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return CapiDateTimeCodec.encode(this, output);
    }
}
