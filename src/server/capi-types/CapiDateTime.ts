/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import { Int64 } from "@creditkarma/thrift-server-core";
export interface ICapiDateTimeArgs {
    dateTime: number | Int64;
    iso8601: string;
}
export class CapiDateTime {
    public dateTime: Int64;
    public iso8601: string;
    constructor(args: ICapiDateTimeArgs) {
        if (args != null && args.dateTime != null) {
            if (typeof args.dateTime === "number") {
                this.dateTime = new Int64(args.dateTime);
            }
            else {
                this.dateTime = args.dateTime;
            }
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[dateTime] is unset!");
        }
        if (args != null && args.iso8601 != null) {
            this.iso8601 = args.iso8601;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[iso8601] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CapiDateTime");
        if (this.dateTime != null) {
            output.writeFieldBegin("dateTime", thrift.TType.I64, 1);
            output.writeI64(this.dateTime);
            output.writeFieldEnd();
        }
        if (this.iso8601 != null) {
            output.writeFieldBegin("iso8601", thrift.TType.STRING, 2);
            output.writeString(this.iso8601);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CapiDateTime {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.I64) {
                        const value_1: Int64 = input.readI64();
                        _args.dateTime = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: string = input.readString();
                        _args.iso8601 = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.dateTime !== undefined && _args.iso8601 !== undefined) {
            return new CapiDateTime(_args);
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read CapiDateTime from input");
        }
    }
}
