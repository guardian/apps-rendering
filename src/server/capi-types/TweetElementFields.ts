/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
export interface ITweetElementFields {
    source?: string;
    url?: string;
    id?: string;
    html?: string;
    originalUrl?: string;
    role?: string;
}
export interface ITweetElementFieldsArgs {
    source?: string;
    url?: string;
    id?: string;
    html?: string;
    originalUrl?: string;
    role?: string;
}
export const TweetElementFieldsCodec: thrift.IStructCodec<ITweetElementFieldsArgs, ITweetElementFields> = {
    encode(args: ITweetElementFieldsArgs, output: thrift.TProtocol): void {
        const obj: any = {
            source: args.source,
            url: args.url,
            id: args.id,
            html: args.html,
            originalUrl: args.originalUrl,
            role: args.role
        };
        output.writeStructBegin("TweetElementFields");
        if (obj.source != null) {
            output.writeFieldBegin("source", thrift.TType.STRING, 1);
            output.writeString(obj.source);
            output.writeFieldEnd();
        }
        if (obj.url != null) {
            output.writeFieldBegin("url", thrift.TType.STRING, 2);
            output.writeString(obj.url);
            output.writeFieldEnd();
        }
        if (obj.id != null) {
            output.writeFieldBegin("id", thrift.TType.STRING, 3);
            output.writeString(obj.id);
            output.writeFieldEnd();
        }
        if (obj.html != null) {
            output.writeFieldBegin("html", thrift.TType.STRING, 4);
            output.writeString(obj.html);
            output.writeFieldEnd();
        }
        if (obj.originalUrl != null) {
            output.writeFieldBegin("originalUrl", thrift.TType.STRING, 5);
            output.writeString(obj.originalUrl);
            output.writeFieldEnd();
        }
        if (obj.role != null) {
            output.writeFieldBegin("role", thrift.TType.STRING, 6);
            output.writeString(obj.role);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): ITweetElementFields {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_1: string = input.readString();
                        _args.source = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: string = input.readString();
                        _args.url = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_3: string = input.readString();
                        _args.id = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRING) {
                        const value_4: string = input.readString();
                        _args.html = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.STRING) {
                        const value_5: string = input.readString();
                        _args.originalUrl = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.STRING) {
                        const value_6: string = input.readString();
                        _args.role = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            source: _args.source,
            url: _args.url,
            id: _args.id,
            html: _args.html,
            originalUrl: _args.originalUrl,
            role: _args.role
        };
    }
};
export class TweetElementFields extends thrift.StructLike implements ITweetElementFields {
    public source?: string;
    public url?: string;
    public id?: string;
    public html?: string;
    public originalUrl?: string;
    public role?: string;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: ITweetElementFieldsArgs = {}) {
        super();
        if (args.source != null) {
            const value_7: string = args.source;
            this.source = value_7;
        }
        if (args.url != null) {
            const value_8: string = args.url;
            this.url = value_8;
        }
        if (args.id != null) {
            const value_9: string = args.id;
            this.id = value_9;
        }
        if (args.html != null) {
            const value_10: string = args.html;
            this.html = value_10;
        }
        if (args.originalUrl != null) {
            const value_11: string = args.originalUrl;
            this.originalUrl = value_11;
        }
        if (args.role != null) {
            const value_12: string = args.role;
            this.role = value_12;
        }
    }
    public static read(input: thrift.TProtocol): TweetElementFields {
        return new TweetElementFields(TweetElementFieldsCodec.decode(input));
    }
    public static write(args: ITweetElementFieldsArgs, output: thrift.TProtocol): void {
        return TweetElementFieldsCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return TweetElementFieldsCodec.encode(this, output);
    }
}
