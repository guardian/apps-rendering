/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as TagType from "./TagType";
import * as Reference from "./Reference";
import * as Podcast from "./Podcast";
import * as Sponsorship from "./Sponsorship";
import { IThriftSet } from "@creditkarma/thrift-server-core";
export interface ITagArgs {
    id: string;
    type: TagType.TagType;
    sectionId?: string;
    sectionName?: string;
    webTitle: string;
    webUrl: string;
    apiUrl: string;
    references: Array<Reference.Reference>;
    description?: string;
    bio?: string;
    bylineImageUrl?: string;
    bylineLargeImageUrl?: string;
    podcast?: Podcast.Podcast;
    firstName?: string;
    lastName?: string;
    emailAddress?: string;
    twitterHandle?: string;
    activeSponsorships?: Array<Sponsorship.Sponsorship>;
    paidContentType?: string;
    paidContentCampaignColour?: string;
    rcsId?: string;
    r2ContributorId?: string;
    tagCategories?: Set<string>;
    entityIds?: Set<string>;
    campaignInformationType?: string;
    internalName?: string;
}
export class Tag {
    public id: string;
    public type: TagType.TagType;
    public sectionId?: string;
    public sectionName?: string;
    public webTitle: string;
    public webUrl: string;
    public apiUrl: string;
    public references: Array<Reference.Reference>;
    public description?: string;
    public bio?: string;
    public bylineImageUrl?: string;
    public bylineLargeImageUrl?: string;
    public podcast?: Podcast.Podcast;
    public firstName?: string;
    public lastName?: string;
    public emailAddress?: string;
    public twitterHandle?: string;
    public activeSponsorships?: Array<Sponsorship.Sponsorship>;
    public paidContentType?: string;
    public paidContentCampaignColour?: string;
    public rcsId?: string;
    public r2ContributorId?: string;
    public tagCategories?: Set<string>;
    public entityIds?: Set<string>;
    public campaignInformationType?: string;
    public internalName?: string;
    constructor(args: ITagArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[id] is unset!");
        }
        if (args != null && args.type != null) {
            this.type = args.type;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[type] is unset!");
        }
        if (args != null && args.sectionId != null) {
            this.sectionId = args.sectionId;
        }
        if (args != null && args.sectionName != null) {
            this.sectionName = args.sectionName;
        }
        if (args != null && args.webTitle != null) {
            this.webTitle = args.webTitle;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[webTitle] is unset!");
        }
        if (args != null && args.webUrl != null) {
            this.webUrl = args.webUrl;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[webUrl] is unset!");
        }
        if (args != null && args.apiUrl != null) {
            this.apiUrl = args.apiUrl;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[apiUrl] is unset!");
        }
        if (args != null && args.references != null) {
            this.references = args.references;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[references] is unset!");
        }
        if (args != null && args.description != null) {
            this.description = args.description;
        }
        if (args != null && args.bio != null) {
            this.bio = args.bio;
        }
        if (args != null && args.bylineImageUrl != null) {
            this.bylineImageUrl = args.bylineImageUrl;
        }
        if (args != null && args.bylineLargeImageUrl != null) {
            this.bylineLargeImageUrl = args.bylineLargeImageUrl;
        }
        if (args != null && args.podcast != null) {
            this.podcast = args.podcast;
        }
        if (args != null && args.firstName != null) {
            this.firstName = args.firstName;
        }
        if (args != null && args.lastName != null) {
            this.lastName = args.lastName;
        }
        if (args != null && args.emailAddress != null) {
            this.emailAddress = args.emailAddress;
        }
        if (args != null && args.twitterHandle != null) {
            this.twitterHandle = args.twitterHandle;
        }
        if (args != null && args.activeSponsorships != null) {
            this.activeSponsorships = args.activeSponsorships;
        }
        if (args != null && args.paidContentType != null) {
            this.paidContentType = args.paidContentType;
        }
        if (args != null && args.paidContentCampaignColour != null) {
            this.paidContentCampaignColour = args.paidContentCampaignColour;
        }
        if (args != null && args.rcsId != null) {
            this.rcsId = args.rcsId;
        }
        if (args != null && args.r2ContributorId != null) {
            this.r2ContributorId = args.r2ContributorId;
        }
        if (args != null && args.tagCategories != null) {
            this.tagCategories = args.tagCategories;
        }
        if (args != null && args.entityIds != null) {
            this.entityIds = args.entityIds;
        }
        if (args != null && args.campaignInformationType != null) {
            this.campaignInformationType = args.campaignInformationType;
        }
        if (args != null && args.internalName != null) {
            this.internalName = args.internalName;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("Tag");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.TType.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.type != null) {
            output.writeFieldBegin("type", thrift.TType.I32, 2);
            output.writeI32(this.type);
            output.writeFieldEnd();
        }
        if (this.sectionId != null) {
            output.writeFieldBegin("sectionId", thrift.TType.STRING, 3);
            output.writeString(this.sectionId);
            output.writeFieldEnd();
        }
        if (this.sectionName != null) {
            output.writeFieldBegin("sectionName", thrift.TType.STRING, 4);
            output.writeString(this.sectionName);
            output.writeFieldEnd();
        }
        if (this.webTitle != null) {
            output.writeFieldBegin("webTitle", thrift.TType.STRING, 5);
            output.writeString(this.webTitle);
            output.writeFieldEnd();
        }
        if (this.webUrl != null) {
            output.writeFieldBegin("webUrl", thrift.TType.STRING, 6);
            output.writeString(this.webUrl);
            output.writeFieldEnd();
        }
        if (this.apiUrl != null) {
            output.writeFieldBegin("apiUrl", thrift.TType.STRING, 7);
            output.writeString(this.apiUrl);
            output.writeFieldEnd();
        }
        if (this.references != null) {
            output.writeFieldBegin("references", thrift.TType.LIST, 8);
            output.writeListBegin(thrift.TType.STRUCT, this.references.length);
            this.references.forEach((value_1: Reference.Reference): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.description != null) {
            output.writeFieldBegin("description", thrift.TType.STRING, 9);
            output.writeString(this.description);
            output.writeFieldEnd();
        }
        if (this.bio != null) {
            output.writeFieldBegin("bio", thrift.TType.STRING, 10);
            output.writeString(this.bio);
            output.writeFieldEnd();
        }
        if (this.bylineImageUrl != null) {
            output.writeFieldBegin("bylineImageUrl", thrift.TType.STRING, 11);
            output.writeString(this.bylineImageUrl);
            output.writeFieldEnd();
        }
        if (this.bylineLargeImageUrl != null) {
            output.writeFieldBegin("bylineLargeImageUrl", thrift.TType.STRING, 12);
            output.writeString(this.bylineLargeImageUrl);
            output.writeFieldEnd();
        }
        if (this.podcast != null) {
            output.writeFieldBegin("podcast", thrift.TType.STRUCT, 13);
            this.podcast.write(output);
            output.writeFieldEnd();
        }
        if (this.firstName != null) {
            output.writeFieldBegin("firstName", thrift.TType.STRING, 14);
            output.writeString(this.firstName);
            output.writeFieldEnd();
        }
        if (this.lastName != null) {
            output.writeFieldBegin("lastName", thrift.TType.STRING, 15);
            output.writeString(this.lastName);
            output.writeFieldEnd();
        }
        if (this.emailAddress != null) {
            output.writeFieldBegin("emailAddress", thrift.TType.STRING, 16);
            output.writeString(this.emailAddress);
            output.writeFieldEnd();
        }
        if (this.twitterHandle != null) {
            output.writeFieldBegin("twitterHandle", thrift.TType.STRING, 17);
            output.writeString(this.twitterHandle);
            output.writeFieldEnd();
        }
        if (this.activeSponsorships != null) {
            output.writeFieldBegin("activeSponsorships", thrift.TType.LIST, 18);
            output.writeListBegin(thrift.TType.STRUCT, this.activeSponsorships.length);
            this.activeSponsorships.forEach((value_2: Sponsorship.Sponsorship): void => {
                value_2.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.paidContentType != null) {
            output.writeFieldBegin("paidContentType", thrift.TType.STRING, 19);
            output.writeString(this.paidContentType);
            output.writeFieldEnd();
        }
        if (this.paidContentCampaignColour != null) {
            output.writeFieldBegin("paidContentCampaignColour", thrift.TType.STRING, 20);
            output.writeString(this.paidContentCampaignColour);
            output.writeFieldEnd();
        }
        if (this.rcsId != null) {
            output.writeFieldBegin("rcsId", thrift.TType.STRING, 21);
            output.writeString(this.rcsId);
            output.writeFieldEnd();
        }
        if (this.r2ContributorId != null) {
            output.writeFieldBegin("r2ContributorId", thrift.TType.STRING, 22);
            output.writeString(this.r2ContributorId);
            output.writeFieldEnd();
        }
        if (this.tagCategories != null) {
            output.writeFieldBegin("tagCategories", thrift.TType.SET, 23);
            output.writeSetBegin(thrift.TType.STRING, this.tagCategories.size);
            this.tagCategories.forEach((value_3: string): void => {
                output.writeString(value_3);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        if (this.entityIds != null) {
            output.writeFieldBegin("entityIds", thrift.TType.SET, 24);
            output.writeSetBegin(thrift.TType.STRING, this.entityIds.size);
            this.entityIds.forEach((value_4: string): void => {
                output.writeString(value_4);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        if (this.campaignInformationType != null) {
            output.writeFieldBegin("campaignInformationType", thrift.TType.STRING, 25);
            output.writeString(this.campaignInformationType);
            output.writeFieldEnd();
        }
        if (this.internalName != null) {
            output.writeFieldBegin("internalName", thrift.TType.STRING, 26);
            output.writeString(this.internalName);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): Tag {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_5: string = input.readString();
                        _args.id = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.I32) {
                        const value_6: TagType.TagType = input.readI32();
                        _args.type = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_7: string = input.readString();
                        _args.sectionId = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRING) {
                        const value_8: string = input.readString();
                        _args.sectionName = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.STRING) {
                        const value_9: string = input.readString();
                        _args.webTitle = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.STRING) {
                        const value_10: string = input.readString();
                        _args.webUrl = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.TType.STRING) {
                        const value_11: string = input.readString();
                        _args.apiUrl = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.TType.LIST) {
                        const value_12: Array<Reference.Reference> = new Array<Reference.Reference>();
                        const metadata_1: thrift.IThriftList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_13: Reference.Reference = Reference.Reference.read(input);
                            value_12.push(value_13);
                        }
                        input.readListEnd();
                        _args.references = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.TType.STRING) {
                        const value_14: string = input.readString();
                        _args.description = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.TType.STRING) {
                        const value_15: string = input.readString();
                        _args.bio = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.TType.STRING) {
                        const value_16: string = input.readString();
                        _args.bylineImageUrl = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.TType.STRING) {
                        const value_17: string = input.readString();
                        _args.bylineLargeImageUrl = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_18: Podcast.Podcast = Podcast.Podcast.read(input);
                        _args.podcast = value_18;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.TType.STRING) {
                        const value_19: string = input.readString();
                        _args.firstName = value_19;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.TType.STRING) {
                        const value_20: string = input.readString();
                        _args.lastName = value_20;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 16:
                    if (fieldType === thrift.TType.STRING) {
                        const value_21: string = input.readString();
                        _args.emailAddress = value_21;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 17:
                    if (fieldType === thrift.TType.STRING) {
                        const value_22: string = input.readString();
                        _args.twitterHandle = value_22;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 18:
                    if (fieldType === thrift.TType.LIST) {
                        const value_23: Array<Sponsorship.Sponsorship> = new Array<Sponsorship.Sponsorship>();
                        const metadata_2: thrift.IThriftList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_24: Sponsorship.Sponsorship = Sponsorship.Sponsorship.read(input);
                            value_23.push(value_24);
                        }
                        input.readListEnd();
                        _args.activeSponsorships = value_23;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 19:
                    if (fieldType === thrift.TType.STRING) {
                        const value_25: string = input.readString();
                        _args.paidContentType = value_25;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 20:
                    if (fieldType === thrift.TType.STRING) {
                        const value_26: string = input.readString();
                        _args.paidContentCampaignColour = value_26;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 21:
                    if (fieldType === thrift.TType.STRING) {
                        const value_27: string = input.readString();
                        _args.rcsId = value_27;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 22:
                    if (fieldType === thrift.TType.STRING) {
                        const value_28: string = input.readString();
                        _args.r2ContributorId = value_28;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 23:
                    if (fieldType === thrift.TType.SET) {
                        const value_29: Set<string> = new Set<string>();
                        const metadata_3: IThriftSet = input.readSetBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const value_30: string = input.readString();
                            value_29.add(value_30);
                        }
                        input.readSetEnd();
                        _args.tagCategories = value_29;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 24:
                    if (fieldType === thrift.TType.SET) {
                        const value_31: Set<string> = new Set<string>();
                        const metadata_4: thrift.IThriftSet = input.readSetBegin();
                        const size_4: number = metadata_4.size;
                        for (let i_4: number = 0; i_4 < size_4; i_4++) {
                            const value_32: string = input.readString();
                            value_31.add(value_32);
                        }
                        input.readSetEnd();
                        _args.entityIds = value_31;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 25:
                    if (fieldType === thrift.TType.STRING) {
                        const value_33: string = input.readString();
                        _args.campaignInformationType = value_33;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 26:
                    if (fieldType === thrift.TType.STRING) {
                        const value_34: string = input.readString();
                        _args.internalName = value_34;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.id !== undefined && _args.type !== undefined && _args.webTitle !== undefined && _args.webUrl !== undefined && _args.apiUrl !== undefined && _args.references !== undefined) {
            return new Tag(_args);
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read Tag from input");
        }
    }
}
