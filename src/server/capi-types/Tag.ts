/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as TagType from "./TagType";
import * as Reference from "./Reference";
import * as Podcast from "./Podcast";
import * as Sponsorship from "./Sponsorship";
export interface ITag {
    id: string;
    type: TagType.TagType;
    sectionId?: string;
    sectionName?: string;
    webTitle: string;
    webUrl: string;
    apiUrl: string;
    references: Array<Reference.IReference>;
    description?: string;
    bio?: string;
    bylineImageUrl?: string;
    bylineLargeImageUrl?: string;
    podcast?: Podcast.IPodcast;
    firstName?: string;
    lastName?: string;
    emailAddress?: string;
    twitterHandle?: string;
    activeSponsorships?: Array<Sponsorship.ISponsorship>;
    paidContentType?: string;
    paidContentCampaignColour?: string;
    rcsId?: string;
    r2ContributorId?: string;
    tagCategories?: Set<string>;
    entityIds?: Set<string>;
    campaignInformationType?: string;
    internalName?: string;
}
export interface ITagArgs {
    id: string;
    type: TagType.TagType;
    sectionId?: string;
    sectionName?: string;
    webTitle: string;
    webUrl: string;
    apiUrl: string;
    references: Array<Reference.IReferenceArgs>;
    description?: string;
    bio?: string;
    bylineImageUrl?: string;
    bylineLargeImageUrl?: string;
    podcast?: Podcast.IPodcastArgs;
    firstName?: string;
    lastName?: string;
    emailAddress?: string;
    twitterHandle?: string;
    activeSponsorships?: Array<Sponsorship.ISponsorshipArgs>;
    paidContentType?: string;
    paidContentCampaignColour?: string;
    rcsId?: string;
    r2ContributorId?: string;
    tagCategories?: Set<string>;
    entityIds?: Set<string>;
    campaignInformationType?: string;
    internalName?: string;
}
export const TagCodec: thrift.IStructCodec<ITagArgs, ITag> = {
    encode(args: ITagArgs, output: thrift.TProtocol): void {
        const obj: any = {
            id: args.id,
            type: args.type,
            sectionId: args.sectionId,
            sectionName: args.sectionName,
            webTitle: args.webTitle,
            webUrl: args.webUrl,
            apiUrl: args.apiUrl,
            references: args.references,
            description: args.description,
            bio: args.bio,
            bylineImageUrl: args.bylineImageUrl,
            bylineLargeImageUrl: args.bylineLargeImageUrl,
            podcast: args.podcast,
            firstName: args.firstName,
            lastName: args.lastName,
            emailAddress: args.emailAddress,
            twitterHandle: args.twitterHandle,
            activeSponsorships: args.activeSponsorships,
            paidContentType: args.paidContentType,
            paidContentCampaignColour: args.paidContentCampaignColour,
            rcsId: args.rcsId,
            r2ContributorId: args.r2ContributorId,
            tagCategories: args.tagCategories,
            entityIds: args.entityIds,
            campaignInformationType: args.campaignInformationType,
            internalName: args.internalName
        };
        output.writeStructBegin("Tag");
        if (obj.id != null) {
            output.writeFieldBegin("id", thrift.TType.STRING, 1);
            output.writeString(obj.id);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[id] is unset!");
        }
        if (obj.type != null) {
            output.writeFieldBegin("type", thrift.TType.I32, 2);
            output.writeI32(obj.type);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[type] is unset!");
        }
        if (obj.sectionId != null) {
            output.writeFieldBegin("sectionId", thrift.TType.STRING, 3);
            output.writeString(obj.sectionId);
            output.writeFieldEnd();
        }
        if (obj.sectionName != null) {
            output.writeFieldBegin("sectionName", thrift.TType.STRING, 4);
            output.writeString(obj.sectionName);
            output.writeFieldEnd();
        }
        if (obj.webTitle != null) {
            output.writeFieldBegin("webTitle", thrift.TType.STRING, 5);
            output.writeString(obj.webTitle);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[webTitle] is unset!");
        }
        if (obj.webUrl != null) {
            output.writeFieldBegin("webUrl", thrift.TType.STRING, 6);
            output.writeString(obj.webUrl);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[webUrl] is unset!");
        }
        if (obj.apiUrl != null) {
            output.writeFieldBegin("apiUrl", thrift.TType.STRING, 7);
            output.writeString(obj.apiUrl);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[apiUrl] is unset!");
        }
        if (obj.references != null) {
            output.writeFieldBegin("references", thrift.TType.LIST, 8);
            output.writeListBegin(thrift.TType.STRUCT, obj.references.length);
            obj.references.forEach((value_1: Reference.IReferenceArgs): void => {
                Reference.ReferenceCodec.encode(value_1, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[references] is unset!");
        }
        if (obj.description != null) {
            output.writeFieldBegin("description", thrift.TType.STRING, 9);
            output.writeString(obj.description);
            output.writeFieldEnd();
        }
        if (obj.bio != null) {
            output.writeFieldBegin("bio", thrift.TType.STRING, 10);
            output.writeString(obj.bio);
            output.writeFieldEnd();
        }
        if (obj.bylineImageUrl != null) {
            output.writeFieldBegin("bylineImageUrl", thrift.TType.STRING, 11);
            output.writeString(obj.bylineImageUrl);
            output.writeFieldEnd();
        }
        if (obj.bylineLargeImageUrl != null) {
            output.writeFieldBegin("bylineLargeImageUrl", thrift.TType.STRING, 12);
            output.writeString(obj.bylineLargeImageUrl);
            output.writeFieldEnd();
        }
        if (obj.podcast != null) {
            output.writeFieldBegin("podcast", thrift.TType.STRUCT, 13);
            Podcast.PodcastCodec.encode(obj.podcast, output);
            output.writeFieldEnd();
        }
        if (obj.firstName != null) {
            output.writeFieldBegin("firstName", thrift.TType.STRING, 14);
            output.writeString(obj.firstName);
            output.writeFieldEnd();
        }
        if (obj.lastName != null) {
            output.writeFieldBegin("lastName", thrift.TType.STRING, 15);
            output.writeString(obj.lastName);
            output.writeFieldEnd();
        }
        if (obj.emailAddress != null) {
            output.writeFieldBegin("emailAddress", thrift.TType.STRING, 16);
            output.writeString(obj.emailAddress);
            output.writeFieldEnd();
        }
        if (obj.twitterHandle != null) {
            output.writeFieldBegin("twitterHandle", thrift.TType.STRING, 17);
            output.writeString(obj.twitterHandle);
            output.writeFieldEnd();
        }
        if (obj.activeSponsorships != null) {
            output.writeFieldBegin("activeSponsorships", thrift.TType.LIST, 18);
            output.writeListBegin(thrift.TType.STRUCT, obj.activeSponsorships.length);
            obj.activeSponsorships.forEach((value_2: Sponsorship.ISponsorshipArgs): void => {
                Sponsorship.SponsorshipCodec.encode(value_2, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.paidContentType != null) {
            output.writeFieldBegin("paidContentType", thrift.TType.STRING, 19);
            output.writeString(obj.paidContentType);
            output.writeFieldEnd();
        }
        if (obj.paidContentCampaignColour != null) {
            output.writeFieldBegin("paidContentCampaignColour", thrift.TType.STRING, 20);
            output.writeString(obj.paidContentCampaignColour);
            output.writeFieldEnd();
        }
        if (obj.rcsId != null) {
            output.writeFieldBegin("rcsId", thrift.TType.STRING, 21);
            output.writeString(obj.rcsId);
            output.writeFieldEnd();
        }
        if (obj.r2ContributorId != null) {
            output.writeFieldBegin("r2ContributorId", thrift.TType.STRING, 22);
            output.writeString(obj.r2ContributorId);
            output.writeFieldEnd();
        }
        if (obj.tagCategories != null) {
            output.writeFieldBegin("tagCategories", thrift.TType.SET, 23);
            output.writeSetBegin(thrift.TType.STRING, obj.tagCategories.size);
            obj.tagCategories.forEach((value_3: string): void => {
                output.writeString(value_3);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        if (obj.entityIds != null) {
            output.writeFieldBegin("entityIds", thrift.TType.SET, 24);
            output.writeSetBegin(thrift.TType.STRING, obj.entityIds.size);
            obj.entityIds.forEach((value_4: string): void => {
                output.writeString(value_4);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        if (obj.campaignInformationType != null) {
            output.writeFieldBegin("campaignInformationType", thrift.TType.STRING, 25);
            output.writeString(obj.campaignInformationType);
            output.writeFieldEnd();
        }
        if (obj.internalName != null) {
            output.writeFieldBegin("internalName", thrift.TType.STRING, 26);
            output.writeString(obj.internalName);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): ITag {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_5: string = input.readString();
                        _args.id = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.I32) {
                        const value_6: TagType.TagType = input.readI32();
                        _args.type = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_7: string = input.readString();
                        _args.sectionId = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRING) {
                        const value_8: string = input.readString();
                        _args.sectionName = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.STRING) {
                        const value_9: string = input.readString();
                        _args.webTitle = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.STRING) {
                        const value_10: string = input.readString();
                        _args.webUrl = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.TType.STRING) {
                        const value_11: string = input.readString();
                        _args.apiUrl = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.TType.LIST) {
                        const value_12: Array<Reference.IReference> = new Array<Reference.IReference>();
                        const metadata_1: thrift.IThriftList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_13: Reference.IReference = Reference.ReferenceCodec.decode(input);
                            value_12.push(value_13);
                        }
                        input.readListEnd();
                        _args.references = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.TType.STRING) {
                        const value_14: string = input.readString();
                        _args.description = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.TType.STRING) {
                        const value_15: string = input.readString();
                        _args.bio = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.TType.STRING) {
                        const value_16: string = input.readString();
                        _args.bylineImageUrl = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.TType.STRING) {
                        const value_17: string = input.readString();
                        _args.bylineLargeImageUrl = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_18: Podcast.IPodcast = Podcast.PodcastCodec.decode(input);
                        _args.podcast = value_18;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.TType.STRING) {
                        const value_19: string = input.readString();
                        _args.firstName = value_19;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.TType.STRING) {
                        const value_20: string = input.readString();
                        _args.lastName = value_20;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 16:
                    if (fieldType === thrift.TType.STRING) {
                        const value_21: string = input.readString();
                        _args.emailAddress = value_21;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 17:
                    if (fieldType === thrift.TType.STRING) {
                        const value_22: string = input.readString();
                        _args.twitterHandle = value_22;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 18:
                    if (fieldType === thrift.TType.LIST) {
                        const value_23: Array<Sponsorship.ISponsorship> = new Array<Sponsorship.ISponsorship>();
                        const metadata_2: thrift.IThriftList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_24: Sponsorship.ISponsorship = Sponsorship.SponsorshipCodec.decode(input);
                            value_23.push(value_24);
                        }
                        input.readListEnd();
                        _args.activeSponsorships = value_23;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 19:
                    if (fieldType === thrift.TType.STRING) {
                        const value_25: string = input.readString();
                        _args.paidContentType = value_25;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 20:
                    if (fieldType === thrift.TType.STRING) {
                        const value_26: string = input.readString();
                        _args.paidContentCampaignColour = value_26;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 21:
                    if (fieldType === thrift.TType.STRING) {
                        const value_27: string = input.readString();
                        _args.rcsId = value_27;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 22:
                    if (fieldType === thrift.TType.STRING) {
                        const value_28: string = input.readString();
                        _args.r2ContributorId = value_28;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 23:
                    if (fieldType === thrift.TType.SET) {
                        const value_29: Set<string> = new Set<string>();
                        const metadata_3: thrift.IThriftSet = input.readSetBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const value_30: string = input.readString();
                            value_29.add(value_30);
                        }
                        input.readSetEnd();
                        _args.tagCategories = value_29;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 24:
                    if (fieldType === thrift.TType.SET) {
                        const value_31: Set<string> = new Set<string>();
                        const metadata_4: thrift.IThriftSet = input.readSetBegin();
                        const size_4: number = metadata_4.size;
                        for (let i_4: number = 0; i_4 < size_4; i_4++) {
                            const value_32: string = input.readString();
                            value_31.add(value_32);
                        }
                        input.readSetEnd();
                        _args.entityIds = value_31;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 25:
                    if (fieldType === thrift.TType.STRING) {
                        const value_33: string = input.readString();
                        _args.campaignInformationType = value_33;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 26:
                    if (fieldType === thrift.TType.STRING) {
                        const value_34: string = input.readString();
                        _args.internalName = value_34;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.id !== undefined && _args.type !== undefined && _args.webTitle !== undefined && _args.webUrl !== undefined && _args.apiUrl !== undefined && _args.references !== undefined) {
            return {
                id: _args.id,
                type: _args.type,
                sectionId: _args.sectionId,
                sectionName: _args.sectionName,
                webTitle: _args.webTitle,
                webUrl: _args.webUrl,
                apiUrl: _args.apiUrl,
                references: _args.references,
                description: _args.description,
                bio: _args.bio,
                bylineImageUrl: _args.bylineImageUrl,
                bylineLargeImageUrl: _args.bylineLargeImageUrl,
                podcast: _args.podcast,
                firstName: _args.firstName,
                lastName: _args.lastName,
                emailAddress: _args.emailAddress,
                twitterHandle: _args.twitterHandle,
                activeSponsorships: _args.activeSponsorships,
                paidContentType: _args.paidContentType,
                paidContentCampaignColour: _args.paidContentCampaignColour,
                rcsId: _args.rcsId,
                r2ContributorId: _args.r2ContributorId,
                tagCategories: _args.tagCategories,
                entityIds: _args.entityIds,
                campaignInformationType: _args.campaignInformationType,
                internalName: _args.internalName
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read Tag from input");
        }
    }
};
export class Tag extends thrift.StructLike implements ITag {
    public id: string;
    public type: TagType.TagType;
    public sectionId?: string;
    public sectionName?: string;
    public webTitle: string;
    public webUrl: string;
    public apiUrl: string;
    public references: Array<Reference.IReference>;
    public description?: string;
    public bio?: string;
    public bylineImageUrl?: string;
    public bylineLargeImageUrl?: string;
    public podcast?: Podcast.IPodcast;
    public firstName?: string;
    public lastName?: string;
    public emailAddress?: string;
    public twitterHandle?: string;
    public activeSponsorships?: Array<Sponsorship.ISponsorship>;
    public paidContentType?: string;
    public paidContentCampaignColour?: string;
    public rcsId?: string;
    public r2ContributorId?: string;
    public tagCategories?: Set<string>;
    public entityIds?: Set<string>;
    public campaignInformationType?: string;
    public internalName?: string;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: ITagArgs) {
        super();
        if (args.id != null) {
            const value_35: string = args.id;
            this.id = value_35;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[id] is unset!");
        }
        if (args.type != null) {
            const value_36: TagType.TagType = args.type;
            this.type = value_36;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[type] is unset!");
        }
        if (args.sectionId != null) {
            const value_37: string = args.sectionId;
            this.sectionId = value_37;
        }
        if (args.sectionName != null) {
            const value_38: string = args.sectionName;
            this.sectionName = value_38;
        }
        if (args.webTitle != null) {
            const value_39: string = args.webTitle;
            this.webTitle = value_39;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[webTitle] is unset!");
        }
        if (args.webUrl != null) {
            const value_40: string = args.webUrl;
            this.webUrl = value_40;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[webUrl] is unset!");
        }
        if (args.apiUrl != null) {
            const value_41: string = args.apiUrl;
            this.apiUrl = value_41;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[apiUrl] is unset!");
        }
        if (args.references != null) {
            const value_42: Array<Reference.IReference> = new Array<Reference.IReference>();
            args.references.forEach((value_61: Reference.IReferenceArgs): void => {
                const value_62: Reference.IReference = new Reference.Reference(value_61);
                value_42.push(value_62);
            });
            this.references = value_42;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[references] is unset!");
        }
        if (args.description != null) {
            const value_43: string = args.description;
            this.description = value_43;
        }
        if (args.bio != null) {
            const value_44: string = args.bio;
            this.bio = value_44;
        }
        if (args.bylineImageUrl != null) {
            const value_45: string = args.bylineImageUrl;
            this.bylineImageUrl = value_45;
        }
        if (args.bylineLargeImageUrl != null) {
            const value_46: string = args.bylineLargeImageUrl;
            this.bylineLargeImageUrl = value_46;
        }
        if (args.podcast != null) {
            const value_47: Podcast.IPodcast = new Podcast.Podcast(args.podcast);
            this.podcast = value_47;
        }
        if (args.firstName != null) {
            const value_48: string = args.firstName;
            this.firstName = value_48;
        }
        if (args.lastName != null) {
            const value_49: string = args.lastName;
            this.lastName = value_49;
        }
        if (args.emailAddress != null) {
            const value_50: string = args.emailAddress;
            this.emailAddress = value_50;
        }
        if (args.twitterHandle != null) {
            const value_51: string = args.twitterHandle;
            this.twitterHandle = value_51;
        }
        if (args.activeSponsorships != null) {
            const value_52: Array<Sponsorship.ISponsorship> = new Array<Sponsorship.ISponsorship>();
            args.activeSponsorships.forEach((value_63: Sponsorship.ISponsorshipArgs): void => {
                const value_64: Sponsorship.ISponsorship = new Sponsorship.Sponsorship(value_63);
                value_52.push(value_64);
            });
            this.activeSponsorships = value_52;
        }
        if (args.paidContentType != null) {
            const value_53: string = args.paidContentType;
            this.paidContentType = value_53;
        }
        if (args.paidContentCampaignColour != null) {
            const value_54: string = args.paidContentCampaignColour;
            this.paidContentCampaignColour = value_54;
        }
        if (args.rcsId != null) {
            const value_55: string = args.rcsId;
            this.rcsId = value_55;
        }
        if (args.r2ContributorId != null) {
            const value_56: string = args.r2ContributorId;
            this.r2ContributorId = value_56;
        }
        if (args.tagCategories != null) {
            const value_57: Set<string> = new Set<string>();
            args.tagCategories.forEach((value_65: string): void => {
                const value_66: string = value_65;
                value_57.add(value_66);
            });
            this.tagCategories = value_57;
        }
        if (args.entityIds != null) {
            const value_58: Set<string> = new Set<string>();
            args.entityIds.forEach((value_67: string): void => {
                const value_68: string = value_67;
                value_58.add(value_68);
            });
            this.entityIds = value_58;
        }
        if (args.campaignInformationType != null) {
            const value_59: string = args.campaignInformationType;
            this.campaignInformationType = value_59;
        }
        if (args.internalName != null) {
            const value_60: string = args.internalName;
            this.internalName = value_60;
        }
    }
    public static read(input: thrift.TProtocol): Tag {
        return new Tag(TagCodec.decode(input));
    }
    public static write(args: ITagArgs, output: thrift.TProtocol): void {
        return TagCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return TagCodec.encode(this, output);
    }
}
