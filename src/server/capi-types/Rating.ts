/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
export interface IRating {
    maxRating: number;
    actualRating: number;
    minRating: number;
}
export interface IRatingArgs {
    maxRating: number;
    actualRating: number;
    minRating: number;
}
export const RatingCodec: thrift.IStructCodec<IRatingArgs, IRating> = {
    encode(args: IRatingArgs, output: thrift.TProtocol): void {
        const obj: any = {
            maxRating: args.maxRating,
            actualRating: args.actualRating,
            minRating: args.minRating
        };
        output.writeStructBegin("Rating");
        if (obj.maxRating != null) {
            output.writeFieldBegin("maxRating", thrift.TType.I16, 1);
            output.writeI16(obj.maxRating);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[maxRating] is unset!");
        }
        if (obj.actualRating != null) {
            output.writeFieldBegin("actualRating", thrift.TType.I16, 2);
            output.writeI16(obj.actualRating);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[actualRating] is unset!");
        }
        if (obj.minRating != null) {
            output.writeFieldBegin("minRating", thrift.TType.I16, 3);
            output.writeI16(obj.minRating);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[minRating] is unset!");
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IRating {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.I16) {
                        const value_1: number = input.readI16();
                        _args.maxRating = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.I16) {
                        const value_2: number = input.readI16();
                        _args.actualRating = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.I16) {
                        const value_3: number = input.readI16();
                        _args.minRating = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.maxRating !== undefined && _args.actualRating !== undefined && _args.minRating !== undefined) {
            return {
                maxRating: _args.maxRating,
                actualRating: _args.actualRating,
                minRating: _args.minRating
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read Rating from input");
        }
    }
};
export class Rating extends thrift.StructLike implements IRating {
    public maxRating: number;
    public actualRating: number;
    public minRating: number;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IRatingArgs) {
        super();
        if (args.maxRating != null) {
            const value_4: number = args.maxRating;
            this.maxRating = value_4;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[maxRating] is unset!");
        }
        if (args.actualRating != null) {
            const value_5: number = args.actualRating;
            this.actualRating = value_5;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[actualRating] is unset!");
        }
        if (args.minRating != null) {
            const value_6: number = args.minRating;
            this.minRating = value_6;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[minRating] is unset!");
        }
    }
    public static read(input: thrift.TProtocol): Rating {
        return new Rating(RatingCodec.decode(input));
    }
    public static write(args: IRatingArgs, output: thrift.TProtocol): void {
        return RatingCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return RatingCodec.encode(this, output);
    }
}
