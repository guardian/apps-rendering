/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as MembershipTier from "./MembershipTier";
import * as CapiDateTime from "./CapiDateTime";
import * as Office from "./Office";
export interface IContentFields {
    headline?: string;
    standfirst?: string;
    trailText?: string;
    byline?: string;
    main?: string;
    body?: string;
    newspaperPageNumber?: number;
    starRating?: number;
    contributorBio?: string;
    membershipAccess?: MembershipTier.MembershipTier;
    wordcount?: number;
    commentCloseDate?: CapiDateTime.ICapiDateTime;
    commentable?: boolean;
    creationDate?: CapiDateTime.ICapiDateTime;
    displayHint?: string;
    firstPublicationDate?: CapiDateTime.ICapiDateTime;
    hasStoryPackage?: boolean;
    internalComposerCode?: string;
    internalOctopusCode?: string;
    internalPageCode?: number;
    internalStoryPackageCode?: number;
    isInappropriateForSponsorship?: boolean;
    isPremoderated?: boolean;
    lastModified?: CapiDateTime.ICapiDateTime;
    liveBloggingNow?: boolean;
    newspaperEditionDate?: CapiDateTime.ICapiDateTime;
    productionOffice?: Office.Office;
    publication?: string;
    scheduledPublicationDate?: CapiDateTime.ICapiDateTime;
    secureThumbnail?: string;
    shortUrl?: string;
    shouldHideAdverts?: boolean;
    showInRelatedContent?: boolean;
    thumbnail?: string;
    legallySensitive?: boolean;
    allowUgc?: boolean;
    sensitive?: boolean;
    lang?: string;
    internalRevision?: number;
    internalContentCode?: number;
    isLive?: boolean;
    internalShortId?: string;
    shortSocialShareText?: string;
    socialShareText?: string;
    bodyText?: string;
    charCount?: number;
    internalVideoCode?: string;
    shouldHideReaderRevenue?: boolean;
    internalCommissionedWordcount?: number;
    showAffiliateLinks?: boolean;
    bylineHtml?: string;
}
export interface IContentFieldsArgs {
    headline?: string;
    standfirst?: string;
    trailText?: string;
    byline?: string;
    main?: string;
    body?: string;
    newspaperPageNumber?: number;
    starRating?: number;
    contributorBio?: string;
    membershipAccess?: MembershipTier.MembershipTier;
    wordcount?: number;
    commentCloseDate?: CapiDateTime.ICapiDateTimeArgs;
    commentable?: boolean;
    creationDate?: CapiDateTime.ICapiDateTimeArgs;
    displayHint?: string;
    firstPublicationDate?: CapiDateTime.ICapiDateTimeArgs;
    hasStoryPackage?: boolean;
    internalComposerCode?: string;
    internalOctopusCode?: string;
    internalPageCode?: number;
    internalStoryPackageCode?: number;
    isInappropriateForSponsorship?: boolean;
    isPremoderated?: boolean;
    lastModified?: CapiDateTime.ICapiDateTimeArgs;
    liveBloggingNow?: boolean;
    newspaperEditionDate?: CapiDateTime.ICapiDateTimeArgs;
    productionOffice?: Office.Office;
    publication?: string;
    scheduledPublicationDate?: CapiDateTime.ICapiDateTimeArgs;
    secureThumbnail?: string;
    shortUrl?: string;
    shouldHideAdverts?: boolean;
    showInRelatedContent?: boolean;
    thumbnail?: string;
    legallySensitive?: boolean;
    allowUgc?: boolean;
    sensitive?: boolean;
    lang?: string;
    internalRevision?: number;
    internalContentCode?: number;
    isLive?: boolean;
    internalShortId?: string;
    shortSocialShareText?: string;
    socialShareText?: string;
    bodyText?: string;
    charCount?: number;
    internalVideoCode?: string;
    shouldHideReaderRevenue?: boolean;
    internalCommissionedWordcount?: number;
    showAffiliateLinks?: boolean;
    bylineHtml?: string;
}
export const ContentFieldsCodec: thrift.IStructCodec<IContentFieldsArgs, IContentFields> = {
    encode(args: IContentFieldsArgs, output: thrift.TProtocol): void {
        const obj: any = {
            headline: args.headline,
            standfirst: args.standfirst,
            trailText: args.trailText,
            byline: args.byline,
            main: args.main,
            body: args.body,
            newspaperPageNumber: args.newspaperPageNumber,
            starRating: args.starRating,
            contributorBio: args.contributorBio,
            membershipAccess: args.membershipAccess,
            wordcount: args.wordcount,
            commentCloseDate: args.commentCloseDate,
            commentable: args.commentable,
            creationDate: args.creationDate,
            displayHint: args.displayHint,
            firstPublicationDate: args.firstPublicationDate,
            hasStoryPackage: args.hasStoryPackage,
            internalComposerCode: args.internalComposerCode,
            internalOctopusCode: args.internalOctopusCode,
            internalPageCode: args.internalPageCode,
            internalStoryPackageCode: args.internalStoryPackageCode,
            isInappropriateForSponsorship: args.isInappropriateForSponsorship,
            isPremoderated: args.isPremoderated,
            lastModified: args.lastModified,
            liveBloggingNow: args.liveBloggingNow,
            newspaperEditionDate: args.newspaperEditionDate,
            productionOffice: args.productionOffice,
            publication: args.publication,
            scheduledPublicationDate: args.scheduledPublicationDate,
            secureThumbnail: args.secureThumbnail,
            shortUrl: args.shortUrl,
            shouldHideAdverts: args.shouldHideAdverts,
            showInRelatedContent: args.showInRelatedContent,
            thumbnail: args.thumbnail,
            legallySensitive: args.legallySensitive,
            allowUgc: args.allowUgc,
            sensitive: args.sensitive,
            lang: args.lang,
            internalRevision: args.internalRevision,
            internalContentCode: args.internalContentCode,
            isLive: args.isLive,
            internalShortId: args.internalShortId,
            shortSocialShareText: args.shortSocialShareText,
            socialShareText: args.socialShareText,
            bodyText: args.bodyText,
            charCount: args.charCount,
            internalVideoCode: args.internalVideoCode,
            shouldHideReaderRevenue: args.shouldHideReaderRevenue,
            internalCommissionedWordcount: args.internalCommissionedWordcount,
            showAffiliateLinks: args.showAffiliateLinks,
            bylineHtml: args.bylineHtml
        };
        output.writeStructBegin("ContentFields");
        if (obj.headline != null) {
            output.writeFieldBegin("headline", thrift.TType.STRING, 1);
            output.writeString(obj.headline);
            output.writeFieldEnd();
        }
        if (obj.standfirst != null) {
            output.writeFieldBegin("standfirst", thrift.TType.STRING, 2);
            output.writeString(obj.standfirst);
            output.writeFieldEnd();
        }
        if (obj.trailText != null) {
            output.writeFieldBegin("trailText", thrift.TType.STRING, 3);
            output.writeString(obj.trailText);
            output.writeFieldEnd();
        }
        if (obj.byline != null) {
            output.writeFieldBegin("byline", thrift.TType.STRING, 4);
            output.writeString(obj.byline);
            output.writeFieldEnd();
        }
        if (obj.main != null) {
            output.writeFieldBegin("main", thrift.TType.STRING, 5);
            output.writeString(obj.main);
            output.writeFieldEnd();
        }
        if (obj.body != null) {
            output.writeFieldBegin("body", thrift.TType.STRING, 6);
            output.writeString(obj.body);
            output.writeFieldEnd();
        }
        if (obj.newspaperPageNumber != null) {
            output.writeFieldBegin("newspaperPageNumber", thrift.TType.I32, 7);
            output.writeI32(obj.newspaperPageNumber);
            output.writeFieldEnd();
        }
        if (obj.starRating != null) {
            output.writeFieldBegin("starRating", thrift.TType.I32, 8);
            output.writeI32(obj.starRating);
            output.writeFieldEnd();
        }
        if (obj.contributorBio != null) {
            output.writeFieldBegin("contributorBio", thrift.TType.STRING, 9);
            output.writeString(obj.contributorBio);
            output.writeFieldEnd();
        }
        if (obj.membershipAccess != null) {
            output.writeFieldBegin("membershipAccess", thrift.TType.I32, 10);
            output.writeI32(obj.membershipAccess);
            output.writeFieldEnd();
        }
        if (obj.wordcount != null) {
            output.writeFieldBegin("wordcount", thrift.TType.I32, 11);
            output.writeI32(obj.wordcount);
            output.writeFieldEnd();
        }
        if (obj.commentCloseDate != null) {
            output.writeFieldBegin("commentCloseDate", thrift.TType.STRUCT, 12);
            CapiDateTime.CapiDateTimeCodec.encode(obj.commentCloseDate, output);
            output.writeFieldEnd();
        }
        if (obj.commentable != null) {
            output.writeFieldBegin("commentable", thrift.TType.BOOL, 13);
            output.writeBool(obj.commentable);
            output.writeFieldEnd();
        }
        if (obj.creationDate != null) {
            output.writeFieldBegin("creationDate", thrift.TType.STRUCT, 14);
            CapiDateTime.CapiDateTimeCodec.encode(obj.creationDate, output);
            output.writeFieldEnd();
        }
        if (obj.displayHint != null) {
            output.writeFieldBegin("displayHint", thrift.TType.STRING, 15);
            output.writeString(obj.displayHint);
            output.writeFieldEnd();
        }
        if (obj.firstPublicationDate != null) {
            output.writeFieldBegin("firstPublicationDate", thrift.TType.STRUCT, 16);
            CapiDateTime.CapiDateTimeCodec.encode(obj.firstPublicationDate, output);
            output.writeFieldEnd();
        }
        if (obj.hasStoryPackage != null) {
            output.writeFieldBegin("hasStoryPackage", thrift.TType.BOOL, 17);
            output.writeBool(obj.hasStoryPackage);
            output.writeFieldEnd();
        }
        if (obj.internalComposerCode != null) {
            output.writeFieldBegin("internalComposerCode", thrift.TType.STRING, 18);
            output.writeString(obj.internalComposerCode);
            output.writeFieldEnd();
        }
        if (obj.internalOctopusCode != null) {
            output.writeFieldBegin("internalOctopusCode", thrift.TType.STRING, 19);
            output.writeString(obj.internalOctopusCode);
            output.writeFieldEnd();
        }
        if (obj.internalPageCode != null) {
            output.writeFieldBegin("internalPageCode", thrift.TType.I32, 20);
            output.writeI32(obj.internalPageCode);
            output.writeFieldEnd();
        }
        if (obj.internalStoryPackageCode != null) {
            output.writeFieldBegin("internalStoryPackageCode", thrift.TType.I32, 21);
            output.writeI32(obj.internalStoryPackageCode);
            output.writeFieldEnd();
        }
        if (obj.isInappropriateForSponsorship != null) {
            output.writeFieldBegin("isInappropriateForSponsorship", thrift.TType.BOOL, 22);
            output.writeBool(obj.isInappropriateForSponsorship);
            output.writeFieldEnd();
        }
        if (obj.isPremoderated != null) {
            output.writeFieldBegin("isPremoderated", thrift.TType.BOOL, 23);
            output.writeBool(obj.isPremoderated);
            output.writeFieldEnd();
        }
        if (obj.lastModified != null) {
            output.writeFieldBegin("lastModified", thrift.TType.STRUCT, 24);
            CapiDateTime.CapiDateTimeCodec.encode(obj.lastModified, output);
            output.writeFieldEnd();
        }
        if (obj.liveBloggingNow != null) {
            output.writeFieldBegin("liveBloggingNow", thrift.TType.BOOL, 25);
            output.writeBool(obj.liveBloggingNow);
            output.writeFieldEnd();
        }
        if (obj.newspaperEditionDate != null) {
            output.writeFieldBegin("newspaperEditionDate", thrift.TType.STRUCT, 26);
            CapiDateTime.CapiDateTimeCodec.encode(obj.newspaperEditionDate, output);
            output.writeFieldEnd();
        }
        if (obj.productionOffice != null) {
            output.writeFieldBegin("productionOffice", thrift.TType.I32, 27);
            output.writeI32(obj.productionOffice);
            output.writeFieldEnd();
        }
        if (obj.publication != null) {
            output.writeFieldBegin("publication", thrift.TType.STRING, 28);
            output.writeString(obj.publication);
            output.writeFieldEnd();
        }
        if (obj.scheduledPublicationDate != null) {
            output.writeFieldBegin("scheduledPublicationDate", thrift.TType.STRUCT, 29);
            CapiDateTime.CapiDateTimeCodec.encode(obj.scheduledPublicationDate, output);
            output.writeFieldEnd();
        }
        if (obj.secureThumbnail != null) {
            output.writeFieldBegin("secureThumbnail", thrift.TType.STRING, 30);
            output.writeString(obj.secureThumbnail);
            output.writeFieldEnd();
        }
        if (obj.shortUrl != null) {
            output.writeFieldBegin("shortUrl", thrift.TType.STRING, 31);
            output.writeString(obj.shortUrl);
            output.writeFieldEnd();
        }
        if (obj.shouldHideAdverts != null) {
            output.writeFieldBegin("shouldHideAdverts", thrift.TType.BOOL, 32);
            output.writeBool(obj.shouldHideAdverts);
            output.writeFieldEnd();
        }
        if (obj.showInRelatedContent != null) {
            output.writeFieldBegin("showInRelatedContent", thrift.TType.BOOL, 33);
            output.writeBool(obj.showInRelatedContent);
            output.writeFieldEnd();
        }
        if (obj.thumbnail != null) {
            output.writeFieldBegin("thumbnail", thrift.TType.STRING, 34);
            output.writeString(obj.thumbnail);
            output.writeFieldEnd();
        }
        if (obj.legallySensitive != null) {
            output.writeFieldBegin("legallySensitive", thrift.TType.BOOL, 35);
            output.writeBool(obj.legallySensitive);
            output.writeFieldEnd();
        }
        if (obj.allowUgc != null) {
            output.writeFieldBegin("allowUgc", thrift.TType.BOOL, 36);
            output.writeBool(obj.allowUgc);
            output.writeFieldEnd();
        }
        if (obj.sensitive != null) {
            output.writeFieldBegin("sensitive", thrift.TType.BOOL, 37);
            output.writeBool(obj.sensitive);
            output.writeFieldEnd();
        }
        if (obj.lang != null) {
            output.writeFieldBegin("lang", thrift.TType.STRING, 38);
            output.writeString(obj.lang);
            output.writeFieldEnd();
        }
        if (obj.internalRevision != null) {
            output.writeFieldBegin("internalRevision", thrift.TType.I32, 39);
            output.writeI32(obj.internalRevision);
            output.writeFieldEnd();
        }
        if (obj.internalContentCode != null) {
            output.writeFieldBegin("internalContentCode", thrift.TType.I32, 40);
            output.writeI32(obj.internalContentCode);
            output.writeFieldEnd();
        }
        if (obj.isLive != null) {
            output.writeFieldBegin("isLive", thrift.TType.BOOL, 41);
            output.writeBool(obj.isLive);
            output.writeFieldEnd();
        }
        if (obj.internalShortId != null) {
            output.writeFieldBegin("internalShortId", thrift.TType.STRING, 42);
            output.writeString(obj.internalShortId);
            output.writeFieldEnd();
        }
        if (obj.shortSocialShareText != null) {
            output.writeFieldBegin("shortSocialShareText", thrift.TType.STRING, 43);
            output.writeString(obj.shortSocialShareText);
            output.writeFieldEnd();
        }
        if (obj.socialShareText != null) {
            output.writeFieldBegin("socialShareText", thrift.TType.STRING, 44);
            output.writeString(obj.socialShareText);
            output.writeFieldEnd();
        }
        if (obj.bodyText != null) {
            output.writeFieldBegin("bodyText", thrift.TType.STRING, 45);
            output.writeString(obj.bodyText);
            output.writeFieldEnd();
        }
        if (obj.charCount != null) {
            output.writeFieldBegin("charCount", thrift.TType.I32, 46);
            output.writeI32(obj.charCount);
            output.writeFieldEnd();
        }
        if (obj.internalVideoCode != null) {
            output.writeFieldBegin("internalVideoCode", thrift.TType.STRING, 47);
            output.writeString(obj.internalVideoCode);
            output.writeFieldEnd();
        }
        if (obj.shouldHideReaderRevenue != null) {
            output.writeFieldBegin("shouldHideReaderRevenue", thrift.TType.BOOL, 48);
            output.writeBool(obj.shouldHideReaderRevenue);
            output.writeFieldEnd();
        }
        if (obj.internalCommissionedWordcount != null) {
            output.writeFieldBegin("internalCommissionedWordcount", thrift.TType.I32, 49);
            output.writeI32(obj.internalCommissionedWordcount);
            output.writeFieldEnd();
        }
        if (obj.showAffiliateLinks != null) {
            output.writeFieldBegin("showAffiliateLinks", thrift.TType.BOOL, 50);
            output.writeBool(obj.showAffiliateLinks);
            output.writeFieldEnd();
        }
        if (obj.bylineHtml != null) {
            output.writeFieldBegin("bylineHtml", thrift.TType.STRING, 51);
            output.writeString(obj.bylineHtml);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IContentFields {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_1: string = input.readString();
                        _args.headline = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: string = input.readString();
                        _args.standfirst = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_3: string = input.readString();
                        _args.trailText = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRING) {
                        const value_4: string = input.readString();
                        _args.byline = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.STRING) {
                        const value_5: string = input.readString();
                        _args.main = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.STRING) {
                        const value_6: string = input.readString();
                        _args.body = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.TType.I32) {
                        const value_7: number = input.readI32();
                        _args.newspaperPageNumber = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.TType.I32) {
                        const value_8: number = input.readI32();
                        _args.starRating = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.TType.STRING) {
                        const value_9: string = input.readString();
                        _args.contributorBio = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.TType.I32) {
                        const value_10: MembershipTier.MembershipTier = input.readI32();
                        _args.membershipAccess = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.TType.I32) {
                        const value_11: number = input.readI32();
                        _args.wordcount = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_12: CapiDateTime.ICapiDateTime = CapiDateTime.CapiDateTimeCodec.decode(input);
                        _args.commentCloseDate = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_13: boolean = input.readBool();
                        _args.commentable = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_14: CapiDateTime.ICapiDateTime = CapiDateTime.CapiDateTimeCodec.decode(input);
                        _args.creationDate = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.TType.STRING) {
                        const value_15: string = input.readString();
                        _args.displayHint = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 16:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_16: CapiDateTime.ICapiDateTime = CapiDateTime.CapiDateTimeCodec.decode(input);
                        _args.firstPublicationDate = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 17:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_17: boolean = input.readBool();
                        _args.hasStoryPackage = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 18:
                    if (fieldType === thrift.TType.STRING) {
                        const value_18: string = input.readString();
                        _args.internalComposerCode = value_18;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 19:
                    if (fieldType === thrift.TType.STRING) {
                        const value_19: string = input.readString();
                        _args.internalOctopusCode = value_19;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 20:
                    if (fieldType === thrift.TType.I32) {
                        const value_20: number = input.readI32();
                        _args.internalPageCode = value_20;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 21:
                    if (fieldType === thrift.TType.I32) {
                        const value_21: number = input.readI32();
                        _args.internalStoryPackageCode = value_21;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 22:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_22: boolean = input.readBool();
                        _args.isInappropriateForSponsorship = value_22;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 23:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_23: boolean = input.readBool();
                        _args.isPremoderated = value_23;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 24:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_24: CapiDateTime.ICapiDateTime = CapiDateTime.CapiDateTimeCodec.decode(input);
                        _args.lastModified = value_24;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 25:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_25: boolean = input.readBool();
                        _args.liveBloggingNow = value_25;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 26:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_26: CapiDateTime.ICapiDateTime = CapiDateTime.CapiDateTimeCodec.decode(input);
                        _args.newspaperEditionDate = value_26;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 27:
                    if (fieldType === thrift.TType.I32) {
                        const value_27: Office.Office = input.readI32();
                        _args.productionOffice = value_27;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 28:
                    if (fieldType === thrift.TType.STRING) {
                        const value_28: string = input.readString();
                        _args.publication = value_28;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 29:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_29: CapiDateTime.ICapiDateTime = CapiDateTime.CapiDateTimeCodec.decode(input);
                        _args.scheduledPublicationDate = value_29;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 30:
                    if (fieldType === thrift.TType.STRING) {
                        const value_30: string = input.readString();
                        _args.secureThumbnail = value_30;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 31:
                    if (fieldType === thrift.TType.STRING) {
                        const value_31: string = input.readString();
                        _args.shortUrl = value_31;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 32:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_32: boolean = input.readBool();
                        _args.shouldHideAdverts = value_32;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 33:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_33: boolean = input.readBool();
                        _args.showInRelatedContent = value_33;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 34:
                    if (fieldType === thrift.TType.STRING) {
                        const value_34: string = input.readString();
                        _args.thumbnail = value_34;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 35:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_35: boolean = input.readBool();
                        _args.legallySensitive = value_35;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 36:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_36: boolean = input.readBool();
                        _args.allowUgc = value_36;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 37:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_37: boolean = input.readBool();
                        _args.sensitive = value_37;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 38:
                    if (fieldType === thrift.TType.STRING) {
                        const value_38: string = input.readString();
                        _args.lang = value_38;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 39:
                    if (fieldType === thrift.TType.I32) {
                        const value_39: number = input.readI32();
                        _args.internalRevision = value_39;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 40:
                    if (fieldType === thrift.TType.I32) {
                        const value_40: number = input.readI32();
                        _args.internalContentCode = value_40;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 41:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_41: boolean = input.readBool();
                        _args.isLive = value_41;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 42:
                    if (fieldType === thrift.TType.STRING) {
                        const value_42: string = input.readString();
                        _args.internalShortId = value_42;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 43:
                    if (fieldType === thrift.TType.STRING) {
                        const value_43: string = input.readString();
                        _args.shortSocialShareText = value_43;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 44:
                    if (fieldType === thrift.TType.STRING) {
                        const value_44: string = input.readString();
                        _args.socialShareText = value_44;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 45:
                    if (fieldType === thrift.TType.STRING) {
                        const value_45: string = input.readString();
                        _args.bodyText = value_45;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 46:
                    if (fieldType === thrift.TType.I32) {
                        const value_46: number = input.readI32();
                        _args.charCount = value_46;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 47:
                    if (fieldType === thrift.TType.STRING) {
                        const value_47: string = input.readString();
                        _args.internalVideoCode = value_47;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 48:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_48: boolean = input.readBool();
                        _args.shouldHideReaderRevenue = value_48;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 49:
                    if (fieldType === thrift.TType.I32) {
                        const value_49: number = input.readI32();
                        _args.internalCommissionedWordcount = value_49;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 50:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_50: boolean = input.readBool();
                        _args.showAffiliateLinks = value_50;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 51:
                    if (fieldType === thrift.TType.STRING) {
                        const value_51: string = input.readString();
                        _args.bylineHtml = value_51;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            headline: _args.headline,
            standfirst: _args.standfirst,
            trailText: _args.trailText,
            byline: _args.byline,
            main: _args.main,
            body: _args.body,
            newspaperPageNumber: _args.newspaperPageNumber,
            starRating: _args.starRating,
            contributorBio: _args.contributorBio,
            membershipAccess: _args.membershipAccess,
            wordcount: _args.wordcount,
            commentCloseDate: _args.commentCloseDate,
            commentable: _args.commentable,
            creationDate: _args.creationDate,
            displayHint: _args.displayHint,
            firstPublicationDate: _args.firstPublicationDate,
            hasStoryPackage: _args.hasStoryPackage,
            internalComposerCode: _args.internalComposerCode,
            internalOctopusCode: _args.internalOctopusCode,
            internalPageCode: _args.internalPageCode,
            internalStoryPackageCode: _args.internalStoryPackageCode,
            isInappropriateForSponsorship: _args.isInappropriateForSponsorship,
            isPremoderated: _args.isPremoderated,
            lastModified: _args.lastModified,
            liveBloggingNow: _args.liveBloggingNow,
            newspaperEditionDate: _args.newspaperEditionDate,
            productionOffice: _args.productionOffice,
            publication: _args.publication,
            scheduledPublicationDate: _args.scheduledPublicationDate,
            secureThumbnail: _args.secureThumbnail,
            shortUrl: _args.shortUrl,
            shouldHideAdverts: _args.shouldHideAdverts,
            showInRelatedContent: _args.showInRelatedContent,
            thumbnail: _args.thumbnail,
            legallySensitive: _args.legallySensitive,
            allowUgc: _args.allowUgc,
            sensitive: _args.sensitive,
            lang: _args.lang,
            internalRevision: _args.internalRevision,
            internalContentCode: _args.internalContentCode,
            isLive: _args.isLive,
            internalShortId: _args.internalShortId,
            shortSocialShareText: _args.shortSocialShareText,
            socialShareText: _args.socialShareText,
            bodyText: _args.bodyText,
            charCount: _args.charCount,
            internalVideoCode: _args.internalVideoCode,
            shouldHideReaderRevenue: _args.shouldHideReaderRevenue,
            internalCommissionedWordcount: _args.internalCommissionedWordcount,
            showAffiliateLinks: _args.showAffiliateLinks,
            bylineHtml: _args.bylineHtml
        };
    }
};
export class ContentFields extends thrift.StructLike implements IContentFields {
    public headline?: string;
    public standfirst?: string;
    public trailText?: string;
    public byline?: string;
    public main?: string;
    public body?: string;
    public newspaperPageNumber?: number;
    public starRating?: number;
    public contributorBio?: string;
    public membershipAccess?: MembershipTier.MembershipTier;
    public wordcount?: number;
    public commentCloseDate?: CapiDateTime.ICapiDateTime;
    public commentable?: boolean;
    public creationDate?: CapiDateTime.ICapiDateTime;
    public displayHint?: string;
    public firstPublicationDate?: CapiDateTime.ICapiDateTime;
    public hasStoryPackage?: boolean;
    public internalComposerCode?: string;
    public internalOctopusCode?: string;
    public internalPageCode?: number;
    public internalStoryPackageCode?: number;
    public isInappropriateForSponsorship?: boolean;
    public isPremoderated?: boolean;
    public lastModified?: CapiDateTime.ICapiDateTime;
    public liveBloggingNow?: boolean;
    public newspaperEditionDate?: CapiDateTime.ICapiDateTime;
    public productionOffice?: Office.Office;
    public publication?: string;
    public scheduledPublicationDate?: CapiDateTime.ICapiDateTime;
    public secureThumbnail?: string;
    public shortUrl?: string;
    public shouldHideAdverts?: boolean;
    public showInRelatedContent?: boolean;
    public thumbnail?: string;
    public legallySensitive?: boolean;
    public allowUgc?: boolean;
    public sensitive?: boolean;
    public lang?: string;
    public internalRevision?: number;
    public internalContentCode?: number;
    public isLive?: boolean;
    public internalShortId?: string;
    public shortSocialShareText?: string;
    public socialShareText?: string;
    public bodyText?: string;
    public charCount?: number;
    public internalVideoCode?: string;
    public shouldHideReaderRevenue?: boolean;
    public internalCommissionedWordcount?: number;
    public showAffiliateLinks?: boolean;
    public bylineHtml?: string;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IContentFieldsArgs = {}) {
        super();
        if (args.headline != null) {
            const value_52: string = args.headline;
            this.headline = value_52;
        }
        if (args.standfirst != null) {
            const value_53: string = args.standfirst;
            this.standfirst = value_53;
        }
        if (args.trailText != null) {
            const value_54: string = args.trailText;
            this.trailText = value_54;
        }
        if (args.byline != null) {
            const value_55: string = args.byline;
            this.byline = value_55;
        }
        if (args.main != null) {
            const value_56: string = args.main;
            this.main = value_56;
        }
        if (args.body != null) {
            const value_57: string = args.body;
            this.body = value_57;
        }
        if (args.newspaperPageNumber != null) {
            const value_58: number = args.newspaperPageNumber;
            this.newspaperPageNumber = value_58;
        }
        if (args.starRating != null) {
            const value_59: number = args.starRating;
            this.starRating = value_59;
        }
        if (args.contributorBio != null) {
            const value_60: string = args.contributorBio;
            this.contributorBio = value_60;
        }
        if (args.membershipAccess != null) {
            const value_61: MembershipTier.MembershipTier = args.membershipAccess;
            this.membershipAccess = value_61;
        }
        if (args.wordcount != null) {
            const value_62: number = args.wordcount;
            this.wordcount = value_62;
        }
        if (args.commentCloseDate != null) {
            const value_63: CapiDateTime.ICapiDateTime = new CapiDateTime.CapiDateTime(args.commentCloseDate);
            this.commentCloseDate = value_63;
        }
        if (args.commentable != null) {
            const value_64: boolean = args.commentable;
            this.commentable = value_64;
        }
        if (args.creationDate != null) {
            const value_65: CapiDateTime.ICapiDateTime = new CapiDateTime.CapiDateTime(args.creationDate);
            this.creationDate = value_65;
        }
        if (args.displayHint != null) {
            const value_66: string = args.displayHint;
            this.displayHint = value_66;
        }
        if (args.firstPublicationDate != null) {
            const value_67: CapiDateTime.ICapiDateTime = new CapiDateTime.CapiDateTime(args.firstPublicationDate);
            this.firstPublicationDate = value_67;
        }
        if (args.hasStoryPackage != null) {
            const value_68: boolean = args.hasStoryPackage;
            this.hasStoryPackage = value_68;
        }
        if (args.internalComposerCode != null) {
            const value_69: string = args.internalComposerCode;
            this.internalComposerCode = value_69;
        }
        if (args.internalOctopusCode != null) {
            const value_70: string = args.internalOctopusCode;
            this.internalOctopusCode = value_70;
        }
        if (args.internalPageCode != null) {
            const value_71: number = args.internalPageCode;
            this.internalPageCode = value_71;
        }
        if (args.internalStoryPackageCode != null) {
            const value_72: number = args.internalStoryPackageCode;
            this.internalStoryPackageCode = value_72;
        }
        if (args.isInappropriateForSponsorship != null) {
            const value_73: boolean = args.isInappropriateForSponsorship;
            this.isInappropriateForSponsorship = value_73;
        }
        if (args.isPremoderated != null) {
            const value_74: boolean = args.isPremoderated;
            this.isPremoderated = value_74;
        }
        if (args.lastModified != null) {
            const value_75: CapiDateTime.ICapiDateTime = new CapiDateTime.CapiDateTime(args.lastModified);
            this.lastModified = value_75;
        }
        if (args.liveBloggingNow != null) {
            const value_76: boolean = args.liveBloggingNow;
            this.liveBloggingNow = value_76;
        }
        if (args.newspaperEditionDate != null) {
            const value_77: CapiDateTime.ICapiDateTime = new CapiDateTime.CapiDateTime(args.newspaperEditionDate);
            this.newspaperEditionDate = value_77;
        }
        if (args.productionOffice != null) {
            const value_78: Office.Office = args.productionOffice;
            this.productionOffice = value_78;
        }
        if (args.publication != null) {
            const value_79: string = args.publication;
            this.publication = value_79;
        }
        if (args.scheduledPublicationDate != null) {
            const value_80: CapiDateTime.ICapiDateTime = new CapiDateTime.CapiDateTime(args.scheduledPublicationDate);
            this.scheduledPublicationDate = value_80;
        }
        if (args.secureThumbnail != null) {
            const value_81: string = args.secureThumbnail;
            this.secureThumbnail = value_81;
        }
        if (args.shortUrl != null) {
            const value_82: string = args.shortUrl;
            this.shortUrl = value_82;
        }
        if (args.shouldHideAdverts != null) {
            const value_83: boolean = args.shouldHideAdverts;
            this.shouldHideAdverts = value_83;
        }
        if (args.showInRelatedContent != null) {
            const value_84: boolean = args.showInRelatedContent;
            this.showInRelatedContent = value_84;
        }
        if (args.thumbnail != null) {
            const value_85: string = args.thumbnail;
            this.thumbnail = value_85;
        }
        if (args.legallySensitive != null) {
            const value_86: boolean = args.legallySensitive;
            this.legallySensitive = value_86;
        }
        if (args.allowUgc != null) {
            const value_87: boolean = args.allowUgc;
            this.allowUgc = value_87;
        }
        if (args.sensitive != null) {
            const value_88: boolean = args.sensitive;
            this.sensitive = value_88;
        }
        if (args.lang != null) {
            const value_89: string = args.lang;
            this.lang = value_89;
        }
        if (args.internalRevision != null) {
            const value_90: number = args.internalRevision;
            this.internalRevision = value_90;
        }
        if (args.internalContentCode != null) {
            const value_91: number = args.internalContentCode;
            this.internalContentCode = value_91;
        }
        if (args.isLive != null) {
            const value_92: boolean = args.isLive;
            this.isLive = value_92;
        }
        if (args.internalShortId != null) {
            const value_93: string = args.internalShortId;
            this.internalShortId = value_93;
        }
        if (args.shortSocialShareText != null) {
            const value_94: string = args.shortSocialShareText;
            this.shortSocialShareText = value_94;
        }
        if (args.socialShareText != null) {
            const value_95: string = args.socialShareText;
            this.socialShareText = value_95;
        }
        if (args.bodyText != null) {
            const value_96: string = args.bodyText;
            this.bodyText = value_96;
        }
        if (args.charCount != null) {
            const value_97: number = args.charCount;
            this.charCount = value_97;
        }
        if (args.internalVideoCode != null) {
            const value_98: string = args.internalVideoCode;
            this.internalVideoCode = value_98;
        }
        if (args.shouldHideReaderRevenue != null) {
            const value_99: boolean = args.shouldHideReaderRevenue;
            this.shouldHideReaderRevenue = value_99;
        }
        if (args.internalCommissionedWordcount != null) {
            const value_100: number = args.internalCommissionedWordcount;
            this.internalCommissionedWordcount = value_100;
        }
        if (args.showAffiliateLinks != null) {
            const value_101: boolean = args.showAffiliateLinks;
            this.showAffiliateLinks = value_101;
        }
        if (args.bylineHtml != null) {
            const value_102: string = args.bylineHtml;
            this.bylineHtml = value_102;
        }
    }
    public static read(input: thrift.TProtocol): ContentFields {
        return new ContentFields(ContentFieldsCodec.decode(input));
    }
    public static write(args: IContentFieldsArgs, output: thrift.TProtocol): void {
        return ContentFieldsCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return ContentFieldsCodec.encode(this, output);
    }
}
