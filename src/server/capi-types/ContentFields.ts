/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as MembershipTier from "./MembershipTier";
import * as CapiDateTime from "./CapiDateTime";
import * as Office from "./Office";
export interface IContentFieldsArgs {
    headline?: string;
    standfirst?: string;
    trailText?: string;
    byline?: string;
    main?: string;
    body?: string;
    newspaperPageNumber?: number;
    starRating?: number;
    contributorBio?: string;
    membershipAccess?: MembershipTier.MembershipTier;
    wordcount?: number;
    commentCloseDate?: CapiDateTime.CapiDateTime;
    commentable?: boolean;
    creationDate?: CapiDateTime.CapiDateTime;
    displayHint?: string;
    firstPublicationDate?: CapiDateTime.CapiDateTime;
    hasStoryPackage?: boolean;
    internalComposerCode?: string;
    internalOctopusCode?: string;
    internalPageCode?: number;
    internalStoryPackageCode?: number;
    isInappropriateForSponsorship?: boolean;
    isPremoderated?: boolean;
    lastModified?: CapiDateTime.CapiDateTime;
    liveBloggingNow?: boolean;
    newspaperEditionDate?: CapiDateTime.CapiDateTime;
    productionOffice?: Office.Office;
    publication?: string;
    scheduledPublicationDate?: CapiDateTime.CapiDateTime;
    secureThumbnail?: string;
    shortUrl?: string;
    shouldHideAdverts?: boolean;
    showInRelatedContent?: boolean;
    thumbnail?: string;
    legallySensitive?: boolean;
    allowUgc?: boolean;
    sensitive?: boolean;
    lang?: string;
    internalRevision?: number;
    internalContentCode?: number;
    isLive?: boolean;
    internalShortId?: string;
    shortSocialShareText?: string;
    socialShareText?: string;
    bodyText?: string;
    charCount?: number;
    internalVideoCode?: string;
    shouldHideReaderRevenue?: boolean;
    internalCommissionedWordcount?: number;
    showAffiliateLinks?: boolean;
    bylineHtml?: string;
}
export class ContentFields {
    public headline?: string;
    public standfirst?: string;
    public trailText?: string;
    public byline?: string;
    public main?: string;
    public body?: string;
    public newspaperPageNumber?: number;
    public starRating?: number;
    public contributorBio?: string;
    public membershipAccess?: MembershipTier.MembershipTier;
    public wordcount?: number;
    public commentCloseDate?: CapiDateTime.CapiDateTime;
    public commentable?: boolean;
    public creationDate?: CapiDateTime.CapiDateTime;
    public displayHint?: string;
    public firstPublicationDate?: CapiDateTime.CapiDateTime;
    public hasStoryPackage?: boolean;
    public internalComposerCode?: string;
    public internalOctopusCode?: string;
    public internalPageCode?: number;
    public internalStoryPackageCode?: number;
    public isInappropriateForSponsorship?: boolean;
    public isPremoderated?: boolean;
    public lastModified?: CapiDateTime.CapiDateTime;
    public liveBloggingNow?: boolean;
    public newspaperEditionDate?: CapiDateTime.CapiDateTime;
    public productionOffice?: Office.Office;
    public publication?: string;
    public scheduledPublicationDate?: CapiDateTime.CapiDateTime;
    public secureThumbnail?: string;
    public shortUrl?: string;
    public shouldHideAdverts?: boolean;
    public showInRelatedContent?: boolean;
    public thumbnail?: string;
    public legallySensitive?: boolean;
    public allowUgc?: boolean;
    public sensitive?: boolean;
    public lang?: string;
    public internalRevision?: number;
    public internalContentCode?: number;
    public isLive?: boolean;
    public internalShortId?: string;
    public shortSocialShareText?: string;
    public socialShareText?: string;
    public bodyText?: string;
    public charCount?: number;
    public internalVideoCode?: string;
    public shouldHideReaderRevenue?: boolean;
    public internalCommissionedWordcount?: number;
    public showAffiliateLinks?: boolean;
    public bylineHtml?: string;
    constructor(args?: IContentFieldsArgs) {
        if (args != null && args.headline != null) {
            this.headline = args.headline;
        }
        if (args != null && args.standfirst != null) {
            this.standfirst = args.standfirst;
        }
        if (args != null && args.trailText != null) {
            this.trailText = args.trailText;
        }
        if (args != null && args.byline != null) {
            this.byline = args.byline;
        }
        if (args != null && args.main != null) {
            this.main = args.main;
        }
        if (args != null && args.body != null) {
            this.body = args.body;
        }
        if (args != null && args.newspaperPageNumber != null) {
            this.newspaperPageNumber = args.newspaperPageNumber;
        }
        if (args != null && args.starRating != null) {
            this.starRating = args.starRating;
        }
        if (args != null && args.contributorBio != null) {
            this.contributorBio = args.contributorBio;
        }
        if (args != null && args.membershipAccess != null) {
            this.membershipAccess = args.membershipAccess;
        }
        if (args != null && args.wordcount != null) {
            this.wordcount = args.wordcount;
        }
        if (args != null && args.commentCloseDate != null) {
            this.commentCloseDate = args.commentCloseDate;
        }
        if (args != null && args.commentable != null) {
            this.commentable = args.commentable;
        }
        if (args != null && args.creationDate != null) {
            this.creationDate = args.creationDate;
        }
        if (args != null && args.displayHint != null) {
            this.displayHint = args.displayHint;
        }
        if (args != null && args.firstPublicationDate != null) {
            this.firstPublicationDate = args.firstPublicationDate;
        }
        if (args != null && args.hasStoryPackage != null) {
            this.hasStoryPackage = args.hasStoryPackage;
        }
        if (args != null && args.internalComposerCode != null) {
            this.internalComposerCode = args.internalComposerCode;
        }
        if (args != null && args.internalOctopusCode != null) {
            this.internalOctopusCode = args.internalOctopusCode;
        }
        if (args != null && args.internalPageCode != null) {
            this.internalPageCode = args.internalPageCode;
        }
        if (args != null && args.internalStoryPackageCode != null) {
            this.internalStoryPackageCode = args.internalStoryPackageCode;
        }
        if (args != null && args.isInappropriateForSponsorship != null) {
            this.isInappropriateForSponsorship = args.isInappropriateForSponsorship;
        }
        if (args != null && args.isPremoderated != null) {
            this.isPremoderated = args.isPremoderated;
        }
        if (args != null && args.lastModified != null) {
            this.lastModified = args.lastModified;
        }
        if (args != null && args.liveBloggingNow != null) {
            this.liveBloggingNow = args.liveBloggingNow;
        }
        if (args != null && args.newspaperEditionDate != null) {
            this.newspaperEditionDate = args.newspaperEditionDate;
        }
        if (args != null && args.productionOffice != null) {
            this.productionOffice = args.productionOffice;
        }
        if (args != null && args.publication != null) {
            this.publication = args.publication;
        }
        if (args != null && args.scheduledPublicationDate != null) {
            this.scheduledPublicationDate = args.scheduledPublicationDate;
        }
        if (args != null && args.secureThumbnail != null) {
            this.secureThumbnail = args.secureThumbnail;
        }
        if (args != null && args.shortUrl != null) {
            this.shortUrl = args.shortUrl;
        }
        if (args != null && args.shouldHideAdverts != null) {
            this.shouldHideAdverts = args.shouldHideAdverts;
        }
        if (args != null && args.showInRelatedContent != null) {
            this.showInRelatedContent = args.showInRelatedContent;
        }
        if (args != null && args.thumbnail != null) {
            this.thumbnail = args.thumbnail;
        }
        if (args != null && args.legallySensitive != null) {
            this.legallySensitive = args.legallySensitive;
        }
        if (args != null && args.allowUgc != null) {
            this.allowUgc = args.allowUgc;
        }
        if (args != null && args.sensitive != null) {
            this.sensitive = args.sensitive;
        }
        if (args != null && args.lang != null) {
            this.lang = args.lang;
        }
        if (args != null && args.internalRevision != null) {
            this.internalRevision = args.internalRevision;
        }
        if (args != null && args.internalContentCode != null) {
            this.internalContentCode = args.internalContentCode;
        }
        if (args != null && args.isLive != null) {
            this.isLive = args.isLive;
        }
        if (args != null && args.internalShortId != null) {
            this.internalShortId = args.internalShortId;
        }
        if (args != null && args.shortSocialShareText != null) {
            this.shortSocialShareText = args.shortSocialShareText;
        }
        if (args != null && args.socialShareText != null) {
            this.socialShareText = args.socialShareText;
        }
        if (args != null && args.bodyText != null) {
            this.bodyText = args.bodyText;
        }
        if (args != null && args.charCount != null) {
            this.charCount = args.charCount;
        }
        if (args != null && args.internalVideoCode != null) {
            this.internalVideoCode = args.internalVideoCode;
        }
        if (args != null && args.shouldHideReaderRevenue != null) {
            this.shouldHideReaderRevenue = args.shouldHideReaderRevenue;
        }
        if (args != null && args.internalCommissionedWordcount != null) {
            this.internalCommissionedWordcount = args.internalCommissionedWordcount;
        }
        if (args != null && args.showAffiliateLinks != null) {
            this.showAffiliateLinks = args.showAffiliateLinks;
        }
        if (args != null && args.bylineHtml != null) {
            this.bylineHtml = args.bylineHtml;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ContentFields");
        if (this.headline != null) {
            output.writeFieldBegin("headline", thrift.TType.STRING, 1);
            output.writeString(this.headline);
            output.writeFieldEnd();
        }
        if (this.standfirst != null) {
            output.writeFieldBegin("standfirst", thrift.TType.STRING, 2);
            output.writeString(this.standfirst);
            output.writeFieldEnd();
        }
        if (this.trailText != null) {
            output.writeFieldBegin("trailText", thrift.TType.STRING, 3);
            output.writeString(this.trailText);
            output.writeFieldEnd();
        }
        if (this.byline != null) {
            output.writeFieldBegin("byline", thrift.TType.STRING, 4);
            output.writeString(this.byline);
            output.writeFieldEnd();
        }
        if (this.main != null) {
            output.writeFieldBegin("main", thrift.TType.STRING, 5);
            output.writeString(this.main);
            output.writeFieldEnd();
        }
        if (this.body != null) {
            output.writeFieldBegin("body", thrift.TType.STRING, 6);
            output.writeString(this.body);
            output.writeFieldEnd();
        }
        if (this.newspaperPageNumber != null) {
            output.writeFieldBegin("newspaperPageNumber", thrift.TType.I32, 7);
            output.writeI32(this.newspaperPageNumber);
            output.writeFieldEnd();
        }
        if (this.starRating != null) {
            output.writeFieldBegin("starRating", thrift.TType.I32, 8);
            output.writeI32(this.starRating);
            output.writeFieldEnd();
        }
        if (this.contributorBio != null) {
            output.writeFieldBegin("contributorBio", thrift.TType.STRING, 9);
            output.writeString(this.contributorBio);
            output.writeFieldEnd();
        }
        if (this.membershipAccess != null) {
            output.writeFieldBegin("membershipAccess", thrift.TType.I32, 10);
            output.writeI32(this.membershipAccess);
            output.writeFieldEnd();
        }
        if (this.wordcount != null) {
            output.writeFieldBegin("wordcount", thrift.TType.I32, 11);
            output.writeI32(this.wordcount);
            output.writeFieldEnd();
        }
        if (this.commentCloseDate != null) {
            output.writeFieldBegin("commentCloseDate", thrift.TType.STRUCT, 12);
            this.commentCloseDate.write(output);
            output.writeFieldEnd();
        }
        if (this.commentable != null) {
            output.writeFieldBegin("commentable", thrift.TType.BOOL, 13);
            output.writeBool(this.commentable);
            output.writeFieldEnd();
        }
        if (this.creationDate != null) {
            output.writeFieldBegin("creationDate", thrift.TType.STRUCT, 14);
            this.creationDate.write(output);
            output.writeFieldEnd();
        }
        if (this.displayHint != null) {
            output.writeFieldBegin("displayHint", thrift.TType.STRING, 15);
            output.writeString(this.displayHint);
            output.writeFieldEnd();
        }
        if (this.firstPublicationDate != null) {
            output.writeFieldBegin("firstPublicationDate", thrift.TType.STRUCT, 16);
            this.firstPublicationDate.write(output);
            output.writeFieldEnd();
        }
        if (this.hasStoryPackage != null) {
            output.writeFieldBegin("hasStoryPackage", thrift.TType.BOOL, 17);
            output.writeBool(this.hasStoryPackage);
            output.writeFieldEnd();
        }
        if (this.internalComposerCode != null) {
            output.writeFieldBegin("internalComposerCode", thrift.TType.STRING, 18);
            output.writeString(this.internalComposerCode);
            output.writeFieldEnd();
        }
        if (this.internalOctopusCode != null) {
            output.writeFieldBegin("internalOctopusCode", thrift.TType.STRING, 19);
            output.writeString(this.internalOctopusCode);
            output.writeFieldEnd();
        }
        if (this.internalPageCode != null) {
            output.writeFieldBegin("internalPageCode", thrift.TType.I32, 20);
            output.writeI32(this.internalPageCode);
            output.writeFieldEnd();
        }
        if (this.internalStoryPackageCode != null) {
            output.writeFieldBegin("internalStoryPackageCode", thrift.TType.I32, 21);
            output.writeI32(this.internalStoryPackageCode);
            output.writeFieldEnd();
        }
        if (this.isInappropriateForSponsorship != null) {
            output.writeFieldBegin("isInappropriateForSponsorship", thrift.TType.BOOL, 22);
            output.writeBool(this.isInappropriateForSponsorship);
            output.writeFieldEnd();
        }
        if (this.isPremoderated != null) {
            output.writeFieldBegin("isPremoderated", thrift.TType.BOOL, 23);
            output.writeBool(this.isPremoderated);
            output.writeFieldEnd();
        }
        if (this.lastModified != null) {
            output.writeFieldBegin("lastModified", thrift.TType.STRUCT, 24);
            this.lastModified.write(output);
            output.writeFieldEnd();
        }
        if (this.liveBloggingNow != null) {
            output.writeFieldBegin("liveBloggingNow", thrift.TType.BOOL, 25);
            output.writeBool(this.liveBloggingNow);
            output.writeFieldEnd();
        }
        if (this.newspaperEditionDate != null) {
            output.writeFieldBegin("newspaperEditionDate", thrift.TType.STRUCT, 26);
            this.newspaperEditionDate.write(output);
            output.writeFieldEnd();
        }
        if (this.productionOffice != null) {
            output.writeFieldBegin("productionOffice", thrift.TType.I32, 27);
            output.writeI32(this.productionOffice);
            output.writeFieldEnd();
        }
        if (this.publication != null) {
            output.writeFieldBegin("publication", thrift.TType.STRING, 28);
            output.writeString(this.publication);
            output.writeFieldEnd();
        }
        if (this.scheduledPublicationDate != null) {
            output.writeFieldBegin("scheduledPublicationDate", thrift.TType.STRUCT, 29);
            this.scheduledPublicationDate.write(output);
            output.writeFieldEnd();
        }
        if (this.secureThumbnail != null) {
            output.writeFieldBegin("secureThumbnail", thrift.TType.STRING, 30);
            output.writeString(this.secureThumbnail);
            output.writeFieldEnd();
        }
        if (this.shortUrl != null) {
            output.writeFieldBegin("shortUrl", thrift.TType.STRING, 31);
            output.writeString(this.shortUrl);
            output.writeFieldEnd();
        }
        if (this.shouldHideAdverts != null) {
            output.writeFieldBegin("shouldHideAdverts", thrift.TType.BOOL, 32);
            output.writeBool(this.shouldHideAdverts);
            output.writeFieldEnd();
        }
        if (this.showInRelatedContent != null) {
            output.writeFieldBegin("showInRelatedContent", thrift.TType.BOOL, 33);
            output.writeBool(this.showInRelatedContent);
            output.writeFieldEnd();
        }
        if (this.thumbnail != null) {
            output.writeFieldBegin("thumbnail", thrift.TType.STRING, 34);
            output.writeString(this.thumbnail);
            output.writeFieldEnd();
        }
        if (this.legallySensitive != null) {
            output.writeFieldBegin("legallySensitive", thrift.TType.BOOL, 35);
            output.writeBool(this.legallySensitive);
            output.writeFieldEnd();
        }
        if (this.allowUgc != null) {
            output.writeFieldBegin("allowUgc", thrift.TType.BOOL, 36);
            output.writeBool(this.allowUgc);
            output.writeFieldEnd();
        }
        if (this.sensitive != null) {
            output.writeFieldBegin("sensitive", thrift.TType.BOOL, 37);
            output.writeBool(this.sensitive);
            output.writeFieldEnd();
        }
        if (this.lang != null) {
            output.writeFieldBegin("lang", thrift.TType.STRING, 38);
            output.writeString(this.lang);
            output.writeFieldEnd();
        }
        if (this.internalRevision != null) {
            output.writeFieldBegin("internalRevision", thrift.TType.I32, 39);
            output.writeI32(this.internalRevision);
            output.writeFieldEnd();
        }
        if (this.internalContentCode != null) {
            output.writeFieldBegin("internalContentCode", thrift.TType.I32, 40);
            output.writeI32(this.internalContentCode);
            output.writeFieldEnd();
        }
        if (this.isLive != null) {
            output.writeFieldBegin("isLive", thrift.TType.BOOL, 41);
            output.writeBool(this.isLive);
            output.writeFieldEnd();
        }
        if (this.internalShortId != null) {
            output.writeFieldBegin("internalShortId", thrift.TType.STRING, 42);
            output.writeString(this.internalShortId);
            output.writeFieldEnd();
        }
        if (this.shortSocialShareText != null) {
            output.writeFieldBegin("shortSocialShareText", thrift.TType.STRING, 43);
            output.writeString(this.shortSocialShareText);
            output.writeFieldEnd();
        }
        if (this.socialShareText != null) {
            output.writeFieldBegin("socialShareText", thrift.TType.STRING, 44);
            output.writeString(this.socialShareText);
            output.writeFieldEnd();
        }
        if (this.bodyText != null) {
            output.writeFieldBegin("bodyText", thrift.TType.STRING, 45);
            output.writeString(this.bodyText);
            output.writeFieldEnd();
        }
        if (this.charCount != null) {
            output.writeFieldBegin("charCount", thrift.TType.I32, 46);
            output.writeI32(this.charCount);
            output.writeFieldEnd();
        }
        if (this.internalVideoCode != null) {
            output.writeFieldBegin("internalVideoCode", thrift.TType.STRING, 47);
            output.writeString(this.internalVideoCode);
            output.writeFieldEnd();
        }
        if (this.shouldHideReaderRevenue != null) {
            output.writeFieldBegin("shouldHideReaderRevenue", thrift.TType.BOOL, 48);
            output.writeBool(this.shouldHideReaderRevenue);
            output.writeFieldEnd();
        }
        if (this.internalCommissionedWordcount != null) {
            output.writeFieldBegin("internalCommissionedWordcount", thrift.TType.I32, 49);
            output.writeI32(this.internalCommissionedWordcount);
            output.writeFieldEnd();
        }
        if (this.showAffiliateLinks != null) {
            output.writeFieldBegin("showAffiliateLinks", thrift.TType.BOOL, 50);
            output.writeBool(this.showAffiliateLinks);
            output.writeFieldEnd();
        }
        if (this.bylineHtml != null) {
            output.writeFieldBegin("bylineHtml", thrift.TType.STRING, 51);
            output.writeString(this.bylineHtml);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ContentFields {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_1: string = input.readString();
                        _args.headline = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: string = input.readString();
                        _args.standfirst = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_3: string = input.readString();
                        _args.trailText = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRING) {
                        const value_4: string = input.readString();
                        _args.byline = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.STRING) {
                        const value_5: string = input.readString();
                        _args.main = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.STRING) {
                        const value_6: string = input.readString();
                        _args.body = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.TType.I32) {
                        const value_7: number = input.readI32();
                        _args.newspaperPageNumber = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.TType.I32) {
                        const value_8: number = input.readI32();
                        _args.starRating = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.TType.STRING) {
                        const value_9: string = input.readString();
                        _args.contributorBio = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.TType.I32) {
                        const value_10: MembershipTier.MembershipTier = input.readI32();
                        _args.membershipAccess = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.TType.I32) {
                        const value_11: number = input.readI32();
                        _args.wordcount = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_12: CapiDateTime.CapiDateTime = CapiDateTime.CapiDateTime.read(input);
                        _args.commentCloseDate = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_13: boolean = input.readBool();
                        _args.commentable = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_14: CapiDateTime.CapiDateTime = CapiDateTime.CapiDateTime.read(input);
                        _args.creationDate = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.TType.STRING) {
                        const value_15: string = input.readString();
                        _args.displayHint = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 16:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_16: CapiDateTime.CapiDateTime = CapiDateTime.CapiDateTime.read(input);
                        _args.firstPublicationDate = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 17:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_17: boolean = input.readBool();
                        _args.hasStoryPackage = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 18:
                    if (fieldType === thrift.TType.STRING) {
                        const value_18: string = input.readString();
                        _args.internalComposerCode = value_18;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 19:
                    if (fieldType === thrift.TType.STRING) {
                        const value_19: string = input.readString();
                        _args.internalOctopusCode = value_19;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 20:
                    if (fieldType === thrift.TType.I32) {
                        const value_20: number = input.readI32();
                        _args.internalPageCode = value_20;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 21:
                    if (fieldType === thrift.TType.I32) {
                        const value_21: number = input.readI32();
                        _args.internalStoryPackageCode = value_21;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 22:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_22: boolean = input.readBool();
                        _args.isInappropriateForSponsorship = value_22;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 23:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_23: boolean = input.readBool();
                        _args.isPremoderated = value_23;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 24:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_24: CapiDateTime.CapiDateTime = CapiDateTime.CapiDateTime.read(input);
                        _args.lastModified = value_24;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 25:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_25: boolean = input.readBool();
                        _args.liveBloggingNow = value_25;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 26:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_26: CapiDateTime.CapiDateTime = CapiDateTime.CapiDateTime.read(input);
                        _args.newspaperEditionDate = value_26;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 27:
                    if (fieldType === thrift.TType.I32) {
                        const value_27: Office.Office = input.readI32();
                        _args.productionOffice = value_27;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 28:
                    if (fieldType === thrift.TType.STRING) {
                        const value_28: string = input.readString();
                        _args.publication = value_28;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 29:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_29: CapiDateTime.CapiDateTime = CapiDateTime.CapiDateTime.read(input);
                        _args.scheduledPublicationDate = value_29;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 30:
                    if (fieldType === thrift.TType.STRING) {
                        const value_30: string = input.readString();
                        _args.secureThumbnail = value_30;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 31:
                    if (fieldType === thrift.TType.STRING) {
                        const value_31: string = input.readString();
                        _args.shortUrl = value_31;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 32:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_32: boolean = input.readBool();
                        _args.shouldHideAdverts = value_32;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 33:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_33: boolean = input.readBool();
                        _args.showInRelatedContent = value_33;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 34:
                    if (fieldType === thrift.TType.STRING) {
                        const value_34: string = input.readString();
                        _args.thumbnail = value_34;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 35:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_35: boolean = input.readBool();
                        _args.legallySensitive = value_35;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 36:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_36: boolean = input.readBool();
                        _args.allowUgc = value_36;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 37:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_37: boolean = input.readBool();
                        _args.sensitive = value_37;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 38:
                    if (fieldType === thrift.TType.STRING) {
                        const value_38: string = input.readString();
                        _args.lang = value_38;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 39:
                    if (fieldType === thrift.TType.I32) {
                        const value_39: number = input.readI32();
                        _args.internalRevision = value_39;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 40:
                    if (fieldType === thrift.TType.I32) {
                        const value_40: number = input.readI32();
                        _args.internalContentCode = value_40;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 41:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_41: boolean = input.readBool();
                        _args.isLive = value_41;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 42:
                    if (fieldType === thrift.TType.STRING) {
                        const value_42: string = input.readString();
                        _args.internalShortId = value_42;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 43:
                    if (fieldType === thrift.TType.STRING) {
                        const value_43: string = input.readString();
                        _args.shortSocialShareText = value_43;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 44:
                    if (fieldType === thrift.TType.STRING) {
                        const value_44: string = input.readString();
                        _args.socialShareText = value_44;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 45:
                    if (fieldType === thrift.TType.STRING) {
                        const value_45: string = input.readString();
                        _args.bodyText = value_45;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 46:
                    if (fieldType === thrift.TType.I32) {
                        const value_46: number = input.readI32();
                        _args.charCount = value_46;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 47:
                    if (fieldType === thrift.TType.STRING) {
                        const value_47: string = input.readString();
                        _args.internalVideoCode = value_47;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 48:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_48: boolean = input.readBool();
                        _args.shouldHideReaderRevenue = value_48;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 49:
                    if (fieldType === thrift.TType.I32) {
                        const value_49: number = input.readI32();
                        _args.internalCommissionedWordcount = value_49;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 50:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_50: boolean = input.readBool();
                        _args.showAffiliateLinks = value_50;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 51:
                    if (fieldType === thrift.TType.STRING) {
                        const value_51: string = input.readString();
                        _args.bylineHtml = value_51;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ContentFields(_args);
    }
}
