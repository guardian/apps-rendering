/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
export interface IServes {
    type: string;
    from: number;
    to: number;
    unit?: string;
}
export interface IServesArgs {
    type: string;
    from: number;
    to: number;
    unit?: string;
}
export const ServesCodec: thrift.IStructCodec<IServesArgs, IServes> = {
    encode(args: IServesArgs, output: thrift.TProtocol): void {
        const obj: any = {
            type: args.type,
            from: args.from,
            to: args.to,
            unit: args.unit
        };
        output.writeStructBegin("Serves");
        if (obj.type != null) {
            output.writeFieldBegin("type", thrift.TType.STRING, 1);
            output.writeString(obj.type);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[type] is unset!");
        }
        if (obj.from != null) {
            output.writeFieldBegin("from", thrift.TType.I16, 2);
            output.writeI16(obj.from);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[from] is unset!");
        }
        if (obj.to != null) {
            output.writeFieldBegin("to", thrift.TType.I16, 3);
            output.writeI16(obj.to);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[to] is unset!");
        }
        if (obj.unit != null) {
            output.writeFieldBegin("unit", thrift.TType.STRING, 4);
            output.writeString(obj.unit);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IServes {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_1: string = input.readString();
                        _args.type = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.I16) {
                        const value_2: number = input.readI16();
                        _args.from = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.I16) {
                        const value_3: number = input.readI16();
                        _args.to = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRING) {
                        const value_4: string = input.readString();
                        _args.unit = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.type !== undefined && _args.from !== undefined && _args.to !== undefined) {
            return {
                type: _args.type,
                from: _args.from,
                to: _args.to,
                unit: _args.unit
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read Serves from input");
        }
    }
};
export class Serves extends thrift.StructLike implements IServes {
    public type: string;
    public from: number;
    public to: number;
    public unit?: string;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IServesArgs) {
        super();
        if (args.type != null) {
            const value_5: string = args.type;
            this.type = value_5;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[type] is unset!");
        }
        if (args.from != null) {
            const value_6: number = args.from;
            this.from = value_6;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[from] is unset!");
        }
        if (args.to != null) {
            const value_7: number = args.to;
            this.to = value_7;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[to] is unset!");
        }
        if (args.unit != null) {
            const value_8: string = args.unit;
            this.unit = value_8;
        }
    }
    public static read(input: thrift.TProtocol): Serves {
        return new Serves(ServesCodec.decode(input));
    }
    public static write(args: IServesArgs, output: thrift.TProtocol): void {
        return ServesCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return ServesCodec.encode(this, output);
    }
}
