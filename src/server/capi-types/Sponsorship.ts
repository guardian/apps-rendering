/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as SponsorshipType from "./SponsorshipType";
import * as SponsorshipTargeting from "./SponsorshipTargeting";
import * as SponsorshipLogoDimensions from "./SponsorshipLogoDimensions";
import * as CapiDateTime from "./CapiDateTime";
export interface ISponsorshipArgs {
    sponsorshipType: SponsorshipType.SponsorshipType;
    sponsorName: string;
    sponsorLogo: string;
    sponsorLink: string;
    targeting?: SponsorshipTargeting.SponsorshipTargeting;
    aboutLink?: string;
    sponsorLogoDimensions?: SponsorshipLogoDimensions.SponsorshipLogoDimensions;
    highContrastSponsorLogo?: string;
    highContrastSponsorLogoDimensions?: SponsorshipLogoDimensions.SponsorshipLogoDimensions;
    validFrom?: CapiDateTime.CapiDateTime;
    validTo?: CapiDateTime.CapiDateTime;
}
export class Sponsorship {
    public sponsorshipType: SponsorshipType.SponsorshipType;
    public sponsorName: string;
    public sponsorLogo: string;
    public sponsorLink: string;
    public targeting?: SponsorshipTargeting.SponsorshipTargeting;
    public aboutLink?: string;
    public sponsorLogoDimensions?: SponsorshipLogoDimensions.SponsorshipLogoDimensions;
    public highContrastSponsorLogo?: string;
    public highContrastSponsorLogoDimensions?: SponsorshipLogoDimensions.SponsorshipLogoDimensions;
    public validFrom?: CapiDateTime.CapiDateTime;
    public validTo?: CapiDateTime.CapiDateTime;
    constructor(args: ISponsorshipArgs) {
        if (args != null && args.sponsorshipType != null) {
            this.sponsorshipType = args.sponsorshipType;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[sponsorshipType] is unset!");
        }
        if (args != null && args.sponsorName != null) {
            this.sponsorName = args.sponsorName;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[sponsorName] is unset!");
        }
        if (args != null && args.sponsorLogo != null) {
            this.sponsorLogo = args.sponsorLogo;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[sponsorLogo] is unset!");
        }
        if (args != null && args.sponsorLink != null) {
            this.sponsorLink = args.sponsorLink;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[sponsorLink] is unset!");
        }
        if (args != null && args.targeting != null) {
            this.targeting = args.targeting;
        }
        if (args != null && args.aboutLink != null) {
            this.aboutLink = args.aboutLink;
        }
        if (args != null && args.sponsorLogoDimensions != null) {
            this.sponsorLogoDimensions = args.sponsorLogoDimensions;
        }
        if (args != null && args.highContrastSponsorLogo != null) {
            this.highContrastSponsorLogo = args.highContrastSponsorLogo;
        }
        if (args != null && args.highContrastSponsorLogoDimensions != null) {
            this.highContrastSponsorLogoDimensions = args.highContrastSponsorLogoDimensions;
        }
        if (args != null && args.validFrom != null) {
            this.validFrom = args.validFrom;
        }
        if (args != null && args.validTo != null) {
            this.validTo = args.validTo;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("Sponsorship");
        if (this.sponsorshipType != null) {
            output.writeFieldBegin("sponsorshipType", thrift.TType.I32, 1);
            output.writeI32(this.sponsorshipType);
            output.writeFieldEnd();
        }
        if (this.sponsorName != null) {
            output.writeFieldBegin("sponsorName", thrift.TType.STRING, 2);
            output.writeString(this.sponsorName);
            output.writeFieldEnd();
        }
        if (this.sponsorLogo != null) {
            output.writeFieldBegin("sponsorLogo", thrift.TType.STRING, 3);
            output.writeString(this.sponsorLogo);
            output.writeFieldEnd();
        }
        if (this.sponsorLink != null) {
            output.writeFieldBegin("sponsorLink", thrift.TType.STRING, 4);
            output.writeString(this.sponsorLink);
            output.writeFieldEnd();
        }
        if (this.targeting != null) {
            output.writeFieldBegin("targeting", thrift.TType.STRUCT, 5);
            this.targeting.write(output);
            output.writeFieldEnd();
        }
        if (this.aboutLink != null) {
            output.writeFieldBegin("aboutLink", thrift.TType.STRING, 6);
            output.writeString(this.aboutLink);
            output.writeFieldEnd();
        }
        if (this.sponsorLogoDimensions != null) {
            output.writeFieldBegin("sponsorLogoDimensions", thrift.TType.STRUCT, 7);
            this.sponsorLogoDimensions.write(output);
            output.writeFieldEnd();
        }
        if (this.highContrastSponsorLogo != null) {
            output.writeFieldBegin("highContrastSponsorLogo", thrift.TType.STRING, 8);
            output.writeString(this.highContrastSponsorLogo);
            output.writeFieldEnd();
        }
        if (this.highContrastSponsorLogoDimensions != null) {
            output.writeFieldBegin("highContrastSponsorLogoDimensions", thrift.TType.STRUCT, 9);
            this.highContrastSponsorLogoDimensions.write(output);
            output.writeFieldEnd();
        }
        if (this.validFrom != null) {
            output.writeFieldBegin("validFrom", thrift.TType.STRUCT, 10);
            this.validFrom.write(output);
            output.writeFieldEnd();
        }
        if (this.validTo != null) {
            output.writeFieldBegin("validTo", thrift.TType.STRUCT, 11);
            this.validTo.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): Sponsorship {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.I32) {
                        const value_1: SponsorshipType.SponsorshipType = input.readI32();
                        _args.sponsorshipType = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: string = input.readString();
                        _args.sponsorName = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_3: string = input.readString();
                        _args.sponsorLogo = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRING) {
                        const value_4: string = input.readString();
                        _args.sponsorLink = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_5: SponsorshipTargeting.SponsorshipTargeting = SponsorshipTargeting.SponsorshipTargeting.read(input);
                        _args.targeting = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.STRING) {
                        const value_6: string = input.readString();
                        _args.aboutLink = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_7: SponsorshipLogoDimensions.SponsorshipLogoDimensions = SponsorshipLogoDimensions.SponsorshipLogoDimensions.read(input);
                        _args.sponsorLogoDimensions = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.TType.STRING) {
                        const value_8: string = input.readString();
                        _args.highContrastSponsorLogo = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_9: SponsorshipLogoDimensions.SponsorshipLogoDimensions = SponsorshipLogoDimensions.SponsorshipLogoDimensions.read(input);
                        _args.highContrastSponsorLogoDimensions = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_10: CapiDateTime.CapiDateTime = CapiDateTime.CapiDateTime.read(input);
                        _args.validFrom = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_11: CapiDateTime.CapiDateTime = CapiDateTime.CapiDateTime.read(input);
                        _args.validTo = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.sponsorshipType !== undefined && _args.sponsorName !== undefined && _args.sponsorLogo !== undefined && _args.sponsorLink !== undefined) {
            return new Sponsorship(_args);
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read Sponsorship from input");
        }
    }
}
