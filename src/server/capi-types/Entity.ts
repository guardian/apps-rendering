/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as EntityType from "./EntityType";
import * as Person from "./Person";
import * as Film from "./Film";
import * as Game from "./Game";
import * as Restaurant from "./Restaurant";
import * as Place from "./Place";
import * as Organisation from "./Organisation";
export interface IEntity {
    id: string;
    entityType: EntityType.EntityType;
    googleId?: string;
    person?: Person.IPerson;
    film?: Film.IFilm;
    game?: Game.IGame;
    restaurant?: Restaurant.IRestaurant;
    place?: Place.IPlace;
    organisation?: Organisation.IOrganisation;
}
export interface IEntityArgs {
    id: string;
    entityType: EntityType.EntityType;
    googleId?: string;
    person?: Person.IPersonArgs;
    film?: Film.IFilmArgs;
    game?: Game.IGameArgs;
    restaurant?: Restaurant.IRestaurantArgs;
    place?: Place.IPlaceArgs;
    organisation?: Organisation.IOrganisationArgs;
}
export const EntityCodec: thrift.IStructCodec<IEntityArgs, IEntity> = {
    encode(args: IEntityArgs, output: thrift.TProtocol): void {
        const obj: any = {
            id: args.id,
            entityType: args.entityType,
            googleId: args.googleId,
            person: args.person,
            film: args.film,
            game: args.game,
            restaurant: args.restaurant,
            place: args.place,
            organisation: args.organisation
        };
        output.writeStructBegin("Entity");
        if (obj.id != null) {
            output.writeFieldBegin("id", thrift.TType.STRING, 1);
            output.writeString(obj.id);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[id] is unset!");
        }
        if (obj.entityType != null) {
            output.writeFieldBegin("entityType", thrift.TType.I32, 2);
            output.writeI32(obj.entityType);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[entityType] is unset!");
        }
        if (obj.googleId != null) {
            output.writeFieldBegin("googleId", thrift.TType.STRING, 3);
            output.writeString(obj.googleId);
            output.writeFieldEnd();
        }
        if (obj.person != null) {
            output.writeFieldBegin("person", thrift.TType.STRUCT, 4);
            Person.PersonCodec.encode(obj.person, output);
            output.writeFieldEnd();
        }
        if (obj.film != null) {
            output.writeFieldBegin("film", thrift.TType.STRUCT, 5);
            Film.FilmCodec.encode(obj.film, output);
            output.writeFieldEnd();
        }
        if (obj.game != null) {
            output.writeFieldBegin("game", thrift.TType.STRUCT, 6);
            Game.GameCodec.encode(obj.game, output);
            output.writeFieldEnd();
        }
        if (obj.restaurant != null) {
            output.writeFieldBegin("restaurant", thrift.TType.STRUCT, 7);
            Restaurant.RestaurantCodec.encode(obj.restaurant, output);
            output.writeFieldEnd();
        }
        if (obj.place != null) {
            output.writeFieldBegin("place", thrift.TType.STRUCT, 8);
            Place.PlaceCodec.encode(obj.place, output);
            output.writeFieldEnd();
        }
        if (obj.organisation != null) {
            output.writeFieldBegin("organisation", thrift.TType.STRUCT, 9);
            Organisation.OrganisationCodec.encode(obj.organisation, output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IEntity {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_1: string = input.readString();
                        _args.id = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.I32) {
                        const value_2: EntityType.EntityType = input.readI32();
                        _args.entityType = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_3: string = input.readString();
                        _args.googleId = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_4: Person.IPerson = Person.PersonCodec.decode(input);
                        _args.person = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_5: Film.IFilm = Film.FilmCodec.decode(input);
                        _args.film = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_6: Game.IGame = Game.GameCodec.decode(input);
                        _args.game = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_7: Restaurant.IRestaurant = Restaurant.RestaurantCodec.decode(input);
                        _args.restaurant = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_8: Place.IPlace = Place.PlaceCodec.decode(input);
                        _args.place = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_9: Organisation.IOrganisation = Organisation.OrganisationCodec.decode(input);
                        _args.organisation = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.id !== undefined && _args.entityType !== undefined) {
            return {
                id: _args.id,
                entityType: _args.entityType,
                googleId: _args.googleId,
                person: _args.person,
                film: _args.film,
                game: _args.game,
                restaurant: _args.restaurant,
                place: _args.place,
                organisation: _args.organisation
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read Entity from input");
        }
    }
};
export class Entity extends thrift.StructLike implements IEntity {
    public id: string;
    public entityType: EntityType.EntityType;
    public googleId?: string;
    public person?: Person.IPerson;
    public film?: Film.IFilm;
    public game?: Game.IGame;
    public restaurant?: Restaurant.IRestaurant;
    public place?: Place.IPlace;
    public organisation?: Organisation.IOrganisation;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IEntityArgs) {
        super();
        if (args.id != null) {
            const value_10: string = args.id;
            this.id = value_10;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[id] is unset!");
        }
        if (args.entityType != null) {
            const value_11: EntityType.EntityType = args.entityType;
            this.entityType = value_11;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[entityType] is unset!");
        }
        if (args.googleId != null) {
            const value_12: string = args.googleId;
            this.googleId = value_12;
        }
        if (args.person != null) {
            const value_13: Person.IPerson = new Person.Person(args.person);
            this.person = value_13;
        }
        if (args.film != null) {
            const value_14: Film.IFilm = new Film.Film(args.film);
            this.film = value_14;
        }
        if (args.game != null) {
            const value_15: Game.IGame = new Game.Game(args.game);
            this.game = value_15;
        }
        if (args.restaurant != null) {
            const value_16: Restaurant.IRestaurant = new Restaurant.Restaurant(args.restaurant);
            this.restaurant = value_16;
        }
        if (args.place != null) {
            const value_17: Place.IPlace = new Place.Place(args.place);
            this.place = value_17;
        }
        if (args.organisation != null) {
            const value_18: Organisation.IOrganisation = new Organisation.Organisation(args.organisation);
            this.organisation = value_18;
        }
    }
    public static read(input: thrift.TProtocol): Entity {
        return new Entity(EntityCodec.decode(input));
    }
    public static write(args: IEntityArgs, output: thrift.TProtocol): void {
        return EntityCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return EntityCodec.encode(this, output);
    }
}
