/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as AssetType from "./AssetType";
import * as AssetFields from "./AssetFields";
export interface IAssetArgs {
    type: AssetType.AssetType;
    mimeType?: string;
    file?: string;
    typeData?: AssetFields.AssetFields;
}
export class Asset {
    public type: AssetType.AssetType;
    public mimeType?: string;
    public file?: string;
    public typeData?: AssetFields.AssetFields;
    constructor(args: IAssetArgs) {
        if (args != null && args.type != null) {
            this.type = args.type;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[type] is unset!");
        }
        if (args != null && args.mimeType != null) {
            this.mimeType = args.mimeType;
        }
        if (args != null && args.file != null) {
            this.file = args.file;
        }
        if (args != null && args.typeData != null) {
            this.typeData = args.typeData;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("Asset");
        if (this.type != null) {
            output.writeFieldBegin("type", thrift.TType.I32, 1);
            output.writeI32(this.type);
            output.writeFieldEnd();
        }
        if (this.mimeType != null) {
            output.writeFieldBegin("mimeType", thrift.TType.STRING, 2);
            output.writeString(this.mimeType);
            output.writeFieldEnd();
        }
        if (this.file != null) {
            output.writeFieldBegin("file", thrift.TType.STRING, 3);
            output.writeString(this.file);
            output.writeFieldEnd();
        }
        if (this.typeData != null) {
            output.writeFieldBegin("typeData", thrift.TType.STRUCT, 4);
            this.typeData.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): Asset {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.I32) {
                        const value_1: AssetType.AssetType = input.readI32();
                        _args.type = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: string = input.readString();
                        _args.mimeType = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_3: string = input.readString();
                        _args.file = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_4: AssetFields.AssetFields = AssetFields.AssetFields.read(input);
                        _args.typeData = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.type !== undefined) {
            return new Asset(_args);
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read Asset from input");
        }
    }
}
