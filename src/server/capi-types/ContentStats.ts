/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
export interface IContentStatsArgs {
    videos: number;
    images: number;
    text: number;
    tweets: number;
    pullquotes: number;
    audio: number;
    interactives: number;
    witness: number;
    richlinks: number;
    membership: number;
    embeds: number;
    comments: number;
    instagram: number;
    vines: number;
}
export class ContentStats {
    public videos: number;
    public images: number;
    public text: number;
    public tweets: number;
    public pullquotes: number;
    public audio: number;
    public interactives: number;
    public witness: number;
    public richlinks: number;
    public membership: number;
    public embeds: number;
    public comments: number;
    public instagram: number;
    public vines: number;
    constructor(args: IContentStatsArgs) {
        if (args != null && args.videos != null) {
            this.videos = args.videos;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[videos] is unset!");
        }
        if (args != null && args.images != null) {
            this.images = args.images;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[images] is unset!");
        }
        if (args != null && args.text != null) {
            this.text = args.text;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[text] is unset!");
        }
        if (args != null && args.tweets != null) {
            this.tweets = args.tweets;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[tweets] is unset!");
        }
        if (args != null && args.pullquotes != null) {
            this.pullquotes = args.pullquotes;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[pullquotes] is unset!");
        }
        if (args != null && args.audio != null) {
            this.audio = args.audio;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[audio] is unset!");
        }
        if (args != null && args.interactives != null) {
            this.interactives = args.interactives;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[interactives] is unset!");
        }
        if (args != null && args.witness != null) {
            this.witness = args.witness;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[witness] is unset!");
        }
        if (args != null && args.richlinks != null) {
            this.richlinks = args.richlinks;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[richlinks] is unset!");
        }
        if (args != null && args.membership != null) {
            this.membership = args.membership;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[membership] is unset!");
        }
        if (args != null && args.embeds != null) {
            this.embeds = args.embeds;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[embeds] is unset!");
        }
        if (args != null && args.comments != null) {
            this.comments = args.comments;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[comments] is unset!");
        }
        if (args != null && args.instagram != null) {
            this.instagram = args.instagram;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[instagram] is unset!");
        }
        if (args != null && args.vines != null) {
            this.vines = args.vines;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[vines] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ContentStats");
        if (this.videos != null) {
            output.writeFieldBegin("videos", thrift.TType.I32, 1);
            output.writeI32(this.videos);
            output.writeFieldEnd();
        }
        if (this.images != null) {
            output.writeFieldBegin("images", thrift.TType.I32, 2);
            output.writeI32(this.images);
            output.writeFieldEnd();
        }
        if (this.text != null) {
            output.writeFieldBegin("text", thrift.TType.I32, 3);
            output.writeI32(this.text);
            output.writeFieldEnd();
        }
        if (this.tweets != null) {
            output.writeFieldBegin("tweets", thrift.TType.I32, 4);
            output.writeI32(this.tweets);
            output.writeFieldEnd();
        }
        if (this.pullquotes != null) {
            output.writeFieldBegin("pullquotes", thrift.TType.I32, 5);
            output.writeI32(this.pullquotes);
            output.writeFieldEnd();
        }
        if (this.audio != null) {
            output.writeFieldBegin("audio", thrift.TType.I32, 6);
            output.writeI32(this.audio);
            output.writeFieldEnd();
        }
        if (this.interactives != null) {
            output.writeFieldBegin("interactives", thrift.TType.I32, 7);
            output.writeI32(this.interactives);
            output.writeFieldEnd();
        }
        if (this.witness != null) {
            output.writeFieldBegin("witness", thrift.TType.I32, 8);
            output.writeI32(this.witness);
            output.writeFieldEnd();
        }
        if (this.richlinks != null) {
            output.writeFieldBegin("richlinks", thrift.TType.I32, 9);
            output.writeI32(this.richlinks);
            output.writeFieldEnd();
        }
        if (this.membership != null) {
            output.writeFieldBegin("membership", thrift.TType.I32, 10);
            output.writeI32(this.membership);
            output.writeFieldEnd();
        }
        if (this.embeds != null) {
            output.writeFieldBegin("embeds", thrift.TType.I32, 11);
            output.writeI32(this.embeds);
            output.writeFieldEnd();
        }
        if (this.comments != null) {
            output.writeFieldBegin("comments", thrift.TType.I32, 12);
            output.writeI32(this.comments);
            output.writeFieldEnd();
        }
        if (this.instagram != null) {
            output.writeFieldBegin("instagram", thrift.TType.I32, 13);
            output.writeI32(this.instagram);
            output.writeFieldEnd();
        }
        if (this.vines != null) {
            output.writeFieldBegin("vines", thrift.TType.I32, 14);
            output.writeI32(this.vines);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ContentStats {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.I32) {
                        const value_1: number = input.readI32();
                        _args.videos = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.I32) {
                        const value_2: number = input.readI32();
                        _args.images = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.I32) {
                        const value_3: number = input.readI32();
                        _args.text = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.I32) {
                        const value_4: number = input.readI32();
                        _args.tweets = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.I32) {
                        const value_5: number = input.readI32();
                        _args.pullquotes = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.I32) {
                        const value_6: number = input.readI32();
                        _args.audio = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.TType.I32) {
                        const value_7: number = input.readI32();
                        _args.interactives = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.TType.I32) {
                        const value_8: number = input.readI32();
                        _args.witness = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.TType.I32) {
                        const value_9: number = input.readI32();
                        _args.richlinks = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.TType.I32) {
                        const value_10: number = input.readI32();
                        _args.membership = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.TType.I32) {
                        const value_11: number = input.readI32();
                        _args.embeds = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.TType.I32) {
                        const value_12: number = input.readI32();
                        _args.comments = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.TType.I32) {
                        const value_13: number = input.readI32();
                        _args.instagram = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.TType.I32) {
                        const value_14: number = input.readI32();
                        _args.vines = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.videos !== undefined && _args.images !== undefined && _args.text !== undefined && _args.tweets !== undefined && _args.pullquotes !== undefined && _args.audio !== undefined && _args.interactives !== undefined && _args.witness !== undefined && _args.richlinks !== undefined && _args.membership !== undefined && _args.embeds !== undefined && _args.comments !== undefined && _args.instagram !== undefined && _args.vines !== undefined) {
            return new ContentStats(_args);
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read ContentStats from input");
        }
    }
}
