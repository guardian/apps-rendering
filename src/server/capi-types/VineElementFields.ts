/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
export interface IVineElementFieldsArgs {
    originalUrl: string;
    title: string;
    source: string;
    authorUrl: string;
    authorUsername: string;
    html?: string;
    width?: number;
    height?: number;
    alt?: string;
    caption?: string;
}
export class VineElementFields {
    public originalUrl: string;
    public title: string;
    public source: string;
    public authorUrl: string;
    public authorUsername: string;
    public html?: string;
    public width?: number;
    public height?: number;
    public alt?: string;
    public caption?: string;
    constructor(args: IVineElementFieldsArgs) {
        if (args != null && args.originalUrl != null) {
            this.originalUrl = args.originalUrl;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[originalUrl] is unset!");
        }
        if (args != null && args.title != null) {
            this.title = args.title;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[title] is unset!");
        }
        if (args != null && args.source != null) {
            this.source = args.source;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[source] is unset!");
        }
        if (args != null && args.authorUrl != null) {
            this.authorUrl = args.authorUrl;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[authorUrl] is unset!");
        }
        if (args != null && args.authorUsername != null) {
            this.authorUsername = args.authorUsername;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[authorUsername] is unset!");
        }
        if (args != null && args.html != null) {
            this.html = args.html;
        }
        if (args != null && args.width != null) {
            this.width = args.width;
        }
        if (args != null && args.height != null) {
            this.height = args.height;
        }
        if (args != null && args.alt != null) {
            this.alt = args.alt;
        }
        if (args != null && args.caption != null) {
            this.caption = args.caption;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("VineElementFields");
        if (this.originalUrl != null) {
            output.writeFieldBegin("originalUrl", thrift.TType.STRING, 1);
            output.writeString(this.originalUrl);
            output.writeFieldEnd();
        }
        if (this.title != null) {
            output.writeFieldBegin("title", thrift.TType.STRING, 2);
            output.writeString(this.title);
            output.writeFieldEnd();
        }
        if (this.source != null) {
            output.writeFieldBegin("source", thrift.TType.STRING, 3);
            output.writeString(this.source);
            output.writeFieldEnd();
        }
        if (this.authorUrl != null) {
            output.writeFieldBegin("authorUrl", thrift.TType.STRING, 4);
            output.writeString(this.authorUrl);
            output.writeFieldEnd();
        }
        if (this.authorUsername != null) {
            output.writeFieldBegin("authorUsername", thrift.TType.STRING, 5);
            output.writeString(this.authorUsername);
            output.writeFieldEnd();
        }
        if (this.html != null) {
            output.writeFieldBegin("html", thrift.TType.STRING, 6);
            output.writeString(this.html);
            output.writeFieldEnd();
        }
        if (this.width != null) {
            output.writeFieldBegin("width", thrift.TType.I32, 7);
            output.writeI32(this.width);
            output.writeFieldEnd();
        }
        if (this.height != null) {
            output.writeFieldBegin("height", thrift.TType.I32, 8);
            output.writeI32(this.height);
            output.writeFieldEnd();
        }
        if (this.alt != null) {
            output.writeFieldBegin("alt", thrift.TType.STRING, 9);
            output.writeString(this.alt);
            output.writeFieldEnd();
        }
        if (this.caption != null) {
            output.writeFieldBegin("caption", thrift.TType.STRING, 10);
            output.writeString(this.caption);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): VineElementFields {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_1: string = input.readString();
                        _args.originalUrl = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: string = input.readString();
                        _args.title = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_3: string = input.readString();
                        _args.source = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRING) {
                        const value_4: string = input.readString();
                        _args.authorUrl = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.STRING) {
                        const value_5: string = input.readString();
                        _args.authorUsername = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.STRING) {
                        const value_6: string = input.readString();
                        _args.html = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.TType.I32) {
                        const value_7: number = input.readI32();
                        _args.width = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.TType.I32) {
                        const value_8: number = input.readI32();
                        _args.height = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.TType.STRING) {
                        const value_9: string = input.readString();
                        _args.alt = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.TType.STRING) {
                        const value_10: string = input.readString();
                        _args.caption = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.originalUrl !== undefined && _args.title !== undefined && _args.source !== undefined && _args.authorUrl !== undefined && _args.authorUsername !== undefined) {
            return new VineElementFields(_args);
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read VineElementFields from input");
        }
    }
}
