/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
export interface IImageElementFieldsArgs {
    caption?: string;
    copyright?: string;
    displayCredit?: boolean;
    credit?: string;
    source?: string;
    photographer?: string;
    alt?: string;
    mediaId?: string;
    mediaApiUri?: string;
    picdarUrn?: string;
    suppliersReference?: string;
    imageType?: string;
    comment?: string;
    role?: string;
}
export class ImageElementFields {
    public caption?: string;
    public copyright?: string;
    public displayCredit?: boolean;
    public credit?: string;
    public source?: string;
    public photographer?: string;
    public alt?: string;
    public mediaId?: string;
    public mediaApiUri?: string;
    public picdarUrn?: string;
    public suppliersReference?: string;
    public imageType?: string;
    public comment?: string;
    public role?: string;
    constructor(args?: IImageElementFieldsArgs) {
        if (args != null && args.caption != null) {
            this.caption = args.caption;
        }
        if (args != null && args.copyright != null) {
            this.copyright = args.copyright;
        }
        if (args != null && args.displayCredit != null) {
            this.displayCredit = args.displayCredit;
        }
        if (args != null && args.credit != null) {
            this.credit = args.credit;
        }
        if (args != null && args.source != null) {
            this.source = args.source;
        }
        if (args != null && args.photographer != null) {
            this.photographer = args.photographer;
        }
        if (args != null && args.alt != null) {
            this.alt = args.alt;
        }
        if (args != null && args.mediaId != null) {
            this.mediaId = args.mediaId;
        }
        if (args != null && args.mediaApiUri != null) {
            this.mediaApiUri = args.mediaApiUri;
        }
        if (args != null && args.picdarUrn != null) {
            this.picdarUrn = args.picdarUrn;
        }
        if (args != null && args.suppliersReference != null) {
            this.suppliersReference = args.suppliersReference;
        }
        if (args != null && args.imageType != null) {
            this.imageType = args.imageType;
        }
        if (args != null && args.comment != null) {
            this.comment = args.comment;
        }
        if (args != null && args.role != null) {
            this.role = args.role;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ImageElementFields");
        if (this.caption != null) {
            output.writeFieldBegin("caption", thrift.TType.STRING, 1);
            output.writeString(this.caption);
            output.writeFieldEnd();
        }
        if (this.copyright != null) {
            output.writeFieldBegin("copyright", thrift.TType.STRING, 2);
            output.writeString(this.copyright);
            output.writeFieldEnd();
        }
        if (this.displayCredit != null) {
            output.writeFieldBegin("displayCredit", thrift.TType.BOOL, 3);
            output.writeBool(this.displayCredit);
            output.writeFieldEnd();
        }
        if (this.credit != null) {
            output.writeFieldBegin("credit", thrift.TType.STRING, 4);
            output.writeString(this.credit);
            output.writeFieldEnd();
        }
        if (this.source != null) {
            output.writeFieldBegin("source", thrift.TType.STRING, 5);
            output.writeString(this.source);
            output.writeFieldEnd();
        }
        if (this.photographer != null) {
            output.writeFieldBegin("photographer", thrift.TType.STRING, 6);
            output.writeString(this.photographer);
            output.writeFieldEnd();
        }
        if (this.alt != null) {
            output.writeFieldBegin("alt", thrift.TType.STRING, 7);
            output.writeString(this.alt);
            output.writeFieldEnd();
        }
        if (this.mediaId != null) {
            output.writeFieldBegin("mediaId", thrift.TType.STRING, 8);
            output.writeString(this.mediaId);
            output.writeFieldEnd();
        }
        if (this.mediaApiUri != null) {
            output.writeFieldBegin("mediaApiUri", thrift.TType.STRING, 9);
            output.writeString(this.mediaApiUri);
            output.writeFieldEnd();
        }
        if (this.picdarUrn != null) {
            output.writeFieldBegin("picdarUrn", thrift.TType.STRING, 10);
            output.writeString(this.picdarUrn);
            output.writeFieldEnd();
        }
        if (this.suppliersReference != null) {
            output.writeFieldBegin("suppliersReference", thrift.TType.STRING, 11);
            output.writeString(this.suppliersReference);
            output.writeFieldEnd();
        }
        if (this.imageType != null) {
            output.writeFieldBegin("imageType", thrift.TType.STRING, 12);
            output.writeString(this.imageType);
            output.writeFieldEnd();
        }
        if (this.comment != null) {
            output.writeFieldBegin("comment", thrift.TType.STRING, 13);
            output.writeString(this.comment);
            output.writeFieldEnd();
        }
        if (this.role != null) {
            output.writeFieldBegin("role", thrift.TType.STRING, 14);
            output.writeString(this.role);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ImageElementFields {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_1: string = input.readString();
                        _args.caption = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: string = input.readString();
                        _args.copyright = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_3: boolean = input.readBool();
                        _args.displayCredit = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRING) {
                        const value_4: string = input.readString();
                        _args.credit = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.STRING) {
                        const value_5: string = input.readString();
                        _args.source = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.STRING) {
                        const value_6: string = input.readString();
                        _args.photographer = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.TType.STRING) {
                        const value_7: string = input.readString();
                        _args.alt = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.TType.STRING) {
                        const value_8: string = input.readString();
                        _args.mediaId = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.TType.STRING) {
                        const value_9: string = input.readString();
                        _args.mediaApiUri = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.TType.STRING) {
                        const value_10: string = input.readString();
                        _args.picdarUrn = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.TType.STRING) {
                        const value_11: string = input.readString();
                        _args.suppliersReference = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.TType.STRING) {
                        const value_12: string = input.readString();
                        _args.imageType = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.TType.STRING) {
                        const value_13: string = input.readString();
                        _args.comment = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.TType.STRING) {
                        const value_14: string = input.readString();
                        _args.role = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ImageElementFields(_args);
    }
}
