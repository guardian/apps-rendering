/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
export interface IVideoElementFields {
    url?: string;
    description?: string;
    title?: string;
    html?: string;
    source?: string;
    credit?: string;
    caption?: string;
    height?: number;
    width?: number;
    duration?: number;
    contentAuthSystem?: string;
    embeddable?: string;
    isInappropriateForAdverts?: boolean;
    mediaId?: string;
    stillImageUrl?: string;
    thumbnailUrl?: string;
    shortUrl?: string;
    role?: string;
    originalUrl?: string;
}
export interface IVideoElementFieldsArgs {
    url?: string;
    description?: string;
    title?: string;
    html?: string;
    source?: string;
    credit?: string;
    caption?: string;
    height?: number;
    width?: number;
    duration?: number;
    contentAuthSystem?: string;
    embeddable?: string;
    isInappropriateForAdverts?: boolean;
    mediaId?: string;
    stillImageUrl?: string;
    thumbnailUrl?: string;
    shortUrl?: string;
    role?: string;
    originalUrl?: string;
}
export const VideoElementFieldsCodec: thrift.IStructCodec<IVideoElementFieldsArgs, IVideoElementFields> = {
    encode(args: IVideoElementFieldsArgs, output: thrift.TProtocol): void {
        const obj: any = {
            url: args.url,
            description: args.description,
            title: args.title,
            html: args.html,
            source: args.source,
            credit: args.credit,
            caption: args.caption,
            height: args.height,
            width: args.width,
            duration: args.duration,
            contentAuthSystem: args.contentAuthSystem,
            embeddable: args.embeddable,
            isInappropriateForAdverts: args.isInappropriateForAdverts,
            mediaId: args.mediaId,
            stillImageUrl: args.stillImageUrl,
            thumbnailUrl: args.thumbnailUrl,
            shortUrl: args.shortUrl,
            role: args.role,
            originalUrl: args.originalUrl
        };
        output.writeStructBegin("VideoElementFields");
        if (obj.url != null) {
            output.writeFieldBegin("url", thrift.TType.STRING, 1);
            output.writeString(obj.url);
            output.writeFieldEnd();
        }
        if (obj.description != null) {
            output.writeFieldBegin("description", thrift.TType.STRING, 2);
            output.writeString(obj.description);
            output.writeFieldEnd();
        }
        if (obj.title != null) {
            output.writeFieldBegin("title", thrift.TType.STRING, 3);
            output.writeString(obj.title);
            output.writeFieldEnd();
        }
        if (obj.html != null) {
            output.writeFieldBegin("html", thrift.TType.STRING, 4);
            output.writeString(obj.html);
            output.writeFieldEnd();
        }
        if (obj.source != null) {
            output.writeFieldBegin("source", thrift.TType.STRING, 5);
            output.writeString(obj.source);
            output.writeFieldEnd();
        }
        if (obj.credit != null) {
            output.writeFieldBegin("credit", thrift.TType.STRING, 6);
            output.writeString(obj.credit);
            output.writeFieldEnd();
        }
        if (obj.caption != null) {
            output.writeFieldBegin("caption", thrift.TType.STRING, 7);
            output.writeString(obj.caption);
            output.writeFieldEnd();
        }
        if (obj.height != null) {
            output.writeFieldBegin("height", thrift.TType.I32, 8);
            output.writeI32(obj.height);
            output.writeFieldEnd();
        }
        if (obj.width != null) {
            output.writeFieldBegin("width", thrift.TType.I32, 9);
            output.writeI32(obj.width);
            output.writeFieldEnd();
        }
        if (obj.duration != null) {
            output.writeFieldBegin("duration", thrift.TType.I32, 10);
            output.writeI32(obj.duration);
            output.writeFieldEnd();
        }
        if (obj.contentAuthSystem != null) {
            output.writeFieldBegin("contentAuthSystem", thrift.TType.STRING, 11);
            output.writeString(obj.contentAuthSystem);
            output.writeFieldEnd();
        }
        if (obj.embeddable != null) {
            output.writeFieldBegin("embeddable", thrift.TType.STRING, 12);
            output.writeString(obj.embeddable);
            output.writeFieldEnd();
        }
        if (obj.isInappropriateForAdverts != null) {
            output.writeFieldBegin("isInappropriateForAdverts", thrift.TType.BOOL, 13);
            output.writeBool(obj.isInappropriateForAdverts);
            output.writeFieldEnd();
        }
        if (obj.mediaId != null) {
            output.writeFieldBegin("mediaId", thrift.TType.STRING, 14);
            output.writeString(obj.mediaId);
            output.writeFieldEnd();
        }
        if (obj.stillImageUrl != null) {
            output.writeFieldBegin("stillImageUrl", thrift.TType.STRING, 15);
            output.writeString(obj.stillImageUrl);
            output.writeFieldEnd();
        }
        if (obj.thumbnailUrl != null) {
            output.writeFieldBegin("thumbnailUrl", thrift.TType.STRING, 16);
            output.writeString(obj.thumbnailUrl);
            output.writeFieldEnd();
        }
        if (obj.shortUrl != null) {
            output.writeFieldBegin("shortUrl", thrift.TType.STRING, 17);
            output.writeString(obj.shortUrl);
            output.writeFieldEnd();
        }
        if (obj.role != null) {
            output.writeFieldBegin("role", thrift.TType.STRING, 18);
            output.writeString(obj.role);
            output.writeFieldEnd();
        }
        if (obj.originalUrl != null) {
            output.writeFieldBegin("originalUrl", thrift.TType.STRING, 19);
            output.writeString(obj.originalUrl);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IVideoElementFields {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_1: string = input.readString();
                        _args.url = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: string = input.readString();
                        _args.description = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_3: string = input.readString();
                        _args.title = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRING) {
                        const value_4: string = input.readString();
                        _args.html = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.STRING) {
                        const value_5: string = input.readString();
                        _args.source = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.STRING) {
                        const value_6: string = input.readString();
                        _args.credit = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.TType.STRING) {
                        const value_7: string = input.readString();
                        _args.caption = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.TType.I32) {
                        const value_8: number = input.readI32();
                        _args.height = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.TType.I32) {
                        const value_9: number = input.readI32();
                        _args.width = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.TType.I32) {
                        const value_10: number = input.readI32();
                        _args.duration = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.TType.STRING) {
                        const value_11: string = input.readString();
                        _args.contentAuthSystem = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.TType.STRING) {
                        const value_12: string = input.readString();
                        _args.embeddable = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_13: boolean = input.readBool();
                        _args.isInappropriateForAdverts = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.TType.STRING) {
                        const value_14: string = input.readString();
                        _args.mediaId = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.TType.STRING) {
                        const value_15: string = input.readString();
                        _args.stillImageUrl = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 16:
                    if (fieldType === thrift.TType.STRING) {
                        const value_16: string = input.readString();
                        _args.thumbnailUrl = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 17:
                    if (fieldType === thrift.TType.STRING) {
                        const value_17: string = input.readString();
                        _args.shortUrl = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 18:
                    if (fieldType === thrift.TType.STRING) {
                        const value_18: string = input.readString();
                        _args.role = value_18;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 19:
                    if (fieldType === thrift.TType.STRING) {
                        const value_19: string = input.readString();
                        _args.originalUrl = value_19;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            url: _args.url,
            description: _args.description,
            title: _args.title,
            html: _args.html,
            source: _args.source,
            credit: _args.credit,
            caption: _args.caption,
            height: _args.height,
            width: _args.width,
            duration: _args.duration,
            contentAuthSystem: _args.contentAuthSystem,
            embeddable: _args.embeddable,
            isInappropriateForAdverts: _args.isInappropriateForAdverts,
            mediaId: _args.mediaId,
            stillImageUrl: _args.stillImageUrl,
            thumbnailUrl: _args.thumbnailUrl,
            shortUrl: _args.shortUrl,
            role: _args.role,
            originalUrl: _args.originalUrl
        };
    }
};
export class VideoElementFields extends thrift.StructLike implements IVideoElementFields {
    public url?: string;
    public description?: string;
    public title?: string;
    public html?: string;
    public source?: string;
    public credit?: string;
    public caption?: string;
    public height?: number;
    public width?: number;
    public duration?: number;
    public contentAuthSystem?: string;
    public embeddable?: string;
    public isInappropriateForAdverts?: boolean;
    public mediaId?: string;
    public stillImageUrl?: string;
    public thumbnailUrl?: string;
    public shortUrl?: string;
    public role?: string;
    public originalUrl?: string;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IVideoElementFieldsArgs = {}) {
        super();
        if (args.url != null) {
            const value_20: string = args.url;
            this.url = value_20;
        }
        if (args.description != null) {
            const value_21: string = args.description;
            this.description = value_21;
        }
        if (args.title != null) {
            const value_22: string = args.title;
            this.title = value_22;
        }
        if (args.html != null) {
            const value_23: string = args.html;
            this.html = value_23;
        }
        if (args.source != null) {
            const value_24: string = args.source;
            this.source = value_24;
        }
        if (args.credit != null) {
            const value_25: string = args.credit;
            this.credit = value_25;
        }
        if (args.caption != null) {
            const value_26: string = args.caption;
            this.caption = value_26;
        }
        if (args.height != null) {
            const value_27: number = args.height;
            this.height = value_27;
        }
        if (args.width != null) {
            const value_28: number = args.width;
            this.width = value_28;
        }
        if (args.duration != null) {
            const value_29: number = args.duration;
            this.duration = value_29;
        }
        if (args.contentAuthSystem != null) {
            const value_30: string = args.contentAuthSystem;
            this.contentAuthSystem = value_30;
        }
        if (args.embeddable != null) {
            const value_31: string = args.embeddable;
            this.embeddable = value_31;
        }
        if (args.isInappropriateForAdverts != null) {
            const value_32: boolean = args.isInappropriateForAdverts;
            this.isInappropriateForAdverts = value_32;
        }
        if (args.mediaId != null) {
            const value_33: string = args.mediaId;
            this.mediaId = value_33;
        }
        if (args.stillImageUrl != null) {
            const value_34: string = args.stillImageUrl;
            this.stillImageUrl = value_34;
        }
        if (args.thumbnailUrl != null) {
            const value_35: string = args.thumbnailUrl;
            this.thumbnailUrl = value_35;
        }
        if (args.shortUrl != null) {
            const value_36: string = args.shortUrl;
            this.shortUrl = value_36;
        }
        if (args.role != null) {
            const value_37: string = args.role;
            this.role = value_37;
        }
        if (args.originalUrl != null) {
            const value_38: string = args.originalUrl;
            this.originalUrl = value_38;
        }
    }
    public static read(input: thrift.TProtocol): VideoElementFields {
        return new VideoElementFields(VideoElementFieldsCodec.decode(input));
    }
    public static write(args: IVideoElementFieldsArgs, output: thrift.TProtocol): void {
        return VideoElementFieldsCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return VideoElementFieldsCodec.encode(this, output);
    }
}
