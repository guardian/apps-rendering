/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as CapiDateTime from "./CapiDateTime";
export interface IMembershipElementFields {
    originalUrl?: string;
    linkText?: string;
    linkPrefix?: string;
    title?: string;
    venue?: string;
    location?: string;
    identifier?: string;
    image?: string;
    price?: string;
    start?: CapiDateTime.ICapiDateTime;
    end?: CapiDateTime.ICapiDateTime;
}
export interface IMembershipElementFieldsArgs {
    originalUrl?: string;
    linkText?: string;
    linkPrefix?: string;
    title?: string;
    venue?: string;
    location?: string;
    identifier?: string;
    image?: string;
    price?: string;
    start?: CapiDateTime.ICapiDateTimeArgs;
    end?: CapiDateTime.ICapiDateTimeArgs;
}
export const MembershipElementFieldsCodec: thrift.IStructCodec<IMembershipElementFieldsArgs, IMembershipElementFields> = {
    encode(args: IMembershipElementFieldsArgs, output: thrift.TProtocol): void {
        const obj: any = {
            originalUrl: args.originalUrl,
            linkText: args.linkText,
            linkPrefix: args.linkPrefix,
            title: args.title,
            venue: args.venue,
            location: args.location,
            identifier: args.identifier,
            image: args.image,
            price: args.price,
            start: args.start,
            end: args.end
        };
        output.writeStructBegin("MembershipElementFields");
        if (obj.originalUrl != null) {
            output.writeFieldBegin("originalUrl", thrift.TType.STRING, 1);
            output.writeString(obj.originalUrl);
            output.writeFieldEnd();
        }
        if (obj.linkText != null) {
            output.writeFieldBegin("linkText", thrift.TType.STRING, 2);
            output.writeString(obj.linkText);
            output.writeFieldEnd();
        }
        if (obj.linkPrefix != null) {
            output.writeFieldBegin("linkPrefix", thrift.TType.STRING, 3);
            output.writeString(obj.linkPrefix);
            output.writeFieldEnd();
        }
        if (obj.title != null) {
            output.writeFieldBegin("title", thrift.TType.STRING, 4);
            output.writeString(obj.title);
            output.writeFieldEnd();
        }
        if (obj.venue != null) {
            output.writeFieldBegin("venue", thrift.TType.STRING, 5);
            output.writeString(obj.venue);
            output.writeFieldEnd();
        }
        if (obj.location != null) {
            output.writeFieldBegin("location", thrift.TType.STRING, 6);
            output.writeString(obj.location);
            output.writeFieldEnd();
        }
        if (obj.identifier != null) {
            output.writeFieldBegin("identifier", thrift.TType.STRING, 7);
            output.writeString(obj.identifier);
            output.writeFieldEnd();
        }
        if (obj.image != null) {
            output.writeFieldBegin("image", thrift.TType.STRING, 8);
            output.writeString(obj.image);
            output.writeFieldEnd();
        }
        if (obj.price != null) {
            output.writeFieldBegin("price", thrift.TType.STRING, 9);
            output.writeString(obj.price);
            output.writeFieldEnd();
        }
        if (obj.start != null) {
            output.writeFieldBegin("start", thrift.TType.STRUCT, 10);
            CapiDateTime.CapiDateTimeCodec.encode(obj.start, output);
            output.writeFieldEnd();
        }
        if (obj.end != null) {
            output.writeFieldBegin("end", thrift.TType.STRUCT, 11);
            CapiDateTime.CapiDateTimeCodec.encode(obj.end, output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IMembershipElementFields {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_1: string = input.readString();
                        _args.originalUrl = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: string = input.readString();
                        _args.linkText = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_3: string = input.readString();
                        _args.linkPrefix = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRING) {
                        const value_4: string = input.readString();
                        _args.title = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.STRING) {
                        const value_5: string = input.readString();
                        _args.venue = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.STRING) {
                        const value_6: string = input.readString();
                        _args.location = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.TType.STRING) {
                        const value_7: string = input.readString();
                        _args.identifier = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.TType.STRING) {
                        const value_8: string = input.readString();
                        _args.image = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.TType.STRING) {
                        const value_9: string = input.readString();
                        _args.price = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_10: CapiDateTime.ICapiDateTime = CapiDateTime.CapiDateTimeCodec.decode(input);
                        _args.start = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_11: CapiDateTime.ICapiDateTime = CapiDateTime.CapiDateTimeCodec.decode(input);
                        _args.end = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            originalUrl: _args.originalUrl,
            linkText: _args.linkText,
            linkPrefix: _args.linkPrefix,
            title: _args.title,
            venue: _args.venue,
            location: _args.location,
            identifier: _args.identifier,
            image: _args.image,
            price: _args.price,
            start: _args.start,
            end: _args.end
        };
    }
};
export class MembershipElementFields extends thrift.StructLike implements IMembershipElementFields {
    public originalUrl?: string;
    public linkText?: string;
    public linkPrefix?: string;
    public title?: string;
    public venue?: string;
    public location?: string;
    public identifier?: string;
    public image?: string;
    public price?: string;
    public start?: CapiDateTime.ICapiDateTime;
    public end?: CapiDateTime.ICapiDateTime;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IMembershipElementFieldsArgs = {}) {
        super();
        if (args.originalUrl != null) {
            const value_12: string = args.originalUrl;
            this.originalUrl = value_12;
        }
        if (args.linkText != null) {
            const value_13: string = args.linkText;
            this.linkText = value_13;
        }
        if (args.linkPrefix != null) {
            const value_14: string = args.linkPrefix;
            this.linkPrefix = value_14;
        }
        if (args.title != null) {
            const value_15: string = args.title;
            this.title = value_15;
        }
        if (args.venue != null) {
            const value_16: string = args.venue;
            this.venue = value_16;
        }
        if (args.location != null) {
            const value_17: string = args.location;
            this.location = value_17;
        }
        if (args.identifier != null) {
            const value_18: string = args.identifier;
            this.identifier = value_18;
        }
        if (args.image != null) {
            const value_19: string = args.image;
            this.image = value_19;
        }
        if (args.price != null) {
            const value_20: string = args.price;
            this.price = value_20;
        }
        if (args.start != null) {
            const value_21: CapiDateTime.ICapiDateTime = new CapiDateTime.CapiDateTime(args.start);
            this.start = value_21;
        }
        if (args.end != null) {
            const value_22: CapiDateTime.ICapiDateTime = new CapiDateTime.CapiDateTime(args.end);
            this.end = value_22;
        }
    }
    public static read(input: thrift.TProtocol): MembershipElementFields {
        return new MembershipElementFields(MembershipElementFieldsCodec.decode(input));
    }
    public static write(args: IMembershipElementFieldsArgs, output: thrift.TProtocol): void {
        return MembershipElementFieldsCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return MembershipElementFieldsCodec.encode(this, output);
    }
}
