/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as MembershipPlaceholder from "./MembershipPlaceholder";
export interface IBlockAttributes {
    keyEvent?: boolean;
    summary?: boolean;
    title?: string;
    pinned?: boolean;
    membershipPlaceholder?: MembershipPlaceholder.IMembershipPlaceholder;
}
export interface IBlockAttributesArgs {
    keyEvent?: boolean;
    summary?: boolean;
    title?: string;
    pinned?: boolean;
    membershipPlaceholder?: MembershipPlaceholder.IMembershipPlaceholderArgs;
}
export const BlockAttributesCodec: thrift.IStructCodec<IBlockAttributesArgs, IBlockAttributes> = {
    encode(args: IBlockAttributesArgs, output: thrift.TProtocol): void {
        const obj: any = {
            keyEvent: args.keyEvent,
            summary: args.summary,
            title: args.title,
            pinned: args.pinned,
            membershipPlaceholder: args.membershipPlaceholder
        };
        output.writeStructBegin("BlockAttributes");
        if (obj.keyEvent != null) {
            output.writeFieldBegin("keyEvent", thrift.TType.BOOL, 1);
            output.writeBool(obj.keyEvent);
            output.writeFieldEnd();
        }
        if (obj.summary != null) {
            output.writeFieldBegin("summary", thrift.TType.BOOL, 2);
            output.writeBool(obj.summary);
            output.writeFieldEnd();
        }
        if (obj.title != null) {
            output.writeFieldBegin("title", thrift.TType.STRING, 3);
            output.writeString(obj.title);
            output.writeFieldEnd();
        }
        if (obj.pinned != null) {
            output.writeFieldBegin("pinned", thrift.TType.BOOL, 4);
            output.writeBool(obj.pinned);
            output.writeFieldEnd();
        }
        if (obj.membershipPlaceholder != null) {
            output.writeFieldBegin("membershipPlaceholder", thrift.TType.STRUCT, 5);
            MembershipPlaceholder.MembershipPlaceholderCodec.encode(obj.membershipPlaceholder, output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IBlockAttributes {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_1: boolean = input.readBool();
                        _args.keyEvent = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_2: boolean = input.readBool();
                        _args.summary = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_3: string = input.readString();
                        _args.title = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_4: boolean = input.readBool();
                        _args.pinned = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_5: MembershipPlaceholder.IMembershipPlaceholder = MembershipPlaceholder.MembershipPlaceholderCodec.decode(input);
                        _args.membershipPlaceholder = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            keyEvent: _args.keyEvent,
            summary: _args.summary,
            title: _args.title,
            pinned: _args.pinned,
            membershipPlaceholder: _args.membershipPlaceholder
        };
    }
};
export class BlockAttributes extends thrift.StructLike implements IBlockAttributes {
    public keyEvent?: boolean;
    public summary?: boolean;
    public title?: string;
    public pinned?: boolean;
    public membershipPlaceholder?: MembershipPlaceholder.IMembershipPlaceholder;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IBlockAttributesArgs = {}) {
        super();
        if (args.keyEvent != null) {
            const value_6: boolean = args.keyEvent;
            this.keyEvent = value_6;
        }
        if (args.summary != null) {
            const value_7: boolean = args.summary;
            this.summary = value_7;
        }
        if (args.title != null) {
            const value_8: string = args.title;
            this.title = value_8;
        }
        if (args.pinned != null) {
            const value_9: boolean = args.pinned;
            this.pinned = value_9;
        }
        if (args.membershipPlaceholder != null) {
            const value_10: MembershipPlaceholder.IMembershipPlaceholder = new MembershipPlaceholder.MembershipPlaceholder(args.membershipPlaceholder);
            this.membershipPlaceholder = value_10;
        }
    }
    public static read(input: thrift.TProtocol): BlockAttributes {
        return new BlockAttributes(BlockAttributesCodec.decode(input));
    }
    public static write(args: IBlockAttributesArgs, output: thrift.TProtocol): void {
        return BlockAttributesCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return BlockAttributesCodec.encode(this, output);
    }
}
