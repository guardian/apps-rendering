/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as MembershipPlaceholder from "./MembershipPlaceholder";
export interface IBlockAttributesArgs {
    keyEvent?: boolean;
    summary?: boolean;
    title?: string;
    pinned?: boolean;
    membershipPlaceholder?: MembershipPlaceholder.MembershipPlaceholder;
}
export class BlockAttributes {
    public keyEvent?: boolean;
    public summary?: boolean;
    public title?: string;
    public pinned?: boolean;
    public membershipPlaceholder?: MembershipPlaceholder.MembershipPlaceholder;
    constructor(args?: IBlockAttributesArgs) {
        if (args != null && args.keyEvent != null) {
            this.keyEvent = args.keyEvent;
        }
        if (args != null && args.summary != null) {
            this.summary = args.summary;
        }
        if (args != null && args.title != null) {
            this.title = args.title;
        }
        if (args != null && args.pinned != null) {
            this.pinned = args.pinned;
        }
        if (args != null && args.membershipPlaceholder != null) {
            this.membershipPlaceholder = args.membershipPlaceholder;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("BlockAttributes");
        if (this.keyEvent != null) {
            output.writeFieldBegin("keyEvent", thrift.TType.BOOL, 1);
            output.writeBool(this.keyEvent);
            output.writeFieldEnd();
        }
        if (this.summary != null) {
            output.writeFieldBegin("summary", thrift.TType.BOOL, 2);
            output.writeBool(this.summary);
            output.writeFieldEnd();
        }
        if (this.title != null) {
            output.writeFieldBegin("title", thrift.TType.STRING, 3);
            output.writeString(this.title);
            output.writeFieldEnd();
        }
        if (this.pinned != null) {
            output.writeFieldBegin("pinned", thrift.TType.BOOL, 4);
            output.writeBool(this.pinned);
            output.writeFieldEnd();
        }
        if (this.membershipPlaceholder != null) {
            output.writeFieldBegin("membershipPlaceholder", thrift.TType.STRUCT, 5);
            this.membershipPlaceholder.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): BlockAttributes {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_1: boolean = input.readBool();
                        _args.keyEvent = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_2: boolean = input.readBool();
                        _args.summary = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_3: string = input.readString();
                        _args.title = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_4: boolean = input.readBool();
                        _args.pinned = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_5: MembershipPlaceholder.MembershipPlaceholder = MembershipPlaceholder.MembershipPlaceholder.read(input);
                        _args.membershipPlaceholder = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new BlockAttributes(_args);
    }
}
