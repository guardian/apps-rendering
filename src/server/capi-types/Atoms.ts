/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as Atom from "./Atom";
export interface IAtoms {
    quizzes?: Array<Atom.IAtom>;
    viewpoints?: Array<Atom.IAtom>;
    media?: Array<Atom.IAtom>;
    explainers?: Array<Atom.IAtom>;
    cta?: Array<Atom.IAtom>;
    interactives?: Array<Atom.IAtom>;
    reviews?: Array<Atom.IAtom>;
    recipes?: Array<Atom.IAtom>;
    qandas?: Array<Atom.IAtom>;
    guides?: Array<Atom.IAtom>;
    profiles?: Array<Atom.IAtom>;
    timelines?: Array<Atom.IAtom>;
    commonsdivisions?: Array<Atom.IAtom>;
    charts?: Array<Atom.IAtom>;
    audios?: Array<Atom.IAtom>;
}
export interface IAtomsArgs {
    quizzes?: Array<Atom.IAtomArgs>;
    viewpoints?: Array<Atom.IAtomArgs>;
    media?: Array<Atom.IAtomArgs>;
    explainers?: Array<Atom.IAtomArgs>;
    cta?: Array<Atom.IAtomArgs>;
    interactives?: Array<Atom.IAtomArgs>;
    reviews?: Array<Atom.IAtomArgs>;
    recipes?: Array<Atom.IAtomArgs>;
    qandas?: Array<Atom.IAtomArgs>;
    guides?: Array<Atom.IAtomArgs>;
    profiles?: Array<Atom.IAtomArgs>;
    timelines?: Array<Atom.IAtomArgs>;
    commonsdivisions?: Array<Atom.IAtomArgs>;
    charts?: Array<Atom.IAtomArgs>;
    audios?: Array<Atom.IAtomArgs>;
}
export const AtomsCodec: thrift.IStructCodec<IAtomsArgs, IAtoms> = {
    encode(args: IAtomsArgs, output: thrift.TProtocol): void {
        const obj: any = {
            quizzes: args.quizzes,
            viewpoints: args.viewpoints,
            media: args.media,
            explainers: args.explainers,
            cta: args.cta,
            interactives: args.interactives,
            reviews: args.reviews,
            recipes: args.recipes,
            qandas: args.qandas,
            guides: args.guides,
            profiles: args.profiles,
            timelines: args.timelines,
            commonsdivisions: args.commonsdivisions,
            charts: args.charts,
            audios: args.audios
        };
        output.writeStructBegin("Atoms");
        if (obj.quizzes != null) {
            output.writeFieldBegin("quizzes", thrift.TType.LIST, 1);
            output.writeListBegin(thrift.TType.STRUCT, obj.quizzes.length);
            obj.quizzes.forEach((value_1: Atom.IAtomArgs): void => {
                Atom.AtomCodec.encode(value_1, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.viewpoints != null) {
            output.writeFieldBegin("viewpoints", thrift.TType.LIST, 2);
            output.writeListBegin(thrift.TType.STRUCT, obj.viewpoints.length);
            obj.viewpoints.forEach((value_2: Atom.IAtomArgs): void => {
                Atom.AtomCodec.encode(value_2, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.media != null) {
            output.writeFieldBegin("media", thrift.TType.LIST, 3);
            output.writeListBegin(thrift.TType.STRUCT, obj.media.length);
            obj.media.forEach((value_3: Atom.IAtomArgs): void => {
                Atom.AtomCodec.encode(value_3, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.explainers != null) {
            output.writeFieldBegin("explainers", thrift.TType.LIST, 4);
            output.writeListBegin(thrift.TType.STRUCT, obj.explainers.length);
            obj.explainers.forEach((value_4: Atom.IAtomArgs): void => {
                Atom.AtomCodec.encode(value_4, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.cta != null) {
            output.writeFieldBegin("cta", thrift.TType.LIST, 5);
            output.writeListBegin(thrift.TType.STRUCT, obj.cta.length);
            obj.cta.forEach((value_5: Atom.IAtomArgs): void => {
                Atom.AtomCodec.encode(value_5, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.interactives != null) {
            output.writeFieldBegin("interactives", thrift.TType.LIST, 6);
            output.writeListBegin(thrift.TType.STRUCT, obj.interactives.length);
            obj.interactives.forEach((value_6: Atom.IAtomArgs): void => {
                Atom.AtomCodec.encode(value_6, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.reviews != null) {
            output.writeFieldBegin("reviews", thrift.TType.LIST, 7);
            output.writeListBegin(thrift.TType.STRUCT, obj.reviews.length);
            obj.reviews.forEach((value_7: Atom.IAtomArgs): void => {
                Atom.AtomCodec.encode(value_7, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.recipes != null) {
            output.writeFieldBegin("recipes", thrift.TType.LIST, 8);
            output.writeListBegin(thrift.TType.STRUCT, obj.recipes.length);
            obj.recipes.forEach((value_8: Atom.IAtomArgs): void => {
                Atom.AtomCodec.encode(value_8, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.qandas != null) {
            output.writeFieldBegin("qandas", thrift.TType.LIST, 10);
            output.writeListBegin(thrift.TType.STRUCT, obj.qandas.length);
            obj.qandas.forEach((value_9: Atom.IAtomArgs): void => {
                Atom.AtomCodec.encode(value_9, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.guides != null) {
            output.writeFieldBegin("guides", thrift.TType.LIST, 11);
            output.writeListBegin(thrift.TType.STRUCT, obj.guides.length);
            obj.guides.forEach((value_10: Atom.IAtomArgs): void => {
                Atom.AtomCodec.encode(value_10, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.profiles != null) {
            output.writeFieldBegin("profiles", thrift.TType.LIST, 12);
            output.writeListBegin(thrift.TType.STRUCT, obj.profiles.length);
            obj.profiles.forEach((value_11: Atom.IAtomArgs): void => {
                Atom.AtomCodec.encode(value_11, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.timelines != null) {
            output.writeFieldBegin("timelines", thrift.TType.LIST, 13);
            output.writeListBegin(thrift.TType.STRUCT, obj.timelines.length);
            obj.timelines.forEach((value_12: Atom.IAtomArgs): void => {
                Atom.AtomCodec.encode(value_12, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.commonsdivisions != null) {
            output.writeFieldBegin("commonsdivisions", thrift.TType.LIST, 14);
            output.writeListBegin(thrift.TType.STRUCT, obj.commonsdivisions.length);
            obj.commonsdivisions.forEach((value_13: Atom.IAtomArgs): void => {
                Atom.AtomCodec.encode(value_13, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.charts != null) {
            output.writeFieldBegin("charts", thrift.TType.LIST, 15);
            output.writeListBegin(thrift.TType.STRUCT, obj.charts.length);
            obj.charts.forEach((value_14: Atom.IAtomArgs): void => {
                Atom.AtomCodec.encode(value_14, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.audios != null) {
            output.writeFieldBegin("audios", thrift.TType.LIST, 16);
            output.writeListBegin(thrift.TType.STRUCT, obj.audios.length);
            obj.audios.forEach((value_15: Atom.IAtomArgs): void => {
                Atom.AtomCodec.encode(value_15, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IAtoms {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.LIST) {
                        const value_16: Array<Atom.IAtom> = new Array<Atom.IAtom>();
                        const metadata_1: thrift.IThriftList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_17: Atom.IAtom = Atom.AtomCodec.decode(input);
                            value_16.push(value_17);
                        }
                        input.readListEnd();
                        _args.quizzes = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.LIST) {
                        const value_18: Array<Atom.IAtom> = new Array<Atom.IAtom>();
                        const metadata_2: thrift.IThriftList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_19: Atom.IAtom = Atom.AtomCodec.decode(input);
                            value_18.push(value_19);
                        }
                        input.readListEnd();
                        _args.viewpoints = value_18;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.LIST) {
                        const value_20: Array<Atom.IAtom> = new Array<Atom.IAtom>();
                        const metadata_3: thrift.IThriftList = input.readListBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const value_21: Atom.IAtom = Atom.AtomCodec.decode(input);
                            value_20.push(value_21);
                        }
                        input.readListEnd();
                        _args.media = value_20;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.LIST) {
                        const value_22: Array<Atom.IAtom> = new Array<Atom.IAtom>();
                        const metadata_4: thrift.IThriftList = input.readListBegin();
                        const size_4: number = metadata_4.size;
                        for (let i_4: number = 0; i_4 < size_4; i_4++) {
                            const value_23: Atom.IAtom = Atom.AtomCodec.decode(input);
                            value_22.push(value_23);
                        }
                        input.readListEnd();
                        _args.explainers = value_22;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.LIST) {
                        const value_24: Array<Atom.IAtom> = new Array<Atom.IAtom>();
                        const metadata_5: thrift.IThriftList = input.readListBegin();
                        const size_5: number = metadata_5.size;
                        for (let i_5: number = 0; i_5 < size_5; i_5++) {
                            const value_25: Atom.IAtom = Atom.AtomCodec.decode(input);
                            value_24.push(value_25);
                        }
                        input.readListEnd();
                        _args.cta = value_24;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.LIST) {
                        const value_26: Array<Atom.IAtom> = new Array<Atom.IAtom>();
                        const metadata_6: thrift.IThriftList = input.readListBegin();
                        const size_6: number = metadata_6.size;
                        for (let i_6: number = 0; i_6 < size_6; i_6++) {
                            const value_27: Atom.IAtom = Atom.AtomCodec.decode(input);
                            value_26.push(value_27);
                        }
                        input.readListEnd();
                        _args.interactives = value_26;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.TType.LIST) {
                        const value_28: Array<Atom.IAtom> = new Array<Atom.IAtom>();
                        const metadata_7: thrift.IThriftList = input.readListBegin();
                        const size_7: number = metadata_7.size;
                        for (let i_7: number = 0; i_7 < size_7; i_7++) {
                            const value_29: Atom.IAtom = Atom.AtomCodec.decode(input);
                            value_28.push(value_29);
                        }
                        input.readListEnd();
                        _args.reviews = value_28;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.TType.LIST) {
                        const value_30: Array<Atom.IAtom> = new Array<Atom.IAtom>();
                        const metadata_8: thrift.IThriftList = input.readListBegin();
                        const size_8: number = metadata_8.size;
                        for (let i_8: number = 0; i_8 < size_8; i_8++) {
                            const value_31: Atom.IAtom = Atom.AtomCodec.decode(input);
                            value_30.push(value_31);
                        }
                        input.readListEnd();
                        _args.recipes = value_30;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.TType.LIST) {
                        const value_32: Array<Atom.IAtom> = new Array<Atom.IAtom>();
                        const metadata_9: thrift.IThriftList = input.readListBegin();
                        const size_9: number = metadata_9.size;
                        for (let i_9: number = 0; i_9 < size_9; i_9++) {
                            const value_33: Atom.IAtom = Atom.AtomCodec.decode(input);
                            value_32.push(value_33);
                        }
                        input.readListEnd();
                        _args.qandas = value_32;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.TType.LIST) {
                        const value_34: Array<Atom.IAtom> = new Array<Atom.IAtom>();
                        const metadata_10: thrift.IThriftList = input.readListBegin();
                        const size_10: number = metadata_10.size;
                        for (let i_10: number = 0; i_10 < size_10; i_10++) {
                            const value_35: Atom.IAtom = Atom.AtomCodec.decode(input);
                            value_34.push(value_35);
                        }
                        input.readListEnd();
                        _args.guides = value_34;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.TType.LIST) {
                        const value_36: Array<Atom.IAtom> = new Array<Atom.IAtom>();
                        const metadata_11: thrift.IThriftList = input.readListBegin();
                        const size_11: number = metadata_11.size;
                        for (let i_11: number = 0; i_11 < size_11; i_11++) {
                            const value_37: Atom.IAtom = Atom.AtomCodec.decode(input);
                            value_36.push(value_37);
                        }
                        input.readListEnd();
                        _args.profiles = value_36;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.TType.LIST) {
                        const value_38: Array<Atom.IAtom> = new Array<Atom.IAtom>();
                        const metadata_12: thrift.IThriftList = input.readListBegin();
                        const size_12: number = metadata_12.size;
                        for (let i_12: number = 0; i_12 < size_12; i_12++) {
                            const value_39: Atom.IAtom = Atom.AtomCodec.decode(input);
                            value_38.push(value_39);
                        }
                        input.readListEnd();
                        _args.timelines = value_38;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.TType.LIST) {
                        const value_40: Array<Atom.IAtom> = new Array<Atom.IAtom>();
                        const metadata_13: thrift.IThriftList = input.readListBegin();
                        const size_13: number = metadata_13.size;
                        for (let i_13: number = 0; i_13 < size_13; i_13++) {
                            const value_41: Atom.IAtom = Atom.AtomCodec.decode(input);
                            value_40.push(value_41);
                        }
                        input.readListEnd();
                        _args.commonsdivisions = value_40;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.TType.LIST) {
                        const value_42: Array<Atom.IAtom> = new Array<Atom.IAtom>();
                        const metadata_14: thrift.IThriftList = input.readListBegin();
                        const size_14: number = metadata_14.size;
                        for (let i_14: number = 0; i_14 < size_14; i_14++) {
                            const value_43: Atom.IAtom = Atom.AtomCodec.decode(input);
                            value_42.push(value_43);
                        }
                        input.readListEnd();
                        _args.charts = value_42;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 16:
                    if (fieldType === thrift.TType.LIST) {
                        const value_44: Array<Atom.IAtom> = new Array<Atom.IAtom>();
                        const metadata_15: thrift.IThriftList = input.readListBegin();
                        const size_15: number = metadata_15.size;
                        for (let i_15: number = 0; i_15 < size_15; i_15++) {
                            const value_45: Atom.IAtom = Atom.AtomCodec.decode(input);
                            value_44.push(value_45);
                        }
                        input.readListEnd();
                        _args.audios = value_44;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            quizzes: _args.quizzes,
            viewpoints: _args.viewpoints,
            media: _args.media,
            explainers: _args.explainers,
            cta: _args.cta,
            interactives: _args.interactives,
            reviews: _args.reviews,
            recipes: _args.recipes,
            qandas: _args.qandas,
            guides: _args.guides,
            profiles: _args.profiles,
            timelines: _args.timelines,
            commonsdivisions: _args.commonsdivisions,
            charts: _args.charts,
            audios: _args.audios
        };
    }
};
export class Atoms extends thrift.StructLike implements IAtoms {
    public quizzes?: Array<Atom.IAtom>;
    public viewpoints?: Array<Atom.IAtom>;
    public media?: Array<Atom.IAtom>;
    public explainers?: Array<Atom.IAtom>;
    public cta?: Array<Atom.IAtom>;
    public interactives?: Array<Atom.IAtom>;
    public reviews?: Array<Atom.IAtom>;
    public recipes?: Array<Atom.IAtom>;
    public qandas?: Array<Atom.IAtom>;
    public guides?: Array<Atom.IAtom>;
    public profiles?: Array<Atom.IAtom>;
    public timelines?: Array<Atom.IAtom>;
    public commonsdivisions?: Array<Atom.IAtom>;
    public charts?: Array<Atom.IAtom>;
    public audios?: Array<Atom.IAtom>;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IAtomsArgs = {}) {
        super();
        if (args.quizzes != null) {
            const value_46: Array<Atom.IAtom> = new Array<Atom.IAtom>();
            args.quizzes.forEach((value_61: Atom.IAtomArgs): void => {
                const value_62: Atom.IAtom = new Atom.Atom(value_61);
                value_46.push(value_62);
            });
            this.quizzes = value_46;
        }
        if (args.viewpoints != null) {
            const value_47: Array<Atom.IAtom> = new Array<Atom.IAtom>();
            args.viewpoints.forEach((value_63: Atom.IAtomArgs): void => {
                const value_64: Atom.IAtom = new Atom.Atom(value_63);
                value_47.push(value_64);
            });
            this.viewpoints = value_47;
        }
        if (args.media != null) {
            const value_48: Array<Atom.IAtom> = new Array<Atom.IAtom>();
            args.media.forEach((value_65: Atom.IAtomArgs): void => {
                const value_66: Atom.IAtom = new Atom.Atom(value_65);
                value_48.push(value_66);
            });
            this.media = value_48;
        }
        if (args.explainers != null) {
            const value_49: Array<Atom.IAtom> = new Array<Atom.IAtom>();
            args.explainers.forEach((value_67: Atom.IAtomArgs): void => {
                const value_68: Atom.IAtom = new Atom.Atom(value_67);
                value_49.push(value_68);
            });
            this.explainers = value_49;
        }
        if (args.cta != null) {
            const value_50: Array<Atom.IAtom> = new Array<Atom.IAtom>();
            args.cta.forEach((value_69: Atom.IAtomArgs): void => {
                const value_70: Atom.IAtom = new Atom.Atom(value_69);
                value_50.push(value_70);
            });
            this.cta = value_50;
        }
        if (args.interactives != null) {
            const value_51: Array<Atom.IAtom> = new Array<Atom.IAtom>();
            args.interactives.forEach((value_71: Atom.IAtomArgs): void => {
                const value_72: Atom.IAtom = new Atom.Atom(value_71);
                value_51.push(value_72);
            });
            this.interactives = value_51;
        }
        if (args.reviews != null) {
            const value_52: Array<Atom.IAtom> = new Array<Atom.IAtom>();
            args.reviews.forEach((value_73: Atom.IAtomArgs): void => {
                const value_74: Atom.IAtom = new Atom.Atom(value_73);
                value_52.push(value_74);
            });
            this.reviews = value_52;
        }
        if (args.recipes != null) {
            const value_53: Array<Atom.IAtom> = new Array<Atom.IAtom>();
            args.recipes.forEach((value_75: Atom.IAtomArgs): void => {
                const value_76: Atom.IAtom = new Atom.Atom(value_75);
                value_53.push(value_76);
            });
            this.recipes = value_53;
        }
        if (args.qandas != null) {
            const value_54: Array<Atom.IAtom> = new Array<Atom.IAtom>();
            args.qandas.forEach((value_77: Atom.IAtomArgs): void => {
                const value_78: Atom.IAtom = new Atom.Atom(value_77);
                value_54.push(value_78);
            });
            this.qandas = value_54;
        }
        if (args.guides != null) {
            const value_55: Array<Atom.IAtom> = new Array<Atom.IAtom>();
            args.guides.forEach((value_79: Atom.IAtomArgs): void => {
                const value_80: Atom.IAtom = new Atom.Atom(value_79);
                value_55.push(value_80);
            });
            this.guides = value_55;
        }
        if (args.profiles != null) {
            const value_56: Array<Atom.IAtom> = new Array<Atom.IAtom>();
            args.profiles.forEach((value_81: Atom.IAtomArgs): void => {
                const value_82: Atom.IAtom = new Atom.Atom(value_81);
                value_56.push(value_82);
            });
            this.profiles = value_56;
        }
        if (args.timelines != null) {
            const value_57: Array<Atom.IAtom> = new Array<Atom.IAtom>();
            args.timelines.forEach((value_83: Atom.IAtomArgs): void => {
                const value_84: Atom.IAtom = new Atom.Atom(value_83);
                value_57.push(value_84);
            });
            this.timelines = value_57;
        }
        if (args.commonsdivisions != null) {
            const value_58: Array<Atom.IAtom> = new Array<Atom.IAtom>();
            args.commonsdivisions.forEach((value_85: Atom.IAtomArgs): void => {
                const value_86: Atom.IAtom = new Atom.Atom(value_85);
                value_58.push(value_86);
            });
            this.commonsdivisions = value_58;
        }
        if (args.charts != null) {
            const value_59: Array<Atom.IAtom> = new Array<Atom.IAtom>();
            args.charts.forEach((value_87: Atom.IAtomArgs): void => {
                const value_88: Atom.IAtom = new Atom.Atom(value_87);
                value_59.push(value_88);
            });
            this.charts = value_59;
        }
        if (args.audios != null) {
            const value_60: Array<Atom.IAtom> = new Array<Atom.IAtom>();
            args.audios.forEach((value_89: Atom.IAtomArgs): void => {
                const value_90: Atom.IAtom = new Atom.Atom(value_89);
                value_60.push(value_90);
            });
            this.audios = value_60;
        }
    }
    public static read(input: thrift.TProtocol): Atoms {
        return new Atoms(AtomsCodec.decode(input));
    }
    public static write(args: IAtomsArgs, output: thrift.TProtocol): void {
        return AtomsCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return AtomsCodec.encode(this, output);
    }
}
