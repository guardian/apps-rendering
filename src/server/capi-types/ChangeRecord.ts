/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as User from "./User";
export interface IChangeRecord {
    date: thrift.Int64;
    user?: User.IUser;
}
export interface IChangeRecordArgs {
    date: number | string | thrift.Int64;
    user?: User.IUserArgs;
}
export const ChangeRecordCodec: thrift.IStructCodec<IChangeRecordArgs, IChangeRecord> = {
    encode(args: IChangeRecordArgs, output: thrift.TProtocol): void {
        const obj: any = {
            date: (typeof args.date === "number" ? new thrift.Int64(args.date) : typeof args.date === "string" ? thrift.Int64.fromDecimalString(args.date) : args.date),
            user: args.user
        };
        output.writeStructBegin("ChangeRecord");
        if (obj.date != null) {
            output.writeFieldBegin("date", thrift.TType.I64, 1);
            output.writeI64((typeof obj.date === "number" ? new thrift.Int64(obj.date) : typeof obj.date === "string" ? thrift.Int64.fromDecimalString(obj.date) : obj.date));
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[date] is unset!");
        }
        if (obj.user != null) {
            output.writeFieldBegin("user", thrift.TType.STRUCT, 2);
            User.UserCodec.encode(obj.user, output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IChangeRecord {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.I64) {
                        const value_1: thrift.Int64 = input.readI64();
                        _args.date = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_2: User.IUser = User.UserCodec.decode(input);
                        _args.user = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.date !== undefined) {
            return {
                date: _args.date,
                user: _args.user
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read ChangeRecord from input");
        }
    }
};
export class ChangeRecord extends thrift.StructLike implements IChangeRecord {
    public date: thrift.Int64;
    public user?: User.IUser;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IChangeRecordArgs) {
        super();
        if (args.date != null) {
            const value_3: thrift.Int64 = (typeof args.date === "number" ? new thrift.Int64(args.date) : typeof args.date === "string" ? thrift.Int64.fromDecimalString(args.date) : args.date);
            this.date = value_3;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[date] is unset!");
        }
        if (args.user != null) {
            const value_4: User.IUser = new User.User(args.user);
            this.user = value_4;
        }
    }
    public static read(input: thrift.TProtocol): ChangeRecord {
        return new ChangeRecord(ChangeRecordCodec.decode(input));
    }
    public static write(args: IChangeRecordArgs, output: thrift.TProtocol): void {
        return ChangeRecordCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return ChangeRecordCodec.encode(this, output);
    }
}
