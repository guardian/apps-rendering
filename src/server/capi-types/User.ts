/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
export interface IUserArgs {
    email: string;
    firstName?: string;
    lastName?: string;
}
export class User {
    public email: string;
    public firstName?: string;
    public lastName?: string;
    constructor(args: IUserArgs) {
        if (args != null && args.email != null) {
            this.email = args.email;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[email] is unset!");
        }
        if (args != null && args.firstName != null) {
            this.firstName = args.firstName;
        }
        if (args != null && args.lastName != null) {
            this.lastName = args.lastName;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("User");
        if (this.email != null) {
            output.writeFieldBegin("email", thrift.TType.STRING, 1);
            output.writeString(this.email);
            output.writeFieldEnd();
        }
        if (this.firstName != null) {
            output.writeFieldBegin("firstName", thrift.TType.STRING, 2);
            output.writeString(this.firstName);
            output.writeFieldEnd();
        }
        if (this.lastName != null) {
            output.writeFieldBegin("lastName", thrift.TType.STRING, 3);
            output.writeString(this.lastName);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): User {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_1: string = input.readString();
                        _args.email = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: string = input.readString();
                        _args.firstName = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_3: string = input.readString();
                        _args.lastName = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.email !== undefined) {
            return new User(_args);
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read User from input");
        }
    }
}
