/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
export interface IFurniture {
    headline: string;
    source: string;
    standfirst?: string;
}
export interface IFurnitureArgs {
    headline: string;
    source: string;
    standfirst?: string;
}
export const FurnitureCodec: thrift.IStructCodec<IFurnitureArgs, IFurniture> = {
    encode(args: IFurnitureArgs, output: thrift.TProtocol): void {
        const obj: any = {
            headline: args.headline,
            source: args.source,
            standfirst: args.standfirst
        };
        output.writeStructBegin("Furniture");
        if (obj.headline != null) {
            output.writeFieldBegin("headline", thrift.TType.STRING, 1);
            output.writeString(obj.headline);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[headline] is unset!");
        }
        if (obj.source != null) {
            output.writeFieldBegin("source", thrift.TType.STRING, 2);
            output.writeString(obj.source);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[source] is unset!");
        }
        if (obj.standfirst != null) {
            output.writeFieldBegin("standfirst", thrift.TType.STRING, 3);
            output.writeString(obj.standfirst);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IFurniture {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_1: string = input.readString();
                        _args.headline = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: string = input.readString();
                        _args.source = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_3: string = input.readString();
                        _args.standfirst = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.headline !== undefined && _args.source !== undefined) {
            return {
                headline: _args.headline,
                source: _args.source,
                standfirst: _args.standfirst
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read Furniture from input");
        }
    }
};
export class Furniture extends thrift.StructLike implements IFurniture {
    public headline: string;
    public source: string;
    public standfirst?: string;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IFurnitureArgs) {
        super();
        if (args.headline != null) {
            const value_4: string = args.headline;
            this.headline = value_4;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[headline] is unset!");
        }
        if (args.source != null) {
            const value_5: string = args.source;
            this.source = value_5;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[source] is unset!");
        }
        if (args.standfirst != null) {
            const value_6: string = args.standfirst;
            this.standfirst = value_6;
        }
    }
    public static read(input: thrift.TProtocol): Furniture {
        return new Furniture(FurnitureCodec.decode(input));
    }
    public static write(args: IFurnitureArgs, output: thrift.TProtocol): void {
        return FurnitureCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return FurnitureCodec.encode(this, output);
    }
}
