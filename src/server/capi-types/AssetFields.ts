/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as CapiDateTime from "./CapiDateTime";
import { Int64 } from "@creditkarma/thrift-server-core";
export interface IAssetFieldsArgs {
    aspectRatio?: string;
    altText?: string;
    isInappropriateForAdverts?: boolean;
    caption?: string;
    credit?: string;
    embeddable?: boolean;
    photographer?: string;
    source?: string;
    stillImageUrl?: string;
    width?: number;
    height?: number;
    name?: string;
    secureFile?: string;
    isMaster?: boolean;
    sizeInBytes?: number | Int64;
    durationMinutes?: number;
    durationSeconds?: number;
    displayCredit?: boolean;
    thumbnailUrl?: string;
    role?: string;
    mediaId?: string;
    iframeUrl?: string;
    scriptName?: string;
    scriptUrl?: string;
    blockAds?: boolean;
    html?: string;
    embedType?: string;
    explicit?: boolean;
    clean?: boolean;
    thumbnailImageUrl?: string;
    linkText?: string;
    linkPrefix?: string;
    shortUrl?: string;
    imageType?: string;
    suppliersReference?: string;
    mediaApiUri?: string;
    copyright?: string;
    mimeType?: string;
    url?: string;
    originalUrl?: string;
    id?: string;
    attribution?: string;
    description?: string;
    title?: string;
    contentAuthSystem?: string;
    alt?: string;
    picdarUrn?: string;
    comment?: string;
    witnessEmbedType?: string;
    authorName?: string;
    authorUsername?: string;
    authorWitnessProfileUrl?: string;
    authorGuardianProfileUrl?: string;
    apiUrl?: string;
    dateCreated?: CapiDateTime.CapiDateTime;
    youtubeUrl?: string;
    youtubeSource?: string;
    youtubeTitle?: string;
    youtubeDescription?: string;
    youtubeAuthorName?: string;
    youtubeHtml?: string;
    venue?: string;
    location?: string;
    identifier?: string;
    price?: string;
    start?: CapiDateTime.CapiDateTime;
    end?: CapiDateTime.CapiDateTime;
    safeEmbedCode?: boolean;
}
export class AssetFields {
    public aspectRatio?: string;
    public altText?: string;
    public isInappropriateForAdverts?: boolean;
    public caption?: string;
    public credit?: string;
    public embeddable?: boolean;
    public photographer?: string;
    public source?: string;
    public stillImageUrl?: string;
    public width?: number;
    public height?: number;
    public name?: string;
    public secureFile?: string;
    public isMaster?: boolean;
    public sizeInBytes?: Int64;
    public durationMinutes?: number;
    public durationSeconds?: number;
    public displayCredit?: boolean;
    public thumbnailUrl?: string;
    public role?: string;
    public mediaId?: string;
    public iframeUrl?: string;
    public scriptName?: string;
    public scriptUrl?: string;
    public blockAds?: boolean;
    public html?: string;
    public embedType?: string;
    public explicit?: boolean;
    public clean?: boolean;
    public thumbnailImageUrl?: string;
    public linkText?: string;
    public linkPrefix?: string;
    public shortUrl?: string;
    public imageType?: string;
    public suppliersReference?: string;
    public mediaApiUri?: string;
    public copyright?: string;
    public mimeType?: string;
    public url?: string;
    public originalUrl?: string;
    public id?: string;
    public attribution?: string;
    public description?: string;
    public title?: string;
    public contentAuthSystem?: string;
    public alt?: string;
    public picdarUrn?: string;
    public comment?: string;
    public witnessEmbedType?: string;
    public authorName?: string;
    public authorUsername?: string;
    public authorWitnessProfileUrl?: string;
    public authorGuardianProfileUrl?: string;
    public apiUrl?: string;
    public dateCreated?: CapiDateTime.CapiDateTime;
    public youtubeUrl?: string;
    public youtubeSource?: string;
    public youtubeTitle?: string;
    public youtubeDescription?: string;
    public youtubeAuthorName?: string;
    public youtubeHtml?: string;
    public venue?: string;
    public location?: string;
    public identifier?: string;
    public price?: string;
    public start?: CapiDateTime.CapiDateTime;
    public end?: CapiDateTime.CapiDateTime;
    public safeEmbedCode?: boolean;
    constructor(args?: IAssetFieldsArgs) {
        if (args != null && args.aspectRatio != null) {
            this.aspectRatio = args.aspectRatio;
        }
        if (args != null && args.altText != null) {
            this.altText = args.altText;
        }
        if (args != null && args.isInappropriateForAdverts != null) {
            this.isInappropriateForAdverts = args.isInappropriateForAdverts;
        }
        if (args != null && args.caption != null) {
            this.caption = args.caption;
        }
        if (args != null && args.credit != null) {
            this.credit = args.credit;
        }
        if (args != null && args.embeddable != null) {
            this.embeddable = args.embeddable;
        }
        if (args != null && args.photographer != null) {
            this.photographer = args.photographer;
        }
        if (args != null && args.source != null) {
            this.source = args.source;
        }
        if (args != null && args.stillImageUrl != null) {
            this.stillImageUrl = args.stillImageUrl;
        }
        if (args != null && args.width != null) {
            this.width = args.width;
        }
        if (args != null && args.height != null) {
            this.height = args.height;
        }
        if (args != null && args.name != null) {
            this.name = args.name;
        }
        if (args != null && args.secureFile != null) {
            this.secureFile = args.secureFile;
        }
        if (args != null && args.isMaster != null) {
            this.isMaster = args.isMaster;
        }
        if (args != null && args.sizeInBytes != null) {
            if (typeof args.sizeInBytes === "number") {
                this.sizeInBytes = new Int64(args.sizeInBytes);
            }
            else {
                this.sizeInBytes = args.sizeInBytes;
            }
        }
        if (args != null && args.durationMinutes != null) {
            this.durationMinutes = args.durationMinutes;
        }
        if (args != null && args.durationSeconds != null) {
            this.durationSeconds = args.durationSeconds;
        }
        if (args != null && args.displayCredit != null) {
            this.displayCredit = args.displayCredit;
        }
        if (args != null && args.thumbnailUrl != null) {
            this.thumbnailUrl = args.thumbnailUrl;
        }
        if (args != null && args.role != null) {
            this.role = args.role;
        }
        if (args != null && args.mediaId != null) {
            this.mediaId = args.mediaId;
        }
        if (args != null && args.iframeUrl != null) {
            this.iframeUrl = args.iframeUrl;
        }
        if (args != null && args.scriptName != null) {
            this.scriptName = args.scriptName;
        }
        if (args != null && args.scriptUrl != null) {
            this.scriptUrl = args.scriptUrl;
        }
        if (args != null && args.blockAds != null) {
            this.blockAds = args.blockAds;
        }
        if (args != null && args.html != null) {
            this.html = args.html;
        }
        if (args != null && args.embedType != null) {
            this.embedType = args.embedType;
        }
        if (args != null && args.explicit != null) {
            this.explicit = args.explicit;
        }
        if (args != null && args.clean != null) {
            this.clean = args.clean;
        }
        if (args != null && args.thumbnailImageUrl != null) {
            this.thumbnailImageUrl = args.thumbnailImageUrl;
        }
        if (args != null && args.linkText != null) {
            this.linkText = args.linkText;
        }
        if (args != null && args.linkPrefix != null) {
            this.linkPrefix = args.linkPrefix;
        }
        if (args != null && args.shortUrl != null) {
            this.shortUrl = args.shortUrl;
        }
        if (args != null && args.imageType != null) {
            this.imageType = args.imageType;
        }
        if (args != null && args.suppliersReference != null) {
            this.suppliersReference = args.suppliersReference;
        }
        if (args != null && args.mediaApiUri != null) {
            this.mediaApiUri = args.mediaApiUri;
        }
        if (args != null && args.copyright != null) {
            this.copyright = args.copyright;
        }
        if (args != null && args.mimeType != null) {
            this.mimeType = args.mimeType;
        }
        if (args != null && args.url != null) {
            this.url = args.url;
        }
        if (args != null && args.originalUrl != null) {
            this.originalUrl = args.originalUrl;
        }
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.attribution != null) {
            this.attribution = args.attribution;
        }
        if (args != null && args.description != null) {
            this.description = args.description;
        }
        if (args != null && args.title != null) {
            this.title = args.title;
        }
        if (args != null && args.contentAuthSystem != null) {
            this.contentAuthSystem = args.contentAuthSystem;
        }
        if (args != null && args.alt != null) {
            this.alt = args.alt;
        }
        if (args != null && args.picdarUrn != null) {
            this.picdarUrn = args.picdarUrn;
        }
        if (args != null && args.comment != null) {
            this.comment = args.comment;
        }
        if (args != null && args.witnessEmbedType != null) {
            this.witnessEmbedType = args.witnessEmbedType;
        }
        if (args != null && args.authorName != null) {
            this.authorName = args.authorName;
        }
        if (args != null && args.authorUsername != null) {
            this.authorUsername = args.authorUsername;
        }
        if (args != null && args.authorWitnessProfileUrl != null) {
            this.authorWitnessProfileUrl = args.authorWitnessProfileUrl;
        }
        if (args != null && args.authorGuardianProfileUrl != null) {
            this.authorGuardianProfileUrl = args.authorGuardianProfileUrl;
        }
        if (args != null && args.apiUrl != null) {
            this.apiUrl = args.apiUrl;
        }
        if (args != null && args.dateCreated != null) {
            this.dateCreated = args.dateCreated;
        }
        if (args != null && args.youtubeUrl != null) {
            this.youtubeUrl = args.youtubeUrl;
        }
        if (args != null && args.youtubeSource != null) {
            this.youtubeSource = args.youtubeSource;
        }
        if (args != null && args.youtubeTitle != null) {
            this.youtubeTitle = args.youtubeTitle;
        }
        if (args != null && args.youtubeDescription != null) {
            this.youtubeDescription = args.youtubeDescription;
        }
        if (args != null && args.youtubeAuthorName != null) {
            this.youtubeAuthorName = args.youtubeAuthorName;
        }
        if (args != null && args.youtubeHtml != null) {
            this.youtubeHtml = args.youtubeHtml;
        }
        if (args != null && args.venue != null) {
            this.venue = args.venue;
        }
        if (args != null && args.location != null) {
            this.location = args.location;
        }
        if (args != null && args.identifier != null) {
            this.identifier = args.identifier;
        }
        if (args != null && args.price != null) {
            this.price = args.price;
        }
        if (args != null && args.start != null) {
            this.start = args.start;
        }
        if (args != null && args.end != null) {
            this.end = args.end;
        }
        if (args != null && args.safeEmbedCode != null) {
            this.safeEmbedCode = args.safeEmbedCode;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("AssetFields");
        if (this.aspectRatio != null) {
            output.writeFieldBegin("aspectRatio", thrift.TType.STRING, 1);
            output.writeString(this.aspectRatio);
            output.writeFieldEnd();
        }
        if (this.altText != null) {
            output.writeFieldBegin("altText", thrift.TType.STRING, 2);
            output.writeString(this.altText);
            output.writeFieldEnd();
        }
        if (this.isInappropriateForAdverts != null) {
            output.writeFieldBegin("isInappropriateForAdverts", thrift.TType.BOOL, 3);
            output.writeBool(this.isInappropriateForAdverts);
            output.writeFieldEnd();
        }
        if (this.caption != null) {
            output.writeFieldBegin("caption", thrift.TType.STRING, 4);
            output.writeString(this.caption);
            output.writeFieldEnd();
        }
        if (this.credit != null) {
            output.writeFieldBegin("credit", thrift.TType.STRING, 5);
            output.writeString(this.credit);
            output.writeFieldEnd();
        }
        if (this.embeddable != null) {
            output.writeFieldBegin("embeddable", thrift.TType.BOOL, 6);
            output.writeBool(this.embeddable);
            output.writeFieldEnd();
        }
        if (this.photographer != null) {
            output.writeFieldBegin("photographer", thrift.TType.STRING, 7);
            output.writeString(this.photographer);
            output.writeFieldEnd();
        }
        if (this.source != null) {
            output.writeFieldBegin("source", thrift.TType.STRING, 8);
            output.writeString(this.source);
            output.writeFieldEnd();
        }
        if (this.stillImageUrl != null) {
            output.writeFieldBegin("stillImageUrl", thrift.TType.STRING, 9);
            output.writeString(this.stillImageUrl);
            output.writeFieldEnd();
        }
        if (this.width != null) {
            output.writeFieldBegin("width", thrift.TType.I32, 10);
            output.writeI32(this.width);
            output.writeFieldEnd();
        }
        if (this.height != null) {
            output.writeFieldBegin("height", thrift.TType.I32, 11);
            output.writeI32(this.height);
            output.writeFieldEnd();
        }
        if (this.name != null) {
            output.writeFieldBegin("name", thrift.TType.STRING, 12);
            output.writeString(this.name);
            output.writeFieldEnd();
        }
        if (this.secureFile != null) {
            output.writeFieldBegin("secureFile", thrift.TType.STRING, 13);
            output.writeString(this.secureFile);
            output.writeFieldEnd();
        }
        if (this.isMaster != null) {
            output.writeFieldBegin("isMaster", thrift.TType.BOOL, 14);
            output.writeBool(this.isMaster);
            output.writeFieldEnd();
        }
        if (this.sizeInBytes != null) {
            output.writeFieldBegin("sizeInBytes", thrift.TType.I64, 15);
            output.writeI64(this.sizeInBytes);
            output.writeFieldEnd();
        }
        if (this.durationMinutes != null) {
            output.writeFieldBegin("durationMinutes", thrift.TType.I32, 16);
            output.writeI32(this.durationMinutes);
            output.writeFieldEnd();
        }
        if (this.durationSeconds != null) {
            output.writeFieldBegin("durationSeconds", thrift.TType.I32, 17);
            output.writeI32(this.durationSeconds);
            output.writeFieldEnd();
        }
        if (this.displayCredit != null) {
            output.writeFieldBegin("displayCredit", thrift.TType.BOOL, 18);
            output.writeBool(this.displayCredit);
            output.writeFieldEnd();
        }
        if (this.thumbnailUrl != null) {
            output.writeFieldBegin("thumbnailUrl", thrift.TType.STRING, 19);
            output.writeString(this.thumbnailUrl);
            output.writeFieldEnd();
        }
        if (this.role != null) {
            output.writeFieldBegin("role", thrift.TType.STRING, 20);
            output.writeString(this.role);
            output.writeFieldEnd();
        }
        if (this.mediaId != null) {
            output.writeFieldBegin("mediaId", thrift.TType.STRING, 21);
            output.writeString(this.mediaId);
            output.writeFieldEnd();
        }
        if (this.iframeUrl != null) {
            output.writeFieldBegin("iframeUrl", thrift.TType.STRING, 22);
            output.writeString(this.iframeUrl);
            output.writeFieldEnd();
        }
        if (this.scriptName != null) {
            output.writeFieldBegin("scriptName", thrift.TType.STRING, 23);
            output.writeString(this.scriptName);
            output.writeFieldEnd();
        }
        if (this.scriptUrl != null) {
            output.writeFieldBegin("scriptUrl", thrift.TType.STRING, 24);
            output.writeString(this.scriptUrl);
            output.writeFieldEnd();
        }
        if (this.blockAds != null) {
            output.writeFieldBegin("blockAds", thrift.TType.BOOL, 25);
            output.writeBool(this.blockAds);
            output.writeFieldEnd();
        }
        if (this.html != null) {
            output.writeFieldBegin("html", thrift.TType.STRING, 26);
            output.writeString(this.html);
            output.writeFieldEnd();
        }
        if (this.embedType != null) {
            output.writeFieldBegin("embedType", thrift.TType.STRING, 27);
            output.writeString(this.embedType);
            output.writeFieldEnd();
        }
        if (this.explicit != null) {
            output.writeFieldBegin("explicit", thrift.TType.BOOL, 28);
            output.writeBool(this.explicit);
            output.writeFieldEnd();
        }
        if (this.clean != null) {
            output.writeFieldBegin("clean", thrift.TType.BOOL, 29);
            output.writeBool(this.clean);
            output.writeFieldEnd();
        }
        if (this.thumbnailImageUrl != null) {
            output.writeFieldBegin("thumbnailImageUrl", thrift.TType.STRING, 30);
            output.writeString(this.thumbnailImageUrl);
            output.writeFieldEnd();
        }
        if (this.linkText != null) {
            output.writeFieldBegin("linkText", thrift.TType.STRING, 31);
            output.writeString(this.linkText);
            output.writeFieldEnd();
        }
        if (this.linkPrefix != null) {
            output.writeFieldBegin("linkPrefix", thrift.TType.STRING, 32);
            output.writeString(this.linkPrefix);
            output.writeFieldEnd();
        }
        if (this.shortUrl != null) {
            output.writeFieldBegin("shortUrl", thrift.TType.STRING, 33);
            output.writeString(this.shortUrl);
            output.writeFieldEnd();
        }
        if (this.imageType != null) {
            output.writeFieldBegin("imageType", thrift.TType.STRING, 34);
            output.writeString(this.imageType);
            output.writeFieldEnd();
        }
        if (this.suppliersReference != null) {
            output.writeFieldBegin("suppliersReference", thrift.TType.STRING, 35);
            output.writeString(this.suppliersReference);
            output.writeFieldEnd();
        }
        if (this.mediaApiUri != null) {
            output.writeFieldBegin("mediaApiUri", thrift.TType.STRING, 36);
            output.writeString(this.mediaApiUri);
            output.writeFieldEnd();
        }
        if (this.copyright != null) {
            output.writeFieldBegin("copyright", thrift.TType.STRING, 37);
            output.writeString(this.copyright);
            output.writeFieldEnd();
        }
        if (this.mimeType != null) {
            output.writeFieldBegin("mimeType", thrift.TType.STRING, 38);
            output.writeString(this.mimeType);
            output.writeFieldEnd();
        }
        if (this.url != null) {
            output.writeFieldBegin("url", thrift.TType.STRING, 39);
            output.writeString(this.url);
            output.writeFieldEnd();
        }
        if (this.originalUrl != null) {
            output.writeFieldBegin("originalUrl", thrift.TType.STRING, 40);
            output.writeString(this.originalUrl);
            output.writeFieldEnd();
        }
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.TType.STRING, 41);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.attribution != null) {
            output.writeFieldBegin("attribution", thrift.TType.STRING, 42);
            output.writeString(this.attribution);
            output.writeFieldEnd();
        }
        if (this.description != null) {
            output.writeFieldBegin("description", thrift.TType.STRING, 43);
            output.writeString(this.description);
            output.writeFieldEnd();
        }
        if (this.title != null) {
            output.writeFieldBegin("title", thrift.TType.STRING, 44);
            output.writeString(this.title);
            output.writeFieldEnd();
        }
        if (this.contentAuthSystem != null) {
            output.writeFieldBegin("contentAuthSystem", thrift.TType.STRING, 45);
            output.writeString(this.contentAuthSystem);
            output.writeFieldEnd();
        }
        if (this.alt != null) {
            output.writeFieldBegin("alt", thrift.TType.STRING, 46);
            output.writeString(this.alt);
            output.writeFieldEnd();
        }
        if (this.picdarUrn != null) {
            output.writeFieldBegin("picdarUrn", thrift.TType.STRING, 47);
            output.writeString(this.picdarUrn);
            output.writeFieldEnd();
        }
        if (this.comment != null) {
            output.writeFieldBegin("comment", thrift.TType.STRING, 48);
            output.writeString(this.comment);
            output.writeFieldEnd();
        }
        if (this.witnessEmbedType != null) {
            output.writeFieldBegin("witnessEmbedType", thrift.TType.STRING, 49);
            output.writeString(this.witnessEmbedType);
            output.writeFieldEnd();
        }
        if (this.authorName != null) {
            output.writeFieldBegin("authorName", thrift.TType.STRING, 50);
            output.writeString(this.authorName);
            output.writeFieldEnd();
        }
        if (this.authorUsername != null) {
            output.writeFieldBegin("authorUsername", thrift.TType.STRING, 51);
            output.writeString(this.authorUsername);
            output.writeFieldEnd();
        }
        if (this.authorWitnessProfileUrl != null) {
            output.writeFieldBegin("authorWitnessProfileUrl", thrift.TType.STRING, 52);
            output.writeString(this.authorWitnessProfileUrl);
            output.writeFieldEnd();
        }
        if (this.authorGuardianProfileUrl != null) {
            output.writeFieldBegin("authorGuardianProfileUrl", thrift.TType.STRING, 53);
            output.writeString(this.authorGuardianProfileUrl);
            output.writeFieldEnd();
        }
        if (this.apiUrl != null) {
            output.writeFieldBegin("apiUrl", thrift.TType.STRING, 54);
            output.writeString(this.apiUrl);
            output.writeFieldEnd();
        }
        if (this.dateCreated != null) {
            output.writeFieldBegin("dateCreated", thrift.TType.STRUCT, 55);
            this.dateCreated.write(output);
            output.writeFieldEnd();
        }
        if (this.youtubeUrl != null) {
            output.writeFieldBegin("youtubeUrl", thrift.TType.STRING, 56);
            output.writeString(this.youtubeUrl);
            output.writeFieldEnd();
        }
        if (this.youtubeSource != null) {
            output.writeFieldBegin("youtubeSource", thrift.TType.STRING, 57);
            output.writeString(this.youtubeSource);
            output.writeFieldEnd();
        }
        if (this.youtubeTitle != null) {
            output.writeFieldBegin("youtubeTitle", thrift.TType.STRING, 58);
            output.writeString(this.youtubeTitle);
            output.writeFieldEnd();
        }
        if (this.youtubeDescription != null) {
            output.writeFieldBegin("youtubeDescription", thrift.TType.STRING, 59);
            output.writeString(this.youtubeDescription);
            output.writeFieldEnd();
        }
        if (this.youtubeAuthorName != null) {
            output.writeFieldBegin("youtubeAuthorName", thrift.TType.STRING, 60);
            output.writeString(this.youtubeAuthorName);
            output.writeFieldEnd();
        }
        if (this.youtubeHtml != null) {
            output.writeFieldBegin("youtubeHtml", thrift.TType.STRING, 61);
            output.writeString(this.youtubeHtml);
            output.writeFieldEnd();
        }
        if (this.venue != null) {
            output.writeFieldBegin("venue", thrift.TType.STRING, 62);
            output.writeString(this.venue);
            output.writeFieldEnd();
        }
        if (this.location != null) {
            output.writeFieldBegin("location", thrift.TType.STRING, 63);
            output.writeString(this.location);
            output.writeFieldEnd();
        }
        if (this.identifier != null) {
            output.writeFieldBegin("identifier", thrift.TType.STRING, 64);
            output.writeString(this.identifier);
            output.writeFieldEnd();
        }
        if (this.price != null) {
            output.writeFieldBegin("price", thrift.TType.STRING, 65);
            output.writeString(this.price);
            output.writeFieldEnd();
        }
        if (this.start != null) {
            output.writeFieldBegin("start", thrift.TType.STRUCT, 66);
            this.start.write(output);
            output.writeFieldEnd();
        }
        if (this.end != null) {
            output.writeFieldBegin("end", thrift.TType.STRUCT, 67);
            this.end.write(output);
            output.writeFieldEnd();
        }
        if (this.safeEmbedCode != null) {
            output.writeFieldBegin("safeEmbedCode", thrift.TType.BOOL, 68);
            output.writeBool(this.safeEmbedCode);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): AssetFields {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_1: string = input.readString();
                        _args.aspectRatio = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: string = input.readString();
                        _args.altText = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_3: boolean = input.readBool();
                        _args.isInappropriateForAdverts = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRING) {
                        const value_4: string = input.readString();
                        _args.caption = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.STRING) {
                        const value_5: string = input.readString();
                        _args.credit = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_6: boolean = input.readBool();
                        _args.embeddable = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.TType.STRING) {
                        const value_7: string = input.readString();
                        _args.photographer = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.TType.STRING) {
                        const value_8: string = input.readString();
                        _args.source = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.TType.STRING) {
                        const value_9: string = input.readString();
                        _args.stillImageUrl = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.TType.I32) {
                        const value_10: number = input.readI32();
                        _args.width = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.TType.I32) {
                        const value_11: number = input.readI32();
                        _args.height = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.TType.STRING) {
                        const value_12: string = input.readString();
                        _args.name = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.TType.STRING) {
                        const value_13: string = input.readString();
                        _args.secureFile = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_14: boolean = input.readBool();
                        _args.isMaster = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.TType.I64) {
                        const value_15: Int64 = input.readI64();
                        _args.sizeInBytes = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 16:
                    if (fieldType === thrift.TType.I32) {
                        const value_16: number = input.readI32();
                        _args.durationMinutes = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 17:
                    if (fieldType === thrift.TType.I32) {
                        const value_17: number = input.readI32();
                        _args.durationSeconds = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 18:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_18: boolean = input.readBool();
                        _args.displayCredit = value_18;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 19:
                    if (fieldType === thrift.TType.STRING) {
                        const value_19: string = input.readString();
                        _args.thumbnailUrl = value_19;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 20:
                    if (fieldType === thrift.TType.STRING) {
                        const value_20: string = input.readString();
                        _args.role = value_20;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 21:
                    if (fieldType === thrift.TType.STRING) {
                        const value_21: string = input.readString();
                        _args.mediaId = value_21;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 22:
                    if (fieldType === thrift.TType.STRING) {
                        const value_22: string = input.readString();
                        _args.iframeUrl = value_22;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 23:
                    if (fieldType === thrift.TType.STRING) {
                        const value_23: string = input.readString();
                        _args.scriptName = value_23;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 24:
                    if (fieldType === thrift.TType.STRING) {
                        const value_24: string = input.readString();
                        _args.scriptUrl = value_24;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 25:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_25: boolean = input.readBool();
                        _args.blockAds = value_25;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 26:
                    if (fieldType === thrift.TType.STRING) {
                        const value_26: string = input.readString();
                        _args.html = value_26;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 27:
                    if (fieldType === thrift.TType.STRING) {
                        const value_27: string = input.readString();
                        _args.embedType = value_27;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 28:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_28: boolean = input.readBool();
                        _args.explicit = value_28;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 29:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_29: boolean = input.readBool();
                        _args.clean = value_29;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 30:
                    if (fieldType === thrift.TType.STRING) {
                        const value_30: string = input.readString();
                        _args.thumbnailImageUrl = value_30;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 31:
                    if (fieldType === thrift.TType.STRING) {
                        const value_31: string = input.readString();
                        _args.linkText = value_31;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 32:
                    if (fieldType === thrift.TType.STRING) {
                        const value_32: string = input.readString();
                        _args.linkPrefix = value_32;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 33:
                    if (fieldType === thrift.TType.STRING) {
                        const value_33: string = input.readString();
                        _args.shortUrl = value_33;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 34:
                    if (fieldType === thrift.TType.STRING) {
                        const value_34: string = input.readString();
                        _args.imageType = value_34;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 35:
                    if (fieldType === thrift.TType.STRING) {
                        const value_35: string = input.readString();
                        _args.suppliersReference = value_35;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 36:
                    if (fieldType === thrift.TType.STRING) {
                        const value_36: string = input.readString();
                        _args.mediaApiUri = value_36;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 37:
                    if (fieldType === thrift.TType.STRING) {
                        const value_37: string = input.readString();
                        _args.copyright = value_37;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 38:
                    if (fieldType === thrift.TType.STRING) {
                        const value_38: string = input.readString();
                        _args.mimeType = value_38;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 39:
                    if (fieldType === thrift.TType.STRING) {
                        const value_39: string = input.readString();
                        _args.url = value_39;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 40:
                    if (fieldType === thrift.TType.STRING) {
                        const value_40: string = input.readString();
                        _args.originalUrl = value_40;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 41:
                    if (fieldType === thrift.TType.STRING) {
                        const value_41: string = input.readString();
                        _args.id = value_41;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 42:
                    if (fieldType === thrift.TType.STRING) {
                        const value_42: string = input.readString();
                        _args.attribution = value_42;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 43:
                    if (fieldType === thrift.TType.STRING) {
                        const value_43: string = input.readString();
                        _args.description = value_43;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 44:
                    if (fieldType === thrift.TType.STRING) {
                        const value_44: string = input.readString();
                        _args.title = value_44;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 45:
                    if (fieldType === thrift.TType.STRING) {
                        const value_45: string = input.readString();
                        _args.contentAuthSystem = value_45;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 46:
                    if (fieldType === thrift.TType.STRING) {
                        const value_46: string = input.readString();
                        _args.alt = value_46;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 47:
                    if (fieldType === thrift.TType.STRING) {
                        const value_47: string = input.readString();
                        _args.picdarUrn = value_47;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 48:
                    if (fieldType === thrift.TType.STRING) {
                        const value_48: string = input.readString();
                        _args.comment = value_48;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 49:
                    if (fieldType === thrift.TType.STRING) {
                        const value_49: string = input.readString();
                        _args.witnessEmbedType = value_49;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 50:
                    if (fieldType === thrift.TType.STRING) {
                        const value_50: string = input.readString();
                        _args.authorName = value_50;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 51:
                    if (fieldType === thrift.TType.STRING) {
                        const value_51: string = input.readString();
                        _args.authorUsername = value_51;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 52:
                    if (fieldType === thrift.TType.STRING) {
                        const value_52: string = input.readString();
                        _args.authorWitnessProfileUrl = value_52;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 53:
                    if (fieldType === thrift.TType.STRING) {
                        const value_53: string = input.readString();
                        _args.authorGuardianProfileUrl = value_53;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 54:
                    if (fieldType === thrift.TType.STRING) {
                        const value_54: string = input.readString();
                        _args.apiUrl = value_54;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 55:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_55: CapiDateTime.CapiDateTime = CapiDateTime.CapiDateTime.read(input);
                        _args.dateCreated = value_55;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 56:
                    if (fieldType === thrift.TType.STRING) {
                        const value_56: string = input.readString();
                        _args.youtubeUrl = value_56;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 57:
                    if (fieldType === thrift.TType.STRING) {
                        const value_57: string = input.readString();
                        _args.youtubeSource = value_57;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 58:
                    if (fieldType === thrift.TType.STRING) {
                        const value_58: string = input.readString();
                        _args.youtubeTitle = value_58;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 59:
                    if (fieldType === thrift.TType.STRING) {
                        const value_59: string = input.readString();
                        _args.youtubeDescription = value_59;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 60:
                    if (fieldType === thrift.TType.STRING) {
                        const value_60: string = input.readString();
                        _args.youtubeAuthorName = value_60;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 61:
                    if (fieldType === thrift.TType.STRING) {
                        const value_61: string = input.readString();
                        _args.youtubeHtml = value_61;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 62:
                    if (fieldType === thrift.TType.STRING) {
                        const value_62: string = input.readString();
                        _args.venue = value_62;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 63:
                    if (fieldType === thrift.TType.STRING) {
                        const value_63: string = input.readString();
                        _args.location = value_63;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 64:
                    if (fieldType === thrift.TType.STRING) {
                        const value_64: string = input.readString();
                        _args.identifier = value_64;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 65:
                    if (fieldType === thrift.TType.STRING) {
                        const value_65: string = input.readString();
                        _args.price = value_65;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 66:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_66: CapiDateTime.CapiDateTime = CapiDateTime.CapiDateTime.read(input);
                        _args.start = value_66;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 67:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_67: CapiDateTime.CapiDateTime = CapiDateTime.CapiDateTime.read(input);
                        _args.end = value_67;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 68:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_68: boolean = input.readBool();
                        _args.safeEmbedCode = value_68;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new AssetFields(_args);
    }
}
