/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as CapiDateTime from "./CapiDateTime";
export interface IAssetFields {
    aspectRatio?: string;
    altText?: string;
    isInappropriateForAdverts?: boolean;
    caption?: string;
    credit?: string;
    embeddable?: boolean;
    photographer?: string;
    source?: string;
    stillImageUrl?: string;
    width?: number;
    height?: number;
    name?: string;
    secureFile?: string;
    isMaster?: boolean;
    sizeInBytes?: thrift.Int64;
    durationMinutes?: number;
    durationSeconds?: number;
    displayCredit?: boolean;
    thumbnailUrl?: string;
    role?: string;
    mediaId?: string;
    iframeUrl?: string;
    scriptName?: string;
    scriptUrl?: string;
    blockAds?: boolean;
    html?: string;
    embedType?: string;
    explicit?: boolean;
    clean?: boolean;
    thumbnailImageUrl?: string;
    linkText?: string;
    linkPrefix?: string;
    shortUrl?: string;
    imageType?: string;
    suppliersReference?: string;
    mediaApiUri?: string;
    copyright?: string;
    mimeType?: string;
    url?: string;
    originalUrl?: string;
    id?: string;
    attribution?: string;
    description?: string;
    title?: string;
    contentAuthSystem?: string;
    alt?: string;
    picdarUrn?: string;
    comment?: string;
    witnessEmbedType?: string;
    authorName?: string;
    authorUsername?: string;
    authorWitnessProfileUrl?: string;
    authorGuardianProfileUrl?: string;
    apiUrl?: string;
    dateCreated?: CapiDateTime.ICapiDateTime;
    youtubeUrl?: string;
    youtubeSource?: string;
    youtubeTitle?: string;
    youtubeDescription?: string;
    youtubeAuthorName?: string;
    youtubeHtml?: string;
    venue?: string;
    location?: string;
    identifier?: string;
    price?: string;
    start?: CapiDateTime.ICapiDateTime;
    end?: CapiDateTime.ICapiDateTime;
    safeEmbedCode?: boolean;
}
export interface IAssetFieldsArgs {
    aspectRatio?: string;
    altText?: string;
    isInappropriateForAdverts?: boolean;
    caption?: string;
    credit?: string;
    embeddable?: boolean;
    photographer?: string;
    source?: string;
    stillImageUrl?: string;
    width?: number;
    height?: number;
    name?: string;
    secureFile?: string;
    isMaster?: boolean;
    sizeInBytes?: number | string | thrift.Int64;
    durationMinutes?: number;
    durationSeconds?: number;
    displayCredit?: boolean;
    thumbnailUrl?: string;
    role?: string;
    mediaId?: string;
    iframeUrl?: string;
    scriptName?: string;
    scriptUrl?: string;
    blockAds?: boolean;
    html?: string;
    embedType?: string;
    explicit?: boolean;
    clean?: boolean;
    thumbnailImageUrl?: string;
    linkText?: string;
    linkPrefix?: string;
    shortUrl?: string;
    imageType?: string;
    suppliersReference?: string;
    mediaApiUri?: string;
    copyright?: string;
    mimeType?: string;
    url?: string;
    originalUrl?: string;
    id?: string;
    attribution?: string;
    description?: string;
    title?: string;
    contentAuthSystem?: string;
    alt?: string;
    picdarUrn?: string;
    comment?: string;
    witnessEmbedType?: string;
    authorName?: string;
    authorUsername?: string;
    authorWitnessProfileUrl?: string;
    authorGuardianProfileUrl?: string;
    apiUrl?: string;
    dateCreated?: CapiDateTime.ICapiDateTimeArgs;
    youtubeUrl?: string;
    youtubeSource?: string;
    youtubeTitle?: string;
    youtubeDescription?: string;
    youtubeAuthorName?: string;
    youtubeHtml?: string;
    venue?: string;
    location?: string;
    identifier?: string;
    price?: string;
    start?: CapiDateTime.ICapiDateTimeArgs;
    end?: CapiDateTime.ICapiDateTimeArgs;
    safeEmbedCode?: boolean;
}
export const AssetFieldsCodec: thrift.IStructCodec<IAssetFieldsArgs, IAssetFields> = {
    encode(args: IAssetFieldsArgs, output: thrift.TProtocol): void {
        const obj: any = {
            aspectRatio: args.aspectRatio,
            altText: args.altText,
            isInappropriateForAdverts: args.isInappropriateForAdverts,
            caption: args.caption,
            credit: args.credit,
            embeddable: args.embeddable,
            photographer: args.photographer,
            source: args.source,
            stillImageUrl: args.stillImageUrl,
            width: args.width,
            height: args.height,
            name: args.name,
            secureFile: args.secureFile,
            isMaster: args.isMaster,
            sizeInBytes: (typeof args.sizeInBytes === "number" ? new thrift.Int64(args.sizeInBytes) : typeof args.sizeInBytes === "string" ? thrift.Int64.fromDecimalString(args.sizeInBytes) : args.sizeInBytes),
            durationMinutes: args.durationMinutes,
            durationSeconds: args.durationSeconds,
            displayCredit: args.displayCredit,
            thumbnailUrl: args.thumbnailUrl,
            role: args.role,
            mediaId: args.mediaId,
            iframeUrl: args.iframeUrl,
            scriptName: args.scriptName,
            scriptUrl: args.scriptUrl,
            blockAds: args.blockAds,
            html: args.html,
            embedType: args.embedType,
            explicit: args.explicit,
            clean: args.clean,
            thumbnailImageUrl: args.thumbnailImageUrl,
            linkText: args.linkText,
            linkPrefix: args.linkPrefix,
            shortUrl: args.shortUrl,
            imageType: args.imageType,
            suppliersReference: args.suppliersReference,
            mediaApiUri: args.mediaApiUri,
            copyright: args.copyright,
            mimeType: args.mimeType,
            url: args.url,
            originalUrl: args.originalUrl,
            id: args.id,
            attribution: args.attribution,
            description: args.description,
            title: args.title,
            contentAuthSystem: args.contentAuthSystem,
            alt: args.alt,
            picdarUrn: args.picdarUrn,
            comment: args.comment,
            witnessEmbedType: args.witnessEmbedType,
            authorName: args.authorName,
            authorUsername: args.authorUsername,
            authorWitnessProfileUrl: args.authorWitnessProfileUrl,
            authorGuardianProfileUrl: args.authorGuardianProfileUrl,
            apiUrl: args.apiUrl,
            dateCreated: args.dateCreated,
            youtubeUrl: args.youtubeUrl,
            youtubeSource: args.youtubeSource,
            youtubeTitle: args.youtubeTitle,
            youtubeDescription: args.youtubeDescription,
            youtubeAuthorName: args.youtubeAuthorName,
            youtubeHtml: args.youtubeHtml,
            venue: args.venue,
            location: args.location,
            identifier: args.identifier,
            price: args.price,
            start: args.start,
            end: args.end,
            safeEmbedCode: args.safeEmbedCode
        };
        output.writeStructBegin("AssetFields");
        if (obj.aspectRatio != null) {
            output.writeFieldBegin("aspectRatio", thrift.TType.STRING, 1);
            output.writeString(obj.aspectRatio);
            output.writeFieldEnd();
        }
        if (obj.altText != null) {
            output.writeFieldBegin("altText", thrift.TType.STRING, 2);
            output.writeString(obj.altText);
            output.writeFieldEnd();
        }
        if (obj.isInappropriateForAdverts != null) {
            output.writeFieldBegin("isInappropriateForAdverts", thrift.TType.BOOL, 3);
            output.writeBool(obj.isInappropriateForAdverts);
            output.writeFieldEnd();
        }
        if (obj.caption != null) {
            output.writeFieldBegin("caption", thrift.TType.STRING, 4);
            output.writeString(obj.caption);
            output.writeFieldEnd();
        }
        if (obj.credit != null) {
            output.writeFieldBegin("credit", thrift.TType.STRING, 5);
            output.writeString(obj.credit);
            output.writeFieldEnd();
        }
        if (obj.embeddable != null) {
            output.writeFieldBegin("embeddable", thrift.TType.BOOL, 6);
            output.writeBool(obj.embeddable);
            output.writeFieldEnd();
        }
        if (obj.photographer != null) {
            output.writeFieldBegin("photographer", thrift.TType.STRING, 7);
            output.writeString(obj.photographer);
            output.writeFieldEnd();
        }
        if (obj.source != null) {
            output.writeFieldBegin("source", thrift.TType.STRING, 8);
            output.writeString(obj.source);
            output.writeFieldEnd();
        }
        if (obj.stillImageUrl != null) {
            output.writeFieldBegin("stillImageUrl", thrift.TType.STRING, 9);
            output.writeString(obj.stillImageUrl);
            output.writeFieldEnd();
        }
        if (obj.width != null) {
            output.writeFieldBegin("width", thrift.TType.I32, 10);
            output.writeI32(obj.width);
            output.writeFieldEnd();
        }
        if (obj.height != null) {
            output.writeFieldBegin("height", thrift.TType.I32, 11);
            output.writeI32(obj.height);
            output.writeFieldEnd();
        }
        if (obj.name != null) {
            output.writeFieldBegin("name", thrift.TType.STRING, 12);
            output.writeString(obj.name);
            output.writeFieldEnd();
        }
        if (obj.secureFile != null) {
            output.writeFieldBegin("secureFile", thrift.TType.STRING, 13);
            output.writeString(obj.secureFile);
            output.writeFieldEnd();
        }
        if (obj.isMaster != null) {
            output.writeFieldBegin("isMaster", thrift.TType.BOOL, 14);
            output.writeBool(obj.isMaster);
            output.writeFieldEnd();
        }
        if (obj.sizeInBytes != null) {
            output.writeFieldBegin("sizeInBytes", thrift.TType.I64, 15);
            output.writeI64((typeof obj.sizeInBytes === "number" ? new thrift.Int64(obj.sizeInBytes) : typeof obj.sizeInBytes === "string" ? thrift.Int64.fromDecimalString(obj.sizeInBytes) : obj.sizeInBytes));
            output.writeFieldEnd();
        }
        if (obj.durationMinutes != null) {
            output.writeFieldBegin("durationMinutes", thrift.TType.I32, 16);
            output.writeI32(obj.durationMinutes);
            output.writeFieldEnd();
        }
        if (obj.durationSeconds != null) {
            output.writeFieldBegin("durationSeconds", thrift.TType.I32, 17);
            output.writeI32(obj.durationSeconds);
            output.writeFieldEnd();
        }
        if (obj.displayCredit != null) {
            output.writeFieldBegin("displayCredit", thrift.TType.BOOL, 18);
            output.writeBool(obj.displayCredit);
            output.writeFieldEnd();
        }
        if (obj.thumbnailUrl != null) {
            output.writeFieldBegin("thumbnailUrl", thrift.TType.STRING, 19);
            output.writeString(obj.thumbnailUrl);
            output.writeFieldEnd();
        }
        if (obj.role != null) {
            output.writeFieldBegin("role", thrift.TType.STRING, 20);
            output.writeString(obj.role);
            output.writeFieldEnd();
        }
        if (obj.mediaId != null) {
            output.writeFieldBegin("mediaId", thrift.TType.STRING, 21);
            output.writeString(obj.mediaId);
            output.writeFieldEnd();
        }
        if (obj.iframeUrl != null) {
            output.writeFieldBegin("iframeUrl", thrift.TType.STRING, 22);
            output.writeString(obj.iframeUrl);
            output.writeFieldEnd();
        }
        if (obj.scriptName != null) {
            output.writeFieldBegin("scriptName", thrift.TType.STRING, 23);
            output.writeString(obj.scriptName);
            output.writeFieldEnd();
        }
        if (obj.scriptUrl != null) {
            output.writeFieldBegin("scriptUrl", thrift.TType.STRING, 24);
            output.writeString(obj.scriptUrl);
            output.writeFieldEnd();
        }
        if (obj.blockAds != null) {
            output.writeFieldBegin("blockAds", thrift.TType.BOOL, 25);
            output.writeBool(obj.blockAds);
            output.writeFieldEnd();
        }
        if (obj.html != null) {
            output.writeFieldBegin("html", thrift.TType.STRING, 26);
            output.writeString(obj.html);
            output.writeFieldEnd();
        }
        if (obj.embedType != null) {
            output.writeFieldBegin("embedType", thrift.TType.STRING, 27);
            output.writeString(obj.embedType);
            output.writeFieldEnd();
        }
        if (obj.explicit != null) {
            output.writeFieldBegin("explicit", thrift.TType.BOOL, 28);
            output.writeBool(obj.explicit);
            output.writeFieldEnd();
        }
        if (obj.clean != null) {
            output.writeFieldBegin("clean", thrift.TType.BOOL, 29);
            output.writeBool(obj.clean);
            output.writeFieldEnd();
        }
        if (obj.thumbnailImageUrl != null) {
            output.writeFieldBegin("thumbnailImageUrl", thrift.TType.STRING, 30);
            output.writeString(obj.thumbnailImageUrl);
            output.writeFieldEnd();
        }
        if (obj.linkText != null) {
            output.writeFieldBegin("linkText", thrift.TType.STRING, 31);
            output.writeString(obj.linkText);
            output.writeFieldEnd();
        }
        if (obj.linkPrefix != null) {
            output.writeFieldBegin("linkPrefix", thrift.TType.STRING, 32);
            output.writeString(obj.linkPrefix);
            output.writeFieldEnd();
        }
        if (obj.shortUrl != null) {
            output.writeFieldBegin("shortUrl", thrift.TType.STRING, 33);
            output.writeString(obj.shortUrl);
            output.writeFieldEnd();
        }
        if (obj.imageType != null) {
            output.writeFieldBegin("imageType", thrift.TType.STRING, 34);
            output.writeString(obj.imageType);
            output.writeFieldEnd();
        }
        if (obj.suppliersReference != null) {
            output.writeFieldBegin("suppliersReference", thrift.TType.STRING, 35);
            output.writeString(obj.suppliersReference);
            output.writeFieldEnd();
        }
        if (obj.mediaApiUri != null) {
            output.writeFieldBegin("mediaApiUri", thrift.TType.STRING, 36);
            output.writeString(obj.mediaApiUri);
            output.writeFieldEnd();
        }
        if (obj.copyright != null) {
            output.writeFieldBegin("copyright", thrift.TType.STRING, 37);
            output.writeString(obj.copyright);
            output.writeFieldEnd();
        }
        if (obj.mimeType != null) {
            output.writeFieldBegin("mimeType", thrift.TType.STRING, 38);
            output.writeString(obj.mimeType);
            output.writeFieldEnd();
        }
        if (obj.url != null) {
            output.writeFieldBegin("url", thrift.TType.STRING, 39);
            output.writeString(obj.url);
            output.writeFieldEnd();
        }
        if (obj.originalUrl != null) {
            output.writeFieldBegin("originalUrl", thrift.TType.STRING, 40);
            output.writeString(obj.originalUrl);
            output.writeFieldEnd();
        }
        if (obj.id != null) {
            output.writeFieldBegin("id", thrift.TType.STRING, 41);
            output.writeString(obj.id);
            output.writeFieldEnd();
        }
        if (obj.attribution != null) {
            output.writeFieldBegin("attribution", thrift.TType.STRING, 42);
            output.writeString(obj.attribution);
            output.writeFieldEnd();
        }
        if (obj.description != null) {
            output.writeFieldBegin("description", thrift.TType.STRING, 43);
            output.writeString(obj.description);
            output.writeFieldEnd();
        }
        if (obj.title != null) {
            output.writeFieldBegin("title", thrift.TType.STRING, 44);
            output.writeString(obj.title);
            output.writeFieldEnd();
        }
        if (obj.contentAuthSystem != null) {
            output.writeFieldBegin("contentAuthSystem", thrift.TType.STRING, 45);
            output.writeString(obj.contentAuthSystem);
            output.writeFieldEnd();
        }
        if (obj.alt != null) {
            output.writeFieldBegin("alt", thrift.TType.STRING, 46);
            output.writeString(obj.alt);
            output.writeFieldEnd();
        }
        if (obj.picdarUrn != null) {
            output.writeFieldBegin("picdarUrn", thrift.TType.STRING, 47);
            output.writeString(obj.picdarUrn);
            output.writeFieldEnd();
        }
        if (obj.comment != null) {
            output.writeFieldBegin("comment", thrift.TType.STRING, 48);
            output.writeString(obj.comment);
            output.writeFieldEnd();
        }
        if (obj.witnessEmbedType != null) {
            output.writeFieldBegin("witnessEmbedType", thrift.TType.STRING, 49);
            output.writeString(obj.witnessEmbedType);
            output.writeFieldEnd();
        }
        if (obj.authorName != null) {
            output.writeFieldBegin("authorName", thrift.TType.STRING, 50);
            output.writeString(obj.authorName);
            output.writeFieldEnd();
        }
        if (obj.authorUsername != null) {
            output.writeFieldBegin("authorUsername", thrift.TType.STRING, 51);
            output.writeString(obj.authorUsername);
            output.writeFieldEnd();
        }
        if (obj.authorWitnessProfileUrl != null) {
            output.writeFieldBegin("authorWitnessProfileUrl", thrift.TType.STRING, 52);
            output.writeString(obj.authorWitnessProfileUrl);
            output.writeFieldEnd();
        }
        if (obj.authorGuardianProfileUrl != null) {
            output.writeFieldBegin("authorGuardianProfileUrl", thrift.TType.STRING, 53);
            output.writeString(obj.authorGuardianProfileUrl);
            output.writeFieldEnd();
        }
        if (obj.apiUrl != null) {
            output.writeFieldBegin("apiUrl", thrift.TType.STRING, 54);
            output.writeString(obj.apiUrl);
            output.writeFieldEnd();
        }
        if (obj.dateCreated != null) {
            output.writeFieldBegin("dateCreated", thrift.TType.STRUCT, 55);
            CapiDateTime.CapiDateTimeCodec.encode(obj.dateCreated, output);
            output.writeFieldEnd();
        }
        if (obj.youtubeUrl != null) {
            output.writeFieldBegin("youtubeUrl", thrift.TType.STRING, 56);
            output.writeString(obj.youtubeUrl);
            output.writeFieldEnd();
        }
        if (obj.youtubeSource != null) {
            output.writeFieldBegin("youtubeSource", thrift.TType.STRING, 57);
            output.writeString(obj.youtubeSource);
            output.writeFieldEnd();
        }
        if (obj.youtubeTitle != null) {
            output.writeFieldBegin("youtubeTitle", thrift.TType.STRING, 58);
            output.writeString(obj.youtubeTitle);
            output.writeFieldEnd();
        }
        if (obj.youtubeDescription != null) {
            output.writeFieldBegin("youtubeDescription", thrift.TType.STRING, 59);
            output.writeString(obj.youtubeDescription);
            output.writeFieldEnd();
        }
        if (obj.youtubeAuthorName != null) {
            output.writeFieldBegin("youtubeAuthorName", thrift.TType.STRING, 60);
            output.writeString(obj.youtubeAuthorName);
            output.writeFieldEnd();
        }
        if (obj.youtubeHtml != null) {
            output.writeFieldBegin("youtubeHtml", thrift.TType.STRING, 61);
            output.writeString(obj.youtubeHtml);
            output.writeFieldEnd();
        }
        if (obj.venue != null) {
            output.writeFieldBegin("venue", thrift.TType.STRING, 62);
            output.writeString(obj.venue);
            output.writeFieldEnd();
        }
        if (obj.location != null) {
            output.writeFieldBegin("location", thrift.TType.STRING, 63);
            output.writeString(obj.location);
            output.writeFieldEnd();
        }
        if (obj.identifier != null) {
            output.writeFieldBegin("identifier", thrift.TType.STRING, 64);
            output.writeString(obj.identifier);
            output.writeFieldEnd();
        }
        if (obj.price != null) {
            output.writeFieldBegin("price", thrift.TType.STRING, 65);
            output.writeString(obj.price);
            output.writeFieldEnd();
        }
        if (obj.start != null) {
            output.writeFieldBegin("start", thrift.TType.STRUCT, 66);
            CapiDateTime.CapiDateTimeCodec.encode(obj.start, output);
            output.writeFieldEnd();
        }
        if (obj.end != null) {
            output.writeFieldBegin("end", thrift.TType.STRUCT, 67);
            CapiDateTime.CapiDateTimeCodec.encode(obj.end, output);
            output.writeFieldEnd();
        }
        if (obj.safeEmbedCode != null) {
            output.writeFieldBegin("safeEmbedCode", thrift.TType.BOOL, 68);
            output.writeBool(obj.safeEmbedCode);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IAssetFields {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_1: string = input.readString();
                        _args.aspectRatio = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: string = input.readString();
                        _args.altText = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_3: boolean = input.readBool();
                        _args.isInappropriateForAdverts = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRING) {
                        const value_4: string = input.readString();
                        _args.caption = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.STRING) {
                        const value_5: string = input.readString();
                        _args.credit = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_6: boolean = input.readBool();
                        _args.embeddable = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.TType.STRING) {
                        const value_7: string = input.readString();
                        _args.photographer = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.TType.STRING) {
                        const value_8: string = input.readString();
                        _args.source = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.TType.STRING) {
                        const value_9: string = input.readString();
                        _args.stillImageUrl = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.TType.I32) {
                        const value_10: number = input.readI32();
                        _args.width = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.TType.I32) {
                        const value_11: number = input.readI32();
                        _args.height = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.TType.STRING) {
                        const value_12: string = input.readString();
                        _args.name = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.TType.STRING) {
                        const value_13: string = input.readString();
                        _args.secureFile = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_14: boolean = input.readBool();
                        _args.isMaster = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.TType.I64) {
                        const value_15: thrift.Int64 = input.readI64();
                        _args.sizeInBytes = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 16:
                    if (fieldType === thrift.TType.I32) {
                        const value_16: number = input.readI32();
                        _args.durationMinutes = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 17:
                    if (fieldType === thrift.TType.I32) {
                        const value_17: number = input.readI32();
                        _args.durationSeconds = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 18:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_18: boolean = input.readBool();
                        _args.displayCredit = value_18;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 19:
                    if (fieldType === thrift.TType.STRING) {
                        const value_19: string = input.readString();
                        _args.thumbnailUrl = value_19;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 20:
                    if (fieldType === thrift.TType.STRING) {
                        const value_20: string = input.readString();
                        _args.role = value_20;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 21:
                    if (fieldType === thrift.TType.STRING) {
                        const value_21: string = input.readString();
                        _args.mediaId = value_21;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 22:
                    if (fieldType === thrift.TType.STRING) {
                        const value_22: string = input.readString();
                        _args.iframeUrl = value_22;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 23:
                    if (fieldType === thrift.TType.STRING) {
                        const value_23: string = input.readString();
                        _args.scriptName = value_23;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 24:
                    if (fieldType === thrift.TType.STRING) {
                        const value_24: string = input.readString();
                        _args.scriptUrl = value_24;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 25:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_25: boolean = input.readBool();
                        _args.blockAds = value_25;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 26:
                    if (fieldType === thrift.TType.STRING) {
                        const value_26: string = input.readString();
                        _args.html = value_26;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 27:
                    if (fieldType === thrift.TType.STRING) {
                        const value_27: string = input.readString();
                        _args.embedType = value_27;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 28:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_28: boolean = input.readBool();
                        _args.explicit = value_28;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 29:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_29: boolean = input.readBool();
                        _args.clean = value_29;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 30:
                    if (fieldType === thrift.TType.STRING) {
                        const value_30: string = input.readString();
                        _args.thumbnailImageUrl = value_30;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 31:
                    if (fieldType === thrift.TType.STRING) {
                        const value_31: string = input.readString();
                        _args.linkText = value_31;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 32:
                    if (fieldType === thrift.TType.STRING) {
                        const value_32: string = input.readString();
                        _args.linkPrefix = value_32;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 33:
                    if (fieldType === thrift.TType.STRING) {
                        const value_33: string = input.readString();
                        _args.shortUrl = value_33;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 34:
                    if (fieldType === thrift.TType.STRING) {
                        const value_34: string = input.readString();
                        _args.imageType = value_34;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 35:
                    if (fieldType === thrift.TType.STRING) {
                        const value_35: string = input.readString();
                        _args.suppliersReference = value_35;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 36:
                    if (fieldType === thrift.TType.STRING) {
                        const value_36: string = input.readString();
                        _args.mediaApiUri = value_36;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 37:
                    if (fieldType === thrift.TType.STRING) {
                        const value_37: string = input.readString();
                        _args.copyright = value_37;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 38:
                    if (fieldType === thrift.TType.STRING) {
                        const value_38: string = input.readString();
                        _args.mimeType = value_38;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 39:
                    if (fieldType === thrift.TType.STRING) {
                        const value_39: string = input.readString();
                        _args.url = value_39;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 40:
                    if (fieldType === thrift.TType.STRING) {
                        const value_40: string = input.readString();
                        _args.originalUrl = value_40;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 41:
                    if (fieldType === thrift.TType.STRING) {
                        const value_41: string = input.readString();
                        _args.id = value_41;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 42:
                    if (fieldType === thrift.TType.STRING) {
                        const value_42: string = input.readString();
                        _args.attribution = value_42;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 43:
                    if (fieldType === thrift.TType.STRING) {
                        const value_43: string = input.readString();
                        _args.description = value_43;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 44:
                    if (fieldType === thrift.TType.STRING) {
                        const value_44: string = input.readString();
                        _args.title = value_44;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 45:
                    if (fieldType === thrift.TType.STRING) {
                        const value_45: string = input.readString();
                        _args.contentAuthSystem = value_45;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 46:
                    if (fieldType === thrift.TType.STRING) {
                        const value_46: string = input.readString();
                        _args.alt = value_46;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 47:
                    if (fieldType === thrift.TType.STRING) {
                        const value_47: string = input.readString();
                        _args.picdarUrn = value_47;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 48:
                    if (fieldType === thrift.TType.STRING) {
                        const value_48: string = input.readString();
                        _args.comment = value_48;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 49:
                    if (fieldType === thrift.TType.STRING) {
                        const value_49: string = input.readString();
                        _args.witnessEmbedType = value_49;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 50:
                    if (fieldType === thrift.TType.STRING) {
                        const value_50: string = input.readString();
                        _args.authorName = value_50;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 51:
                    if (fieldType === thrift.TType.STRING) {
                        const value_51: string = input.readString();
                        _args.authorUsername = value_51;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 52:
                    if (fieldType === thrift.TType.STRING) {
                        const value_52: string = input.readString();
                        _args.authorWitnessProfileUrl = value_52;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 53:
                    if (fieldType === thrift.TType.STRING) {
                        const value_53: string = input.readString();
                        _args.authorGuardianProfileUrl = value_53;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 54:
                    if (fieldType === thrift.TType.STRING) {
                        const value_54: string = input.readString();
                        _args.apiUrl = value_54;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 55:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_55: CapiDateTime.ICapiDateTime = CapiDateTime.CapiDateTimeCodec.decode(input);
                        _args.dateCreated = value_55;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 56:
                    if (fieldType === thrift.TType.STRING) {
                        const value_56: string = input.readString();
                        _args.youtubeUrl = value_56;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 57:
                    if (fieldType === thrift.TType.STRING) {
                        const value_57: string = input.readString();
                        _args.youtubeSource = value_57;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 58:
                    if (fieldType === thrift.TType.STRING) {
                        const value_58: string = input.readString();
                        _args.youtubeTitle = value_58;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 59:
                    if (fieldType === thrift.TType.STRING) {
                        const value_59: string = input.readString();
                        _args.youtubeDescription = value_59;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 60:
                    if (fieldType === thrift.TType.STRING) {
                        const value_60: string = input.readString();
                        _args.youtubeAuthorName = value_60;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 61:
                    if (fieldType === thrift.TType.STRING) {
                        const value_61: string = input.readString();
                        _args.youtubeHtml = value_61;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 62:
                    if (fieldType === thrift.TType.STRING) {
                        const value_62: string = input.readString();
                        _args.venue = value_62;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 63:
                    if (fieldType === thrift.TType.STRING) {
                        const value_63: string = input.readString();
                        _args.location = value_63;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 64:
                    if (fieldType === thrift.TType.STRING) {
                        const value_64: string = input.readString();
                        _args.identifier = value_64;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 65:
                    if (fieldType === thrift.TType.STRING) {
                        const value_65: string = input.readString();
                        _args.price = value_65;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 66:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_66: CapiDateTime.ICapiDateTime = CapiDateTime.CapiDateTimeCodec.decode(input);
                        _args.start = value_66;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 67:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_67: CapiDateTime.ICapiDateTime = CapiDateTime.CapiDateTimeCodec.decode(input);
                        _args.end = value_67;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 68:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_68: boolean = input.readBool();
                        _args.safeEmbedCode = value_68;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            aspectRatio: _args.aspectRatio,
            altText: _args.altText,
            isInappropriateForAdverts: _args.isInappropriateForAdverts,
            caption: _args.caption,
            credit: _args.credit,
            embeddable: _args.embeddable,
            photographer: _args.photographer,
            source: _args.source,
            stillImageUrl: _args.stillImageUrl,
            width: _args.width,
            height: _args.height,
            name: _args.name,
            secureFile: _args.secureFile,
            isMaster: _args.isMaster,
            sizeInBytes: _args.sizeInBytes,
            durationMinutes: _args.durationMinutes,
            durationSeconds: _args.durationSeconds,
            displayCredit: _args.displayCredit,
            thumbnailUrl: _args.thumbnailUrl,
            role: _args.role,
            mediaId: _args.mediaId,
            iframeUrl: _args.iframeUrl,
            scriptName: _args.scriptName,
            scriptUrl: _args.scriptUrl,
            blockAds: _args.blockAds,
            html: _args.html,
            embedType: _args.embedType,
            explicit: _args.explicit,
            clean: _args.clean,
            thumbnailImageUrl: _args.thumbnailImageUrl,
            linkText: _args.linkText,
            linkPrefix: _args.linkPrefix,
            shortUrl: _args.shortUrl,
            imageType: _args.imageType,
            suppliersReference: _args.suppliersReference,
            mediaApiUri: _args.mediaApiUri,
            copyright: _args.copyright,
            mimeType: _args.mimeType,
            url: _args.url,
            originalUrl: _args.originalUrl,
            id: _args.id,
            attribution: _args.attribution,
            description: _args.description,
            title: _args.title,
            contentAuthSystem: _args.contentAuthSystem,
            alt: _args.alt,
            picdarUrn: _args.picdarUrn,
            comment: _args.comment,
            witnessEmbedType: _args.witnessEmbedType,
            authorName: _args.authorName,
            authorUsername: _args.authorUsername,
            authorWitnessProfileUrl: _args.authorWitnessProfileUrl,
            authorGuardianProfileUrl: _args.authorGuardianProfileUrl,
            apiUrl: _args.apiUrl,
            dateCreated: _args.dateCreated,
            youtubeUrl: _args.youtubeUrl,
            youtubeSource: _args.youtubeSource,
            youtubeTitle: _args.youtubeTitle,
            youtubeDescription: _args.youtubeDescription,
            youtubeAuthorName: _args.youtubeAuthorName,
            youtubeHtml: _args.youtubeHtml,
            venue: _args.venue,
            location: _args.location,
            identifier: _args.identifier,
            price: _args.price,
            start: _args.start,
            end: _args.end,
            safeEmbedCode: _args.safeEmbedCode
        };
    }
};
export class AssetFields extends thrift.StructLike implements IAssetFields {
    public aspectRatio?: string;
    public altText?: string;
    public isInappropriateForAdverts?: boolean;
    public caption?: string;
    public credit?: string;
    public embeddable?: boolean;
    public photographer?: string;
    public source?: string;
    public stillImageUrl?: string;
    public width?: number;
    public height?: number;
    public name?: string;
    public secureFile?: string;
    public isMaster?: boolean;
    public sizeInBytes?: thrift.Int64;
    public durationMinutes?: number;
    public durationSeconds?: number;
    public displayCredit?: boolean;
    public thumbnailUrl?: string;
    public role?: string;
    public mediaId?: string;
    public iframeUrl?: string;
    public scriptName?: string;
    public scriptUrl?: string;
    public blockAds?: boolean;
    public html?: string;
    public embedType?: string;
    public explicit?: boolean;
    public clean?: boolean;
    public thumbnailImageUrl?: string;
    public linkText?: string;
    public linkPrefix?: string;
    public shortUrl?: string;
    public imageType?: string;
    public suppliersReference?: string;
    public mediaApiUri?: string;
    public copyright?: string;
    public mimeType?: string;
    public url?: string;
    public originalUrl?: string;
    public id?: string;
    public attribution?: string;
    public description?: string;
    public title?: string;
    public contentAuthSystem?: string;
    public alt?: string;
    public picdarUrn?: string;
    public comment?: string;
    public witnessEmbedType?: string;
    public authorName?: string;
    public authorUsername?: string;
    public authorWitnessProfileUrl?: string;
    public authorGuardianProfileUrl?: string;
    public apiUrl?: string;
    public dateCreated?: CapiDateTime.ICapiDateTime;
    public youtubeUrl?: string;
    public youtubeSource?: string;
    public youtubeTitle?: string;
    public youtubeDescription?: string;
    public youtubeAuthorName?: string;
    public youtubeHtml?: string;
    public venue?: string;
    public location?: string;
    public identifier?: string;
    public price?: string;
    public start?: CapiDateTime.ICapiDateTime;
    public end?: CapiDateTime.ICapiDateTime;
    public safeEmbedCode?: boolean;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IAssetFieldsArgs = {}) {
        super();
        if (args.aspectRatio != null) {
            const value_69: string = args.aspectRatio;
            this.aspectRatio = value_69;
        }
        if (args.altText != null) {
            const value_70: string = args.altText;
            this.altText = value_70;
        }
        if (args.isInappropriateForAdverts != null) {
            const value_71: boolean = args.isInappropriateForAdverts;
            this.isInappropriateForAdverts = value_71;
        }
        if (args.caption != null) {
            const value_72: string = args.caption;
            this.caption = value_72;
        }
        if (args.credit != null) {
            const value_73: string = args.credit;
            this.credit = value_73;
        }
        if (args.embeddable != null) {
            const value_74: boolean = args.embeddable;
            this.embeddable = value_74;
        }
        if (args.photographer != null) {
            const value_75: string = args.photographer;
            this.photographer = value_75;
        }
        if (args.source != null) {
            const value_76: string = args.source;
            this.source = value_76;
        }
        if (args.stillImageUrl != null) {
            const value_77: string = args.stillImageUrl;
            this.stillImageUrl = value_77;
        }
        if (args.width != null) {
            const value_78: number = args.width;
            this.width = value_78;
        }
        if (args.height != null) {
            const value_79: number = args.height;
            this.height = value_79;
        }
        if (args.name != null) {
            const value_80: string = args.name;
            this.name = value_80;
        }
        if (args.secureFile != null) {
            const value_81: string = args.secureFile;
            this.secureFile = value_81;
        }
        if (args.isMaster != null) {
            const value_82: boolean = args.isMaster;
            this.isMaster = value_82;
        }
        if (args.sizeInBytes != null) {
            const value_83: thrift.Int64 = (typeof args.sizeInBytes === "number" ? new thrift.Int64(args.sizeInBytes) : typeof args.sizeInBytes === "string" ? thrift.Int64.fromDecimalString(args.sizeInBytes) : args.sizeInBytes);
            this.sizeInBytes = value_83;
        }
        if (args.durationMinutes != null) {
            const value_84: number = args.durationMinutes;
            this.durationMinutes = value_84;
        }
        if (args.durationSeconds != null) {
            const value_85: number = args.durationSeconds;
            this.durationSeconds = value_85;
        }
        if (args.displayCredit != null) {
            const value_86: boolean = args.displayCredit;
            this.displayCredit = value_86;
        }
        if (args.thumbnailUrl != null) {
            const value_87: string = args.thumbnailUrl;
            this.thumbnailUrl = value_87;
        }
        if (args.role != null) {
            const value_88: string = args.role;
            this.role = value_88;
        }
        if (args.mediaId != null) {
            const value_89: string = args.mediaId;
            this.mediaId = value_89;
        }
        if (args.iframeUrl != null) {
            const value_90: string = args.iframeUrl;
            this.iframeUrl = value_90;
        }
        if (args.scriptName != null) {
            const value_91: string = args.scriptName;
            this.scriptName = value_91;
        }
        if (args.scriptUrl != null) {
            const value_92: string = args.scriptUrl;
            this.scriptUrl = value_92;
        }
        if (args.blockAds != null) {
            const value_93: boolean = args.blockAds;
            this.blockAds = value_93;
        }
        if (args.html != null) {
            const value_94: string = args.html;
            this.html = value_94;
        }
        if (args.embedType != null) {
            const value_95: string = args.embedType;
            this.embedType = value_95;
        }
        if (args.explicit != null) {
            const value_96: boolean = args.explicit;
            this.explicit = value_96;
        }
        if (args.clean != null) {
            const value_97: boolean = args.clean;
            this.clean = value_97;
        }
        if (args.thumbnailImageUrl != null) {
            const value_98: string = args.thumbnailImageUrl;
            this.thumbnailImageUrl = value_98;
        }
        if (args.linkText != null) {
            const value_99: string = args.linkText;
            this.linkText = value_99;
        }
        if (args.linkPrefix != null) {
            const value_100: string = args.linkPrefix;
            this.linkPrefix = value_100;
        }
        if (args.shortUrl != null) {
            const value_101: string = args.shortUrl;
            this.shortUrl = value_101;
        }
        if (args.imageType != null) {
            const value_102: string = args.imageType;
            this.imageType = value_102;
        }
        if (args.suppliersReference != null) {
            const value_103: string = args.suppliersReference;
            this.suppliersReference = value_103;
        }
        if (args.mediaApiUri != null) {
            const value_104: string = args.mediaApiUri;
            this.mediaApiUri = value_104;
        }
        if (args.copyright != null) {
            const value_105: string = args.copyright;
            this.copyright = value_105;
        }
        if (args.mimeType != null) {
            const value_106: string = args.mimeType;
            this.mimeType = value_106;
        }
        if (args.url != null) {
            const value_107: string = args.url;
            this.url = value_107;
        }
        if (args.originalUrl != null) {
            const value_108: string = args.originalUrl;
            this.originalUrl = value_108;
        }
        if (args.id != null) {
            const value_109: string = args.id;
            this.id = value_109;
        }
        if (args.attribution != null) {
            const value_110: string = args.attribution;
            this.attribution = value_110;
        }
        if (args.description != null) {
            const value_111: string = args.description;
            this.description = value_111;
        }
        if (args.title != null) {
            const value_112: string = args.title;
            this.title = value_112;
        }
        if (args.contentAuthSystem != null) {
            const value_113: string = args.contentAuthSystem;
            this.contentAuthSystem = value_113;
        }
        if (args.alt != null) {
            const value_114: string = args.alt;
            this.alt = value_114;
        }
        if (args.picdarUrn != null) {
            const value_115: string = args.picdarUrn;
            this.picdarUrn = value_115;
        }
        if (args.comment != null) {
            const value_116: string = args.comment;
            this.comment = value_116;
        }
        if (args.witnessEmbedType != null) {
            const value_117: string = args.witnessEmbedType;
            this.witnessEmbedType = value_117;
        }
        if (args.authorName != null) {
            const value_118: string = args.authorName;
            this.authorName = value_118;
        }
        if (args.authorUsername != null) {
            const value_119: string = args.authorUsername;
            this.authorUsername = value_119;
        }
        if (args.authorWitnessProfileUrl != null) {
            const value_120: string = args.authorWitnessProfileUrl;
            this.authorWitnessProfileUrl = value_120;
        }
        if (args.authorGuardianProfileUrl != null) {
            const value_121: string = args.authorGuardianProfileUrl;
            this.authorGuardianProfileUrl = value_121;
        }
        if (args.apiUrl != null) {
            const value_122: string = args.apiUrl;
            this.apiUrl = value_122;
        }
        if (args.dateCreated != null) {
            const value_123: CapiDateTime.ICapiDateTime = new CapiDateTime.CapiDateTime(args.dateCreated);
            this.dateCreated = value_123;
        }
        if (args.youtubeUrl != null) {
            const value_124: string = args.youtubeUrl;
            this.youtubeUrl = value_124;
        }
        if (args.youtubeSource != null) {
            const value_125: string = args.youtubeSource;
            this.youtubeSource = value_125;
        }
        if (args.youtubeTitle != null) {
            const value_126: string = args.youtubeTitle;
            this.youtubeTitle = value_126;
        }
        if (args.youtubeDescription != null) {
            const value_127: string = args.youtubeDescription;
            this.youtubeDescription = value_127;
        }
        if (args.youtubeAuthorName != null) {
            const value_128: string = args.youtubeAuthorName;
            this.youtubeAuthorName = value_128;
        }
        if (args.youtubeHtml != null) {
            const value_129: string = args.youtubeHtml;
            this.youtubeHtml = value_129;
        }
        if (args.venue != null) {
            const value_130: string = args.venue;
            this.venue = value_130;
        }
        if (args.location != null) {
            const value_131: string = args.location;
            this.location = value_131;
        }
        if (args.identifier != null) {
            const value_132: string = args.identifier;
            this.identifier = value_132;
        }
        if (args.price != null) {
            const value_133: string = args.price;
            this.price = value_133;
        }
        if (args.start != null) {
            const value_134: CapiDateTime.ICapiDateTime = new CapiDateTime.CapiDateTime(args.start);
            this.start = value_134;
        }
        if (args.end != null) {
            const value_135: CapiDateTime.ICapiDateTime = new CapiDateTime.CapiDateTime(args.end);
            this.end = value_135;
        }
        if (args.safeEmbedCode != null) {
            const value_136: boolean = args.safeEmbedCode;
            this.safeEmbedCode = value_136;
        }
    }
    public static read(input: thrift.TProtocol): AssetFields {
        return new AssetFields(AssetFieldsCodec.decode(input));
    }
    public static write(args: IAssetFieldsArgs, output: thrift.TProtocol): void {
        return AssetFieldsCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return AssetFieldsCodec.encode(this, output);
    }
}
