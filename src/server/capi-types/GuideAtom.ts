/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as Image from "./Image";
import * as GuideItem from "./GuideItem";
export interface IGuideAtom {
    typeLabel?: string;
    guideImage?: Image.IImage;
    items: Array<GuideItem.IGuideItem>;
}
export interface IGuideAtomArgs {
    typeLabel?: string;
    guideImage?: Image.IImageArgs;
    items: Array<GuideItem.IGuideItemArgs>;
}
export const GuideAtomCodec: thrift.IStructCodec<IGuideAtomArgs, IGuideAtom> = {
    encode(args: IGuideAtomArgs, output: thrift.TProtocol): void {
        const obj: any = {
            typeLabel: args.typeLabel,
            guideImage: args.guideImage,
            items: args.items
        };
        output.writeStructBegin("GuideAtom");
        if (obj.typeLabel != null) {
            output.writeFieldBegin("typeLabel", thrift.TType.STRING, 1);
            output.writeString(obj.typeLabel);
            output.writeFieldEnd();
        }
        if (obj.guideImage != null) {
            output.writeFieldBegin("guideImage", thrift.TType.STRUCT, 3);
            Image.ImageCodec.encode(obj.guideImage, output);
            output.writeFieldEnd();
        }
        if (obj.items != null) {
            output.writeFieldBegin("items", thrift.TType.LIST, 4);
            output.writeListBegin(thrift.TType.STRUCT, obj.items.length);
            obj.items.forEach((value_1: GuideItem.IGuideItemArgs): void => {
                GuideItem.GuideItemCodec.encode(value_1, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[items] is unset!");
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IGuideAtom {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: string = input.readString();
                        _args.typeLabel = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_3: Image.IImage = Image.ImageCodec.decode(input);
                        _args.guideImage = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.LIST) {
                        const value_4: Array<GuideItem.IGuideItem> = new Array<GuideItem.IGuideItem>();
                        const metadata_1: thrift.IThriftList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_5: GuideItem.IGuideItem = GuideItem.GuideItemCodec.decode(input);
                            value_4.push(value_5);
                        }
                        input.readListEnd();
                        _args.items = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.items !== undefined) {
            return {
                typeLabel: _args.typeLabel,
                guideImage: _args.guideImage,
                items: _args.items
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GuideAtom from input");
        }
    }
};
export class GuideAtom extends thrift.StructLike implements IGuideAtom {
    public typeLabel?: string;
    public guideImage?: Image.IImage;
    public items: Array<GuideItem.IGuideItem>;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IGuideAtomArgs) {
        super();
        if (args.typeLabel != null) {
            const value_6: string = args.typeLabel;
            this.typeLabel = value_6;
        }
        if (args.guideImage != null) {
            const value_7: Image.IImage = new Image.Image(args.guideImage);
            this.guideImage = value_7;
        }
        if (args.items != null) {
            const value_8: Array<GuideItem.IGuideItem> = new Array<GuideItem.IGuideItem>();
            args.items.forEach((value_9: GuideItem.IGuideItemArgs): void => {
                const value_10: GuideItem.IGuideItem = new GuideItem.GuideItem(value_9);
                value_8.push(value_10);
            });
            this.items = value_8;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[items] is unset!");
        }
    }
    public static read(input: thrift.TProtocol): GuideAtom {
        return new GuideAtom(GuideAtomCodec.decode(input));
    }
    public static write(args: IGuideAtomArgs, output: thrift.TProtocol): void {
        return GuideAtomCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return GuideAtomCodec.encode(this, output);
    }
}
