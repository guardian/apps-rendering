/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as Person from "./Person";
export interface IFilm {
    title: string;
    year: number;
    imdbId: string;
    directors: Array<Person.IPerson>;
    actors: Array<Person.IPerson>;
    genre: Array<string>;
}
export interface IFilmArgs {
    title: string;
    year: number;
    imdbId: string;
    directors: Array<Person.IPersonArgs>;
    actors: Array<Person.IPersonArgs>;
    genre: Array<string>;
}
export const FilmCodec: thrift.IStructCodec<IFilmArgs, IFilm> = {
    encode(args: IFilmArgs, output: thrift.TProtocol): void {
        const obj: any = {
            title: args.title,
            year: args.year,
            imdbId: args.imdbId,
            directors: args.directors,
            actors: args.actors,
            genre: args.genre
        };
        output.writeStructBegin("Film");
        if (obj.title != null) {
            output.writeFieldBegin("title", thrift.TType.STRING, 1);
            output.writeString(obj.title);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[title] is unset!");
        }
        if (obj.year != null) {
            output.writeFieldBegin("year", thrift.TType.I16, 2);
            output.writeI16(obj.year);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[year] is unset!");
        }
        if (obj.imdbId != null) {
            output.writeFieldBegin("imdbId", thrift.TType.STRING, 3);
            output.writeString(obj.imdbId);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[imdbId] is unset!");
        }
        if (obj.directors != null) {
            output.writeFieldBegin("directors", thrift.TType.LIST, 4);
            output.writeListBegin(thrift.TType.STRUCT, obj.directors.length);
            obj.directors.forEach((value_1: Person.IPersonArgs): void => {
                Person.PersonCodec.encode(value_1, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[directors] is unset!");
        }
        if (obj.actors != null) {
            output.writeFieldBegin("actors", thrift.TType.LIST, 5);
            output.writeListBegin(thrift.TType.STRUCT, obj.actors.length);
            obj.actors.forEach((value_2: Person.IPersonArgs): void => {
                Person.PersonCodec.encode(value_2, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[actors] is unset!");
        }
        if (obj.genre != null) {
            output.writeFieldBegin("genre", thrift.TType.LIST, 6);
            output.writeListBegin(thrift.TType.STRING, obj.genre.length);
            obj.genre.forEach((value_3: string): void => {
                output.writeString(value_3);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[genre] is unset!");
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IFilm {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_4: string = input.readString();
                        _args.title = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.I16) {
                        const value_5: number = input.readI16();
                        _args.year = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_6: string = input.readString();
                        _args.imdbId = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.LIST) {
                        const value_7: Array<Person.IPerson> = new Array<Person.IPerson>();
                        const metadata_1: thrift.IThriftList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_8: Person.IPerson = Person.PersonCodec.decode(input);
                            value_7.push(value_8);
                        }
                        input.readListEnd();
                        _args.directors = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.LIST) {
                        const value_9: Array<Person.IPerson> = new Array<Person.IPerson>();
                        const metadata_2: thrift.IThriftList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_10: Person.IPerson = Person.PersonCodec.decode(input);
                            value_9.push(value_10);
                        }
                        input.readListEnd();
                        _args.actors = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.LIST) {
                        const value_11: Array<string> = new Array<string>();
                        const metadata_3: thrift.IThriftList = input.readListBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const value_12: string = input.readString();
                            value_11.push(value_12);
                        }
                        input.readListEnd();
                        _args.genre = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.title !== undefined && _args.year !== undefined && _args.imdbId !== undefined && _args.directors !== undefined && _args.actors !== undefined && _args.genre !== undefined) {
            return {
                title: _args.title,
                year: _args.year,
                imdbId: _args.imdbId,
                directors: _args.directors,
                actors: _args.actors,
                genre: _args.genre
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read Film from input");
        }
    }
};
export class Film extends thrift.StructLike implements IFilm {
    public title: string;
    public year: number;
    public imdbId: string;
    public directors: Array<Person.IPerson>;
    public actors: Array<Person.IPerson>;
    public genre: Array<string>;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IFilmArgs) {
        super();
        if (args.title != null) {
            const value_13: string = args.title;
            this.title = value_13;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[title] is unset!");
        }
        if (args.year != null) {
            const value_14: number = args.year;
            this.year = value_14;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[year] is unset!");
        }
        if (args.imdbId != null) {
            const value_15: string = args.imdbId;
            this.imdbId = value_15;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[imdbId] is unset!");
        }
        if (args.directors != null) {
            const value_16: Array<Person.IPerson> = new Array<Person.IPerson>();
            args.directors.forEach((value_19: Person.IPersonArgs): void => {
                const value_20: Person.IPerson = new Person.Person(value_19);
                value_16.push(value_20);
            });
            this.directors = value_16;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[directors] is unset!");
        }
        if (args.actors != null) {
            const value_17: Array<Person.IPerson> = new Array<Person.IPerson>();
            args.actors.forEach((value_21: Person.IPersonArgs): void => {
                const value_22: Person.IPerson = new Person.Person(value_21);
                value_17.push(value_22);
            });
            this.actors = value_17;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[actors] is unset!");
        }
        if (args.genre != null) {
            const value_18: Array<string> = new Array<string>();
            args.genre.forEach((value_23: string): void => {
                const value_24: string = value_23;
                value_18.push(value_24);
            });
            this.genre = value_18;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[genre] is unset!");
        }
    }
    public static read(input: thrift.TProtocol): Film {
        return new Film(FilmCodec.decode(input));
    }
    public static write(args: IFilmArgs, output: thrift.TProtocol): void {
        return FilmCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return FilmCodec.encode(this, output);
    }
}
