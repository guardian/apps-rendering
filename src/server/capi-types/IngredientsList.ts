/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as Ingredient from "./Ingredient";
export interface IIngredientsList {
    title?: string;
    ingredients: Array<Ingredient.IIngredient>;
}
export interface IIngredientsListArgs {
    title?: string;
    ingredients: Array<Ingredient.IIngredientArgs>;
}
export const IngredientsListCodec: thrift.IStructCodec<IIngredientsListArgs, IIngredientsList> = {
    encode(args: IIngredientsListArgs, output: thrift.TProtocol): void {
        const obj: any = {
            title: args.title,
            ingredients: args.ingredients
        };
        output.writeStructBegin("IngredientsList");
        if (obj.title != null) {
            output.writeFieldBegin("title", thrift.TType.STRING, 1);
            output.writeString(obj.title);
            output.writeFieldEnd();
        }
        if (obj.ingredients != null) {
            output.writeFieldBegin("ingredients", thrift.TType.LIST, 2);
            output.writeListBegin(thrift.TType.STRUCT, obj.ingredients.length);
            obj.ingredients.forEach((value_1: Ingredient.IIngredientArgs): void => {
                Ingredient.IngredientCodec.encode(value_1, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[ingredients] is unset!");
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IIngredientsList {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: string = input.readString();
                        _args.title = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.LIST) {
                        const value_3: Array<Ingredient.IIngredient> = new Array<Ingredient.IIngredient>();
                        const metadata_1: thrift.IThriftList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_4: Ingredient.IIngredient = Ingredient.IngredientCodec.decode(input);
                            value_3.push(value_4);
                        }
                        input.readListEnd();
                        _args.ingredients = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.ingredients !== undefined) {
            return {
                title: _args.title,
                ingredients: _args.ingredients
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read IngredientsList from input");
        }
    }
};
export class IngredientsList extends thrift.StructLike implements IIngredientsList {
    public title?: string;
    public ingredients: Array<Ingredient.IIngredient>;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IIngredientsListArgs) {
        super();
        if (args.title != null) {
            const value_5: string = args.title;
            this.title = value_5;
        }
        if (args.ingredients != null) {
            const value_6: Array<Ingredient.IIngredient> = new Array<Ingredient.IIngredient>();
            args.ingredients.forEach((value_7: Ingredient.IIngredientArgs): void => {
                const value_8: Ingredient.IIngredient = new Ingredient.Ingredient(value_7);
                value_6.push(value_8);
            });
            this.ingredients = value_6;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[ingredients] is unset!");
        }
    }
    public static read(input: thrift.TProtocol): IngredientsList {
        return new IngredientsList(IngredientsListCodec.decode(input));
    }
    public static write(args: IIngredientsListArgs, output: thrift.TProtocol): void {
        return IngredientsListCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return IngredientsListCodec.encode(this, output);
    }
}
