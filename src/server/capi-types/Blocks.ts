/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as Block from "./Block";
export interface IBlocksArgs {
    main?: Block.Block;
    body?: Array<Block.Block>;
    totalBodyBlocks?: number;
    requestedBodyBlocks?: Map<string, Array<Block.Block>>;
}
export class Blocks {
    public main?: Block.Block;
    public body?: Array<Block.Block>;
    public totalBodyBlocks?: number;
    public requestedBodyBlocks?: Map<string, Array<Block.Block>>;
    constructor(args?: IBlocksArgs) {
        if (args != null && args.main != null) {
            this.main = args.main;
        }
        if (args != null && args.body != null) {
            this.body = args.body;
        }
        if (args != null && args.totalBodyBlocks != null) {
            this.totalBodyBlocks = args.totalBodyBlocks;
        }
        if (args != null && args.requestedBodyBlocks != null) {
            this.requestedBodyBlocks = args.requestedBodyBlocks;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("Blocks");
        if (this.main != null) {
            output.writeFieldBegin("main", thrift.TType.STRUCT, 1);
            this.main.write(output);
            output.writeFieldEnd();
        }
        if (this.body != null) {
            output.writeFieldBegin("body", thrift.TType.LIST, 2);
            output.writeListBegin(thrift.TType.STRUCT, this.body.length);
            this.body.forEach((value_1: Block.Block): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.totalBodyBlocks != null) {
            output.writeFieldBegin("totalBodyBlocks", thrift.TType.I32, 3);
            output.writeI32(this.totalBodyBlocks);
            output.writeFieldEnd();
        }
        if (this.requestedBodyBlocks != null) {
            output.writeFieldBegin("requestedBodyBlocks", thrift.TType.MAP, 4);
            output.writeMapBegin(thrift.TType.STRING, thrift.TType.LIST, this.requestedBodyBlocks.size);
            this.requestedBodyBlocks.forEach((value_2: Array<Block.Block>, key_1: string): void => {
                output.writeString(key_1);
                output.writeListBegin(thrift.TType.STRUCT, value_2.length);
                value_2.forEach((value_3: Block.Block): void => {
                    value_3.write(output);
                });
                output.writeListEnd();
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): Blocks {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_4: Block.Block = Block.Block.read(input);
                        _args.main = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.LIST) {
                        const value_5: Array<Block.Block> = new Array<Block.Block>();
                        const metadata_1: thrift.IThriftList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_6: Block.Block = Block.Block.read(input);
                            value_5.push(value_6);
                        }
                        input.readListEnd();
                        _args.body = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.I32) {
                        const value_7: number = input.readI32();
                        _args.totalBodyBlocks = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.MAP) {
                        const value_8: Map<string, Array<Block.Block>> = new Map<string, Array<Block.Block>>();
                        const metadata_2: thrift.IThriftMap = input.readMapBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const key_2: string = input.readString();
                            const value_9: Array<Block.Block> = new Array<Block.Block>();
                            const metadata_3: thrift.IThriftList = input.readListBegin();
                            const size_3: number = metadata_3.size;
                            for (let i_3: number = 0; i_3 < size_3; i_3++) {
                                const value_10: Block.Block = Block.Block.read(input);
                                value_9.push(value_10);
                            }
                            input.readListEnd();
                            value_8.set(key_2, value_9);
                        }
                        input.readMapEnd();
                        _args.requestedBodyBlocks = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new Blocks(_args);
    }
}
