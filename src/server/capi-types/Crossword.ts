/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as CrosswordType from "./CrosswordType";
import * as CapiDateTime from "./CapiDateTime";
import * as CrosswordDimensions from "./CrosswordDimensions";
import * as CrosswordEntry from "./CrosswordEntry";
import * as CrosswordCreator from "./CrosswordCreator";
export interface ICrosswordArgs {
    name: string;
    type: CrosswordType.CrosswordType;
    number: number;
    date: CapiDateTime.CapiDateTime;
    dimensions: CrosswordDimensions.CrosswordDimensions;
    entries: Array<CrosswordEntry.CrosswordEntry>;
    solutionAvailable: boolean;
    hasNumbers: boolean;
    randomCluesOrdering: boolean;
    instructions?: string;
    creator?: CrosswordCreator.CrosswordCreator;
    pdf?: string;
    annotatedSolution?: string;
    dateSolutionAvailable?: CapiDateTime.CapiDateTime;
}
export class Crossword {
    public name: string;
    public type: CrosswordType.CrosswordType;
    public number: number;
    public date: CapiDateTime.CapiDateTime;
    public dimensions: CrosswordDimensions.CrosswordDimensions;
    public entries: Array<CrosswordEntry.CrosswordEntry>;
    public solutionAvailable: boolean;
    public hasNumbers: boolean;
    public randomCluesOrdering: boolean;
    public instructions?: string;
    public creator?: CrosswordCreator.CrosswordCreator;
    public pdf?: string;
    public annotatedSolution?: string;
    public dateSolutionAvailable?: CapiDateTime.CapiDateTime;
    constructor(args: ICrosswordArgs) {
        if (args != null && args.name != null) {
            this.name = args.name;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[name] is unset!");
        }
        if (args != null && args.type != null) {
            this.type = args.type;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[type] is unset!");
        }
        if (args != null && args.number != null) {
            this.number = args.number;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[number] is unset!");
        }
        if (args != null && args.date != null) {
            this.date = args.date;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[date] is unset!");
        }
        if (args != null && args.dimensions != null) {
            this.dimensions = args.dimensions;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[dimensions] is unset!");
        }
        if (args != null && args.entries != null) {
            this.entries = args.entries;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[entries] is unset!");
        }
        if (args != null && args.solutionAvailable != null) {
            this.solutionAvailable = args.solutionAvailable;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[solutionAvailable] is unset!");
        }
        if (args != null && args.hasNumbers != null) {
            this.hasNumbers = args.hasNumbers;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[hasNumbers] is unset!");
        }
        if (args != null && args.randomCluesOrdering != null) {
            this.randomCluesOrdering = args.randomCluesOrdering;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[randomCluesOrdering] is unset!");
        }
        if (args != null && args.instructions != null) {
            this.instructions = args.instructions;
        }
        if (args != null && args.creator != null) {
            this.creator = args.creator;
        }
        if (args != null && args.pdf != null) {
            this.pdf = args.pdf;
        }
        if (args != null && args.annotatedSolution != null) {
            this.annotatedSolution = args.annotatedSolution;
        }
        if (args != null && args.dateSolutionAvailable != null) {
            this.dateSolutionAvailable = args.dateSolutionAvailable;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("Crossword");
        if (this.name != null) {
            output.writeFieldBegin("name", thrift.TType.STRING, 1);
            output.writeString(this.name);
            output.writeFieldEnd();
        }
        if (this.type != null) {
            output.writeFieldBegin("type", thrift.TType.I32, 2);
            output.writeI32(this.type);
            output.writeFieldEnd();
        }
        if (this.number != null) {
            output.writeFieldBegin("number", thrift.TType.I32, 3);
            output.writeI32(this.number);
            output.writeFieldEnd();
        }
        if (this.date != null) {
            output.writeFieldBegin("date", thrift.TType.STRUCT, 4);
            this.date.write(output);
            output.writeFieldEnd();
        }
        if (this.dimensions != null) {
            output.writeFieldBegin("dimensions", thrift.TType.STRUCT, 5);
            this.dimensions.write(output);
            output.writeFieldEnd();
        }
        if (this.entries != null) {
            output.writeFieldBegin("entries", thrift.TType.LIST, 6);
            output.writeListBegin(thrift.TType.STRUCT, this.entries.length);
            this.entries.forEach((value_1: CrosswordEntry.CrosswordEntry): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.solutionAvailable != null) {
            output.writeFieldBegin("solutionAvailable", thrift.TType.BOOL, 7);
            output.writeBool(this.solutionAvailable);
            output.writeFieldEnd();
        }
        if (this.hasNumbers != null) {
            output.writeFieldBegin("hasNumbers", thrift.TType.BOOL, 8);
            output.writeBool(this.hasNumbers);
            output.writeFieldEnd();
        }
        if (this.randomCluesOrdering != null) {
            output.writeFieldBegin("randomCluesOrdering", thrift.TType.BOOL, 9);
            output.writeBool(this.randomCluesOrdering);
            output.writeFieldEnd();
        }
        if (this.instructions != null) {
            output.writeFieldBegin("instructions", thrift.TType.STRING, 10);
            output.writeString(this.instructions);
            output.writeFieldEnd();
        }
        if (this.creator != null) {
            output.writeFieldBegin("creator", thrift.TType.STRUCT, 11);
            this.creator.write(output);
            output.writeFieldEnd();
        }
        if (this.pdf != null) {
            output.writeFieldBegin("pdf", thrift.TType.STRING, 12);
            output.writeString(this.pdf);
            output.writeFieldEnd();
        }
        if (this.annotatedSolution != null) {
            output.writeFieldBegin("annotatedSolution", thrift.TType.STRING, 13);
            output.writeString(this.annotatedSolution);
            output.writeFieldEnd();
        }
        if (this.dateSolutionAvailable != null) {
            output.writeFieldBegin("dateSolutionAvailable", thrift.TType.STRUCT, 14);
            this.dateSolutionAvailable.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): Crossword {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: string = input.readString();
                        _args.name = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.I32) {
                        const value_3: CrosswordType.CrosswordType = input.readI32();
                        _args.type = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.I32) {
                        const value_4: number = input.readI32();
                        _args.number = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_5: CapiDateTime.CapiDateTime = CapiDateTime.CapiDateTime.read(input);
                        _args.date = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_6: CrosswordDimensions.CrosswordDimensions = CrosswordDimensions.CrosswordDimensions.read(input);
                        _args.dimensions = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.LIST) {
                        const value_7: Array<CrosswordEntry.CrosswordEntry> = new Array<CrosswordEntry.CrosswordEntry>();
                        const metadata_1: thrift.IThriftList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_8: CrosswordEntry.CrosswordEntry = CrosswordEntry.CrosswordEntry.read(input);
                            value_7.push(value_8);
                        }
                        input.readListEnd();
                        _args.entries = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_9: boolean = input.readBool();
                        _args.solutionAvailable = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_10: boolean = input.readBool();
                        _args.hasNumbers = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_11: boolean = input.readBool();
                        _args.randomCluesOrdering = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.TType.STRING) {
                        const value_12: string = input.readString();
                        _args.instructions = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_13: CrosswordCreator.CrosswordCreator = CrosswordCreator.CrosswordCreator.read(input);
                        _args.creator = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.TType.STRING) {
                        const value_14: string = input.readString();
                        _args.pdf = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.TType.STRING) {
                        const value_15: string = input.readString();
                        _args.annotatedSolution = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_16: CapiDateTime.CapiDateTime = CapiDateTime.CapiDateTime.read(input);
                        _args.dateSolutionAvailable = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.name !== undefined && _args.type !== undefined && _args.number !== undefined && _args.date !== undefined && _args.dimensions !== undefined && _args.entries !== undefined && _args.solutionAvailable !== undefined && _args.hasNumbers !== undefined && _args.randomCluesOrdering !== undefined) {
            return new Crossword(_args);
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read Crossword from input");
        }
    }
}
