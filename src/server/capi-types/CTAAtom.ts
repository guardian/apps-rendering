/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
export interface ICTAAtom {
    url: string;
    backgroundImage?: string;
    btnText?: string;
    label?: string;
    trackingCode?: string;
}
export interface ICTAAtomArgs {
    url: string;
    backgroundImage?: string;
    btnText?: string;
    label?: string;
    trackingCode?: string;
}
export const CTAAtomCodec: thrift.IStructCodec<ICTAAtomArgs, ICTAAtom> = {
    encode(args: ICTAAtomArgs, output: thrift.TProtocol): void {
        const obj: any = {
            url: args.url,
            backgroundImage: args.backgroundImage,
            btnText: args.btnText,
            label: args.label,
            trackingCode: args.trackingCode
        };
        output.writeStructBegin("CTAAtom");
        if (obj.url != null) {
            output.writeFieldBegin("url", thrift.TType.STRING, 1);
            output.writeString(obj.url);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[url] is unset!");
        }
        if (obj.backgroundImage != null) {
            output.writeFieldBegin("backgroundImage", thrift.TType.STRING, 2);
            output.writeString(obj.backgroundImage);
            output.writeFieldEnd();
        }
        if (obj.btnText != null) {
            output.writeFieldBegin("btnText", thrift.TType.STRING, 3);
            output.writeString(obj.btnText);
            output.writeFieldEnd();
        }
        if (obj.label != null) {
            output.writeFieldBegin("label", thrift.TType.STRING, 4);
            output.writeString(obj.label);
            output.writeFieldEnd();
        }
        if (obj.trackingCode != null) {
            output.writeFieldBegin("trackingCode", thrift.TType.STRING, 5);
            output.writeString(obj.trackingCode);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): ICTAAtom {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_1: string = input.readString();
                        _args.url = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: string = input.readString();
                        _args.backgroundImage = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_3: string = input.readString();
                        _args.btnText = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRING) {
                        const value_4: string = input.readString();
                        _args.label = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.STRING) {
                        const value_5: string = input.readString();
                        _args.trackingCode = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.url !== undefined) {
            return {
                url: _args.url,
                backgroundImage: _args.backgroundImage,
                btnText: _args.btnText,
                label: _args.label,
                trackingCode: _args.trackingCode
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read CTAAtom from input");
        }
    }
};
export class CTAAtom extends thrift.StructLike implements ICTAAtom {
    public url: string;
    public backgroundImage?: string;
    public btnText?: string;
    public label?: string;
    public trackingCode?: string;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: ICTAAtomArgs) {
        super();
        if (args.url != null) {
            const value_6: string = args.url;
            this.url = value_6;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[url] is unset!");
        }
        if (args.backgroundImage != null) {
            const value_7: string = args.backgroundImage;
            this.backgroundImage = value_7;
        }
        if (args.btnText != null) {
            const value_8: string = args.btnText;
            this.btnText = value_8;
        }
        if (args.label != null) {
            const value_9: string = args.label;
            this.label = value_9;
        }
        if (args.trackingCode != null) {
            const value_10: string = args.trackingCode;
            this.trackingCode = value_10;
        }
    }
    public static read(input: thrift.TProtocol): CTAAtom {
        return new CTAAtom(CTAAtomCodec.decode(input));
    }
    public static write(args: ICTAAtomArgs, output: thrift.TProtocol): void {
        return CTAAtomCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return CTAAtomCodec.encode(this, output);
    }
}
