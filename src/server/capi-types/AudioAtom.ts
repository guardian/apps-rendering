/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as OffPlatform from "./OffPlatform";
export interface IAudioAtom {
    kicker: string;
    coverUrl: string;
    trackUrl: string;
    duration: number;
    contentId: string;
    offPlatformLinks?: OffPlatform.IOffPlatform;
}
export interface IAudioAtomArgs {
    kicker: string;
    coverUrl: string;
    trackUrl: string;
    duration: number;
    contentId: string;
    offPlatformLinks?: OffPlatform.IOffPlatformArgs;
}
export const AudioAtomCodec: thrift.IStructCodec<IAudioAtomArgs, IAudioAtom> = {
    encode(args: IAudioAtomArgs, output: thrift.TProtocol): void {
        const obj: any = {
            kicker: args.kicker,
            coverUrl: args.coverUrl,
            trackUrl: args.trackUrl,
            duration: args.duration,
            contentId: args.contentId,
            offPlatformLinks: args.offPlatformLinks
        };
        output.writeStructBegin("AudioAtom");
        if (obj.kicker != null) {
            output.writeFieldBegin("kicker", thrift.TType.STRING, 1);
            output.writeString(obj.kicker);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[kicker] is unset!");
        }
        if (obj.coverUrl != null) {
            output.writeFieldBegin("coverUrl", thrift.TType.STRING, 2);
            output.writeString(obj.coverUrl);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[coverUrl] is unset!");
        }
        if (obj.trackUrl != null) {
            output.writeFieldBegin("trackUrl", thrift.TType.STRING, 3);
            output.writeString(obj.trackUrl);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[trackUrl] is unset!");
        }
        if (obj.duration != null) {
            output.writeFieldBegin("duration", thrift.TType.I32, 4);
            output.writeI32(obj.duration);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[duration] is unset!");
        }
        if (obj.contentId != null) {
            output.writeFieldBegin("contentId", thrift.TType.STRING, 5);
            output.writeString(obj.contentId);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[contentId] is unset!");
        }
        if (obj.offPlatformLinks != null) {
            output.writeFieldBegin("offPlatformLinks", thrift.TType.STRUCT, 6);
            OffPlatform.OffPlatformCodec.encode(obj.offPlatformLinks, output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IAudioAtom {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_1: string = input.readString();
                        _args.kicker = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: string = input.readString();
                        _args.coverUrl = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_3: string = input.readString();
                        _args.trackUrl = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.I32) {
                        const value_4: number = input.readI32();
                        _args.duration = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.STRING) {
                        const value_5: string = input.readString();
                        _args.contentId = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_6: OffPlatform.IOffPlatform = OffPlatform.OffPlatformCodec.decode(input);
                        _args.offPlatformLinks = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.kicker !== undefined && _args.coverUrl !== undefined && _args.trackUrl !== undefined && _args.duration !== undefined && _args.contentId !== undefined) {
            return {
                kicker: _args.kicker,
                coverUrl: _args.coverUrl,
                trackUrl: _args.trackUrl,
                duration: _args.duration,
                contentId: _args.contentId,
                offPlatformLinks: _args.offPlatformLinks
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read AudioAtom from input");
        }
    }
};
export class AudioAtom extends thrift.StructLike implements IAudioAtom {
    public kicker: string;
    public coverUrl: string;
    public trackUrl: string;
    public duration: number;
    public contentId: string;
    public offPlatformLinks?: OffPlatform.IOffPlatform;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IAudioAtomArgs) {
        super();
        if (args.kicker != null) {
            const value_7: string = args.kicker;
            this.kicker = value_7;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[kicker] is unset!");
        }
        if (args.coverUrl != null) {
            const value_8: string = args.coverUrl;
            this.coverUrl = value_8;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[coverUrl] is unset!");
        }
        if (args.trackUrl != null) {
            const value_9: string = args.trackUrl;
            this.trackUrl = value_9;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[trackUrl] is unset!");
        }
        if (args.duration != null) {
            const value_10: number = args.duration;
            this.duration = value_10;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[duration] is unset!");
        }
        if (args.contentId != null) {
            const value_11: string = args.contentId;
            this.contentId = value_11;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[contentId] is unset!");
        }
        if (args.offPlatformLinks != null) {
            const value_12: OffPlatform.IOffPlatform = new OffPlatform.OffPlatform(args.offPlatformLinks);
            this.offPlatformLinks = value_12;
        }
    }
    public static read(input: thrift.TProtocol): AudioAtom {
        return new AudioAtom(AudioAtomCodec.decode(input));
    }
    public static write(args: IAudioAtomArgs, output: thrift.TProtocol): void {
        return AudioAtomCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return AudioAtomCodec.encode(this, output);
    }
}
