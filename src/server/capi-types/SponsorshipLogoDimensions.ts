/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
export interface ISponsorshipLogoDimensions {
    width: number;
    height: number;
}
export interface ISponsorshipLogoDimensionsArgs {
    width: number;
    height: number;
}
export const SponsorshipLogoDimensionsCodec: thrift.IStructCodec<ISponsorshipLogoDimensionsArgs, ISponsorshipLogoDimensions> = {
    encode(args: ISponsorshipLogoDimensionsArgs, output: thrift.TProtocol): void {
        const obj: any = {
            width: args.width,
            height: args.height
        };
        output.writeStructBegin("SponsorshipLogoDimensions");
        if (obj.width != null) {
            output.writeFieldBegin("width", thrift.TType.I32, 1);
            output.writeI32(obj.width);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[width] is unset!");
        }
        if (obj.height != null) {
            output.writeFieldBegin("height", thrift.TType.I32, 2);
            output.writeI32(obj.height);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[height] is unset!");
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): ISponsorshipLogoDimensions {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.I32) {
                        const value_1: number = input.readI32();
                        _args.width = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.I32) {
                        const value_2: number = input.readI32();
                        _args.height = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.width !== undefined && _args.height !== undefined) {
            return {
                width: _args.width,
                height: _args.height
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read SponsorshipLogoDimensions from input");
        }
    }
};
export class SponsorshipLogoDimensions extends thrift.StructLike implements ISponsorshipLogoDimensions {
    public width: number;
    public height: number;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: ISponsorshipLogoDimensionsArgs) {
        super();
        if (args.width != null) {
            const value_3: number = args.width;
            this.width = value_3;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[width] is unset!");
        }
        if (args.height != null) {
            const value_4: number = args.height;
            this.height = value_4;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[height] is unset!");
        }
    }
    public static read(input: thrift.TProtocol): SponsorshipLogoDimensions {
        return new SponsorshipLogoDimensions(SponsorshipLogoDimensionsCodec.decode(input));
    }
    public static write(args: ISponsorshipLogoDimensionsArgs, output: thrift.TProtocol): void {
        return SponsorshipLogoDimensionsCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return SponsorshipLogoDimensionsCodec.encode(this, output);
    }
}
