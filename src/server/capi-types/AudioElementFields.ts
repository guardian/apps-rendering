/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
export interface IAudioElementFieldsArgs {
    html?: string;
    source?: string;
    description?: string;
    title?: string;
    credit?: string;
    caption?: string;
    durationMinutes?: number;
    durationSeconds?: number;
    clean?: boolean;
    explicit?: boolean;
}
export class AudioElementFields {
    public html?: string;
    public source?: string;
    public description?: string;
    public title?: string;
    public credit?: string;
    public caption?: string;
    public durationMinutes?: number;
    public durationSeconds?: number;
    public clean?: boolean;
    public explicit?: boolean;
    constructor(args?: IAudioElementFieldsArgs) {
        if (args != null && args.html != null) {
            this.html = args.html;
        }
        if (args != null && args.source != null) {
            this.source = args.source;
        }
        if (args != null && args.description != null) {
            this.description = args.description;
        }
        if (args != null && args.title != null) {
            this.title = args.title;
        }
        if (args != null && args.credit != null) {
            this.credit = args.credit;
        }
        if (args != null && args.caption != null) {
            this.caption = args.caption;
        }
        if (args != null && args.durationMinutes != null) {
            this.durationMinutes = args.durationMinutes;
        }
        if (args != null && args.durationSeconds != null) {
            this.durationSeconds = args.durationSeconds;
        }
        if (args != null && args.clean != null) {
            this.clean = args.clean;
        }
        if (args != null && args.explicit != null) {
            this.explicit = args.explicit;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("AudioElementFields");
        if (this.html != null) {
            output.writeFieldBegin("html", thrift.TType.STRING, 1);
            output.writeString(this.html);
            output.writeFieldEnd();
        }
        if (this.source != null) {
            output.writeFieldBegin("source", thrift.TType.STRING, 2);
            output.writeString(this.source);
            output.writeFieldEnd();
        }
        if (this.description != null) {
            output.writeFieldBegin("description", thrift.TType.STRING, 3);
            output.writeString(this.description);
            output.writeFieldEnd();
        }
        if (this.title != null) {
            output.writeFieldBegin("title", thrift.TType.STRING, 4);
            output.writeString(this.title);
            output.writeFieldEnd();
        }
        if (this.credit != null) {
            output.writeFieldBegin("credit", thrift.TType.STRING, 5);
            output.writeString(this.credit);
            output.writeFieldEnd();
        }
        if (this.caption != null) {
            output.writeFieldBegin("caption", thrift.TType.STRING, 6);
            output.writeString(this.caption);
            output.writeFieldEnd();
        }
        if (this.durationMinutes != null) {
            output.writeFieldBegin("durationMinutes", thrift.TType.I32, 7);
            output.writeI32(this.durationMinutes);
            output.writeFieldEnd();
        }
        if (this.durationSeconds != null) {
            output.writeFieldBegin("durationSeconds", thrift.TType.I32, 8);
            output.writeI32(this.durationSeconds);
            output.writeFieldEnd();
        }
        if (this.clean != null) {
            output.writeFieldBegin("clean", thrift.TType.BOOL, 9);
            output.writeBool(this.clean);
            output.writeFieldEnd();
        }
        if (this.explicit != null) {
            output.writeFieldBegin("explicit", thrift.TType.BOOL, 10);
            output.writeBool(this.explicit);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): AudioElementFields {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_1: string = input.readString();
                        _args.html = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: string = input.readString();
                        _args.source = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_3: string = input.readString();
                        _args.description = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRING) {
                        const value_4: string = input.readString();
                        _args.title = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.STRING) {
                        const value_5: string = input.readString();
                        _args.credit = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.STRING) {
                        const value_6: string = input.readString();
                        _args.caption = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.TType.I32) {
                        const value_7: number = input.readI32();
                        _args.durationMinutes = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.TType.I32) {
                        const value_8: number = input.readI32();
                        _args.durationSeconds = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_9: boolean = input.readBool();
                        _args.clean = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_10: boolean = input.readBool();
                        _args.explicit = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new AudioElementFields(_args);
    }
}
