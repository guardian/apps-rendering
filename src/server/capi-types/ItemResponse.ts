/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as Content from "./Content";
import * as Tag from "./Tag";
import * as Edition from "./Edition";
import * as Section from "./Section";
import * as Package from "./Package";
export interface IItemResponseArgs {
    status: string;
    userTier: string;
    total?: number;
    startIndex?: number;
    pageSize?: number;
    currentPage?: number;
    pages?: number;
    orderBy?: string;
    content?: Content.Content;
    tag?: Tag.Tag;
    edition?: Edition.Edition;
    section?: Section.Section;
    results?: Array<Content.Content>;
    relatedContent?: Array<Content.Content>;
    storyPackage?: Array<Content.Content>;
    editorsPicks?: Array<Content.Content>;
    mostViewed?: Array<Content.Content>;
    leadContent?: Array<Content.Content>;
    packages?: Array<Package.Package>;
}
export class ItemResponse {
    public status: string;
    public userTier: string;
    public total?: number;
    public startIndex?: number;
    public pageSize?: number;
    public currentPage?: number;
    public pages?: number;
    public orderBy?: string;
    public content?: Content.Content;
    public tag?: Tag.Tag;
    public edition?: Edition.Edition;
    public section?: Section.Section;
    public results?: Array<Content.Content>;
    public relatedContent?: Array<Content.Content>;
    public storyPackage?: Array<Content.Content>;
    public editorsPicks?: Array<Content.Content>;
    public mostViewed?: Array<Content.Content>;
    public leadContent?: Array<Content.Content>;
    public packages?: Array<Package.Package>;
    constructor(args: IItemResponseArgs) {
        if (args != null && args.status != null) {
            this.status = args.status;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[status] is unset!");
        }
        if (args != null && args.userTier != null) {
            this.userTier = args.userTier;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[userTier] is unset!");
        }
        if (args != null && args.total != null) {
            this.total = args.total;
        }
        if (args != null && args.startIndex != null) {
            this.startIndex = args.startIndex;
        }
        if (args != null && args.pageSize != null) {
            this.pageSize = args.pageSize;
        }
        if (args != null && args.currentPage != null) {
            this.currentPage = args.currentPage;
        }
        if (args != null && args.pages != null) {
            this.pages = args.pages;
        }
        if (args != null && args.orderBy != null) {
            this.orderBy = args.orderBy;
        }
        if (args != null && args.content != null) {
            this.content = args.content;
        }
        if (args != null && args.tag != null) {
            this.tag = args.tag;
        }
        if (args != null && args.edition != null) {
            this.edition = args.edition;
        }
        if (args != null && args.section != null) {
            this.section = args.section;
        }
        if (args != null && args.results != null) {
            this.results = args.results;
        }
        if (args != null && args.relatedContent != null) {
            this.relatedContent = args.relatedContent;
        }
        if (args != null && args.storyPackage != null) {
            this.storyPackage = args.storyPackage;
        }
        if (args != null && args.editorsPicks != null) {
            this.editorsPicks = args.editorsPicks;
        }
        if (args != null && args.mostViewed != null) {
            this.mostViewed = args.mostViewed;
        }
        if (args != null && args.leadContent != null) {
            this.leadContent = args.leadContent;
        }
        if (args != null && args.packages != null) {
            this.packages = args.packages;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ItemResponse");
        if (this.status != null) {
            output.writeFieldBegin("status", thrift.TType.STRING, 1);
            output.writeString(this.status);
            output.writeFieldEnd();
        }
        if (this.userTier != null) {
            output.writeFieldBegin("userTier", thrift.TType.STRING, 2);
            output.writeString(this.userTier);
            output.writeFieldEnd();
        }
        if (this.total != null) {
            output.writeFieldBegin("total", thrift.TType.I32, 3);
            output.writeI32(this.total);
            output.writeFieldEnd();
        }
        if (this.startIndex != null) {
            output.writeFieldBegin("startIndex", thrift.TType.I32, 4);
            output.writeI32(this.startIndex);
            output.writeFieldEnd();
        }
        if (this.pageSize != null) {
            output.writeFieldBegin("pageSize", thrift.TType.I32, 5);
            output.writeI32(this.pageSize);
            output.writeFieldEnd();
        }
        if (this.currentPage != null) {
            output.writeFieldBegin("currentPage", thrift.TType.I32, 6);
            output.writeI32(this.currentPage);
            output.writeFieldEnd();
        }
        if (this.pages != null) {
            output.writeFieldBegin("pages", thrift.TType.I32, 7);
            output.writeI32(this.pages);
            output.writeFieldEnd();
        }
        if (this.orderBy != null) {
            output.writeFieldBegin("orderBy", thrift.TType.STRING, 8);
            output.writeString(this.orderBy);
            output.writeFieldEnd();
        }
        if (this.content != null) {
            output.writeFieldBegin("content", thrift.TType.STRUCT, 9);
            this.content.write(output);
            output.writeFieldEnd();
        }
        if (this.tag != null) {
            output.writeFieldBegin("tag", thrift.TType.STRUCT, 10);
            this.tag.write(output);
            output.writeFieldEnd();
        }
        if (this.edition != null) {
            output.writeFieldBegin("edition", thrift.TType.STRUCT, 11);
            this.edition.write(output);
            output.writeFieldEnd();
        }
        if (this.section != null) {
            output.writeFieldBegin("section", thrift.TType.STRUCT, 12);
            this.section.write(output);
            output.writeFieldEnd();
        }
        if (this.results != null) {
            output.writeFieldBegin("results", thrift.TType.LIST, 13);
            output.writeListBegin(thrift.TType.STRUCT, this.results.length);
            this.results.forEach((value_1: Content.Content): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.relatedContent != null) {
            output.writeFieldBegin("relatedContent", thrift.TType.LIST, 15);
            output.writeListBegin(thrift.TType.STRUCT, this.relatedContent.length);
            this.relatedContent.forEach((value_2: Content.Content): void => {
                value_2.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.storyPackage != null) {
            output.writeFieldBegin("storyPackage", thrift.TType.LIST, 16);
            output.writeListBegin(thrift.TType.STRUCT, this.storyPackage.length);
            this.storyPackage.forEach((value_3: Content.Content): void => {
                value_3.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.editorsPicks != null) {
            output.writeFieldBegin("editorsPicks", thrift.TType.LIST, 17);
            output.writeListBegin(thrift.TType.STRUCT, this.editorsPicks.length);
            this.editorsPicks.forEach((value_4: Content.Content): void => {
                value_4.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.mostViewed != null) {
            output.writeFieldBegin("mostViewed", thrift.TType.LIST, 18);
            output.writeListBegin(thrift.TType.STRUCT, this.mostViewed.length);
            this.mostViewed.forEach((value_5: Content.Content): void => {
                value_5.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.leadContent != null) {
            output.writeFieldBegin("leadContent", thrift.TType.LIST, 19);
            output.writeListBegin(thrift.TType.STRUCT, this.leadContent.length);
            this.leadContent.forEach((value_6: Content.Content): void => {
                value_6.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.packages != null) {
            output.writeFieldBegin("packages", thrift.TType.LIST, 20);
            output.writeListBegin(thrift.TType.STRUCT, this.packages.length);
            this.packages.forEach((value_7: Package.Package): void => {
                value_7.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ItemResponse {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_8: string = input.readString();
                        _args.status = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_9: string = input.readString();
                        _args.userTier = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.I32) {
                        const value_10: number = input.readI32();
                        _args.total = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.I32) {
                        const value_11: number = input.readI32();
                        _args.startIndex = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.I32) {
                        const value_12: number = input.readI32();
                        _args.pageSize = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.I32) {
                        const value_13: number = input.readI32();
                        _args.currentPage = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.TType.I32) {
                        const value_14: number = input.readI32();
                        _args.pages = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.TType.STRING) {
                        const value_15: string = input.readString();
                        _args.orderBy = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_16: Content.Content = Content.Content.read(input);
                        _args.content = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_17: Tag.Tag = Tag.Tag.read(input);
                        _args.tag = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_18: Edition.Edition = Edition.Edition.read(input);
                        _args.edition = value_18;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_19: Section.Section = Section.Section.read(input);
                        _args.section = value_19;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.TType.LIST) {
                        const value_20: Array<Content.Content> = new Array<Content.Content>();
                        const metadata_1: thrift.IThriftList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_21: Content.Content = Content.Content.read(input);
                            value_20.push(value_21);
                        }
                        input.readListEnd();
                        _args.results = value_20;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.TType.LIST) {
                        const value_22: Array<Content.Content> = new Array<Content.Content>();
                        const metadata_2: thrift.IThriftList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_23: Content.Content = Content.Content.read(input);
                            value_22.push(value_23);
                        }
                        input.readListEnd();
                        _args.relatedContent = value_22;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 16:
                    if (fieldType === thrift.TType.LIST) {
                        const value_24: Array<Content.Content> = new Array<Content.Content>();
                        const metadata_3: thrift.IThriftList = input.readListBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const value_25: Content.Content = Content.Content.read(input);
                            value_24.push(value_25);
                        }
                        input.readListEnd();
                        _args.storyPackage = value_24;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 17:
                    if (fieldType === thrift.TType.LIST) {
                        const value_26: Array<Content.Content> = new Array<Content.Content>();
                        const metadata_4: thrift.IThriftList = input.readListBegin();
                        const size_4: number = metadata_4.size;
                        for (let i_4: number = 0; i_4 < size_4; i_4++) {
                            const value_27: Content.Content = Content.Content.read(input);
                            value_26.push(value_27);
                        }
                        input.readListEnd();
                        _args.editorsPicks = value_26;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 18:
                    if (fieldType === thrift.TType.LIST) {
                        const value_28: Array<Content.Content> = new Array<Content.Content>();
                        const metadata_5: thrift.IThriftList = input.readListBegin();
                        const size_5: number = metadata_5.size;
                        for (let i_5: number = 0; i_5 < size_5; i_5++) {
                            const value_29: Content.Content = Content.Content.read(input);
                            value_28.push(value_29);
                        }
                        input.readListEnd();
                        _args.mostViewed = value_28;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 19:
                    if (fieldType === thrift.TType.LIST) {
                        const value_30: Array<Content.Content> = new Array<Content.Content>();
                        const metadata_6: thrift.IThriftList = input.readListBegin();
                        const size_6: number = metadata_6.size;
                        for (let i_6: number = 0; i_6 < size_6; i_6++) {
                            const value_31: Content.Content = Content.Content.read(input);
                            value_30.push(value_31);
                        }
                        input.readListEnd();
                        _args.leadContent = value_30;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 20:
                    if (fieldType === thrift.TType.LIST) {
                        const value_32: Array<Package.Package> = new Array<Package.Package>();
                        const metadata_7: thrift.IThriftList = input.readListBegin();
                        const size_7: number = metadata_7.size;
                        for (let i_7: number = 0; i_7 < size_7; i_7++) {
                            const value_33: Package.Package = Package.Package.read(input);
                            value_32.push(value_33);
                        }
                        input.readListEnd();
                        _args.packages = value_32;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.status !== undefined && _args.userTier !== undefined) {
            return new ItemResponse(_args);
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read ItemResponse from input");
        }
    }
}
