/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as Question from "./Question";
import * as ResultGroups from "./ResultGroups";
import * as ResultBuckets from "./ResultBuckets";
export interface IQuizContent {
    questions: Array<Question.IQuestion>;
    resultGroups?: ResultGroups.IResultGroups;
    resultBuckets?: ResultBuckets.IResultBuckets;
}
export interface IQuizContentArgs {
    questions: Array<Question.IQuestionArgs>;
    resultGroups?: ResultGroups.IResultGroupsArgs;
    resultBuckets?: ResultBuckets.IResultBucketsArgs;
}
export const QuizContentCodec: thrift.IStructCodec<IQuizContentArgs, IQuizContent> = {
    encode(args: IQuizContentArgs, output: thrift.TProtocol): void {
        const obj: any = {
            questions: args.questions,
            resultGroups: args.resultGroups,
            resultBuckets: args.resultBuckets
        };
        output.writeStructBegin("QuizContent");
        if (obj.questions != null) {
            output.writeFieldBegin("questions", thrift.TType.LIST, 1);
            output.writeListBegin(thrift.TType.STRUCT, obj.questions.length);
            obj.questions.forEach((value_1: Question.IQuestionArgs): void => {
                Question.QuestionCodec.encode(value_1, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[questions] is unset!");
        }
        if (obj.resultGroups != null) {
            output.writeFieldBegin("resultGroups", thrift.TType.STRUCT, 2);
            ResultGroups.ResultGroupsCodec.encode(obj.resultGroups, output);
            output.writeFieldEnd();
        }
        if (obj.resultBuckets != null) {
            output.writeFieldBegin("resultBuckets", thrift.TType.STRUCT, 3);
            ResultBuckets.ResultBucketsCodec.encode(obj.resultBuckets, output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IQuizContent {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.LIST) {
                        const value_2: Array<Question.IQuestion> = new Array<Question.IQuestion>();
                        const metadata_1: thrift.IThriftList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_3: Question.IQuestion = Question.QuestionCodec.decode(input);
                            value_2.push(value_3);
                        }
                        input.readListEnd();
                        _args.questions = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_4: ResultGroups.IResultGroups = ResultGroups.ResultGroupsCodec.decode(input);
                        _args.resultGroups = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_5: ResultBuckets.IResultBuckets = ResultBuckets.ResultBucketsCodec.decode(input);
                        _args.resultBuckets = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.questions !== undefined) {
            return {
                questions: _args.questions,
                resultGroups: _args.resultGroups,
                resultBuckets: _args.resultBuckets
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read QuizContent from input");
        }
    }
};
export class QuizContent extends thrift.StructLike implements IQuizContent {
    public questions: Array<Question.IQuestion>;
    public resultGroups?: ResultGroups.IResultGroups;
    public resultBuckets?: ResultBuckets.IResultBuckets;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IQuizContentArgs) {
        super();
        if (args.questions != null) {
            const value_6: Array<Question.IQuestion> = new Array<Question.IQuestion>();
            args.questions.forEach((value_9: Question.IQuestionArgs): void => {
                const value_10: Question.IQuestion = new Question.Question(value_9);
                value_6.push(value_10);
            });
            this.questions = value_6;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[questions] is unset!");
        }
        if (args.resultGroups != null) {
            const value_7: ResultGroups.IResultGroups = new ResultGroups.ResultGroups(args.resultGroups);
            this.resultGroups = value_7;
        }
        if (args.resultBuckets != null) {
            const value_8: ResultBuckets.IResultBuckets = new ResultBuckets.ResultBuckets(args.resultBuckets);
            this.resultBuckets = value_8;
        }
    }
    public static read(input: thrift.TProtocol): QuizContent {
        return new QuizContent(QuizContentCodec.decode(input));
    }
    public static write(args: IQuizContentArgs, output: thrift.TProtocol): void {
        return QuizContentCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return QuizContentCodec.encode(this, output);
    }
}
