/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as DisplayType from "./DisplayType";
export interface IExplainerAtom {
    title: string;
    body: string;
    displayType: DisplayType.DisplayType;
    tags?: Array<string>;
}
export interface IExplainerAtomArgs {
    title: string;
    body: string;
    displayType: DisplayType.DisplayType;
    tags?: Array<string>;
}
export const ExplainerAtomCodec: thrift.IStructCodec<IExplainerAtomArgs, IExplainerAtom> = {
    encode(args: IExplainerAtomArgs, output: thrift.TProtocol): void {
        const obj: any = {
            title: args.title,
            body: args.body,
            displayType: args.displayType,
            tags: args.tags
        };
        output.writeStructBegin("ExplainerAtom");
        if (obj.title != null) {
            output.writeFieldBegin("title", thrift.TType.STRING, 2);
            output.writeString(obj.title);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[title] is unset!");
        }
        if (obj.body != null) {
            output.writeFieldBegin("body", thrift.TType.STRING, 3);
            output.writeString(obj.body);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[body] is unset!");
        }
        if (obj.displayType != null) {
            output.writeFieldBegin("displayType", thrift.TType.I32, 4);
            output.writeI32(obj.displayType);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[displayType] is unset!");
        }
        if (obj.tags != null) {
            output.writeFieldBegin("tags", thrift.TType.LIST, 5);
            output.writeListBegin(thrift.TType.STRING, obj.tags.length);
            obj.tags.forEach((value_1: string): void => {
                output.writeString(value_1);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IExplainerAtom {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: string = input.readString();
                        _args.title = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_3: string = input.readString();
                        _args.body = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.I32) {
                        const value_4: DisplayType.DisplayType = input.readI32();
                        _args.displayType = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.LIST) {
                        const value_5: Array<string> = new Array<string>();
                        const metadata_1: thrift.IThriftList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_6: string = input.readString();
                            value_5.push(value_6);
                        }
                        input.readListEnd();
                        _args.tags = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.title !== undefined && _args.body !== undefined && _args.displayType !== undefined) {
            return {
                title: _args.title,
                body: _args.body,
                displayType: _args.displayType,
                tags: _args.tags
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read ExplainerAtom from input");
        }
    }
};
export class ExplainerAtom extends thrift.StructLike implements IExplainerAtom {
    public title: string;
    public body: string;
    public displayType: DisplayType.DisplayType;
    public tags?: Array<string>;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IExplainerAtomArgs) {
        super();
        if (args.title != null) {
            const value_7: string = args.title;
            this.title = value_7;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[title] is unset!");
        }
        if (args.body != null) {
            const value_8: string = args.body;
            this.body = value_8;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[body] is unset!");
        }
        if (args.displayType != null) {
            const value_9: DisplayType.DisplayType = args.displayType;
            this.displayType = value_9;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[displayType] is unset!");
        }
        if (args.tags != null) {
            const value_10: Array<string> = new Array<string>();
            args.tags.forEach((value_11: string): void => {
                const value_12: string = value_11;
                value_10.push(value_12);
            });
            this.tags = value_10;
        }
    }
    public static read(input: thrift.TProtocol): ExplainerAtom {
        return new ExplainerAtom(ExplainerAtomCodec.decode(input));
    }
    public static write(args: IExplainerAtomArgs, output: thrift.TProtocol): void {
        return ExplainerAtomCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return ExplainerAtomCodec.encode(this, output);
    }
}
