/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as Range from "./Range";
export interface IAxis {
    scale: Array<number>;
    range: Range.IRange;
}
export interface IAxisArgs {
    scale: Array<number>;
    range: Range.IRangeArgs;
}
export const AxisCodec: thrift.IStructCodec<IAxisArgs, IAxis> = {
    encode(args: IAxisArgs, output: thrift.TProtocol): void {
        const obj: any = {
            scale: args.scale,
            range: args.range
        };
        output.writeStructBegin("Axis");
        if (obj.scale != null) {
            output.writeFieldBegin("scale", thrift.TType.LIST, 1);
            output.writeListBegin(thrift.TType.DOUBLE, obj.scale.length);
            obj.scale.forEach((value_1: number): void => {
                output.writeDouble(value_1);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[scale] is unset!");
        }
        if (obj.range != null) {
            output.writeFieldBegin("range", thrift.TType.STRUCT, 2);
            Range.RangeCodec.encode(obj.range, output);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[range] is unset!");
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IAxis {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.LIST) {
                        const value_2: Array<number> = new Array<number>();
                        const metadata_1: thrift.IThriftList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_3: number = input.readDouble();
                            value_2.push(value_3);
                        }
                        input.readListEnd();
                        _args.scale = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_4: Range.IRange = Range.RangeCodec.decode(input);
                        _args.range = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.scale !== undefined && _args.range !== undefined) {
            return {
                scale: _args.scale,
                range: _args.range
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read Axis from input");
        }
    }
};
export class Axis extends thrift.StructLike implements IAxis {
    public scale: Array<number>;
    public range: Range.IRange;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IAxisArgs) {
        super();
        if (args.scale != null) {
            const value_5: Array<number> = new Array<number>();
            args.scale.forEach((value_7: number): void => {
                const value_8: number = value_7;
                value_5.push(value_8);
            });
            this.scale = value_5;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[scale] is unset!");
        }
        if (args.range != null) {
            const value_6: Range.IRange = new Range.Range(args.range);
            this.range = value_6;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[range] is unset!");
        }
    }
    public static read(input: thrift.TProtocol): Axis {
        return new Axis(AxisCodec.decode(input));
    }
    public static write(args: IAxisArgs, output: thrift.TProtocol): void {
        return AxisCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return AxisCodec.encode(this, output);
    }
}
