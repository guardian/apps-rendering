/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
export interface IAtomsResponseArgs {
    status: string;
    userTier: string;
    total: number;
    startIndex: number;
    pageSize: number;
    currentPage: number;
    pages: number;
}
export class AtomsResponse {
    public status: string;
    public userTier: string;
    public total: number;
    public startIndex: number;
    public pageSize: number;
    public currentPage: number;
    public pages: number;
    constructor(args: IAtomsResponseArgs) {
        if (args != null && args.status != null) {
            this.status = args.status;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[status] is unset!");
        }
        if (args != null && args.userTier != null) {
            this.userTier = args.userTier;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[userTier] is unset!");
        }
        if (args != null && args.total != null) {
            this.total = args.total;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[total] is unset!");
        }
        if (args != null && args.startIndex != null) {
            this.startIndex = args.startIndex;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[startIndex] is unset!");
        }
        if (args != null && args.pageSize != null) {
            this.pageSize = args.pageSize;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[pageSize] is unset!");
        }
        if (args != null && args.currentPage != null) {
            this.currentPage = args.currentPage;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[currentPage] is unset!");
        }
        if (args != null && args.pages != null) {
            this.pages = args.pages;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[pages] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("AtomsResponse");
        if (this.status != null) {
            output.writeFieldBegin("status", thrift.TType.STRING, 1);
            output.writeString(this.status);
            output.writeFieldEnd();
        }
        if (this.userTier != null) {
            output.writeFieldBegin("userTier", thrift.TType.STRING, 2);
            output.writeString(this.userTier);
            output.writeFieldEnd();
        }
        if (this.total != null) {
            output.writeFieldBegin("total", thrift.TType.I32, 3);
            output.writeI32(this.total);
            output.writeFieldEnd();
        }
        if (this.startIndex != null) {
            output.writeFieldBegin("startIndex", thrift.TType.I32, 4);
            output.writeI32(this.startIndex);
            output.writeFieldEnd();
        }
        if (this.pageSize != null) {
            output.writeFieldBegin("pageSize", thrift.TType.I32, 5);
            output.writeI32(this.pageSize);
            output.writeFieldEnd();
        }
        if (this.currentPage != null) {
            output.writeFieldBegin("currentPage", thrift.TType.I32, 6);
            output.writeI32(this.currentPage);
            output.writeFieldEnd();
        }
        if (this.pages != null) {
            output.writeFieldBegin("pages", thrift.TType.I32, 7);
            output.writeI32(this.pages);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): AtomsResponse {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_1: string = input.readString();
                        _args.status = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: string = input.readString();
                        _args.userTier = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.I32) {
                        const value_3: number = input.readI32();
                        _args.total = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.I32) {
                        const value_4: number = input.readI32();
                        _args.startIndex = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.I32) {
                        const value_5: number = input.readI32();
                        _args.pageSize = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.I32) {
                        const value_6: number = input.readI32();
                        _args.currentPage = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.TType.I32) {
                        const value_7: number = input.readI32();
                        _args.pages = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.status !== undefined && _args.userTier !== undefined && _args.total !== undefined && _args.startIndex !== undefined && _args.pageSize !== undefined && _args.currentPage !== undefined && _args.pages !== undefined) {
            return new AtomsResponse(_args);
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read AtomsResponse from input");
        }
    }
}
