/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
export interface IPodcastCategoryArgs {
    main: string;
    sub?: string;
}
export class PodcastCategory {
    public main: string;
    public sub?: string;
    constructor(args: IPodcastCategoryArgs) {
        if (args != null && args.main != null) {
            this.main = args.main;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[main] is unset!");
        }
        if (args != null && args.sub != null) {
            this.sub = args.sub;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("PodcastCategory");
        if (this.main != null) {
            output.writeFieldBegin("main", thrift.TType.STRING, 1);
            output.writeString(this.main);
            output.writeFieldEnd();
        }
        if (this.sub != null) {
            output.writeFieldBegin("sub", thrift.TType.STRING, 2);
            output.writeString(this.sub);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): PodcastCategory {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_1: string = input.readString();
                        _args.main = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: string = input.readString();
                        _args.sub = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.main !== undefined) {
            return new PodcastCategory(_args);
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read PodcastCategory from input");
        }
    }
}
