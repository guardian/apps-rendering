/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as ChartType from "./ChartType";
import * as Furniture from "./Furniture";
import * as TabularData from "./TabularData";
import * as SeriesColour from "./SeriesColour";
import * as DisplaySettings from "./DisplaySettings";
import * as Axis from "./Axis";
export interface IChartAtom {
    chartType: ChartType.ChartType;
    furniture: Furniture.IFurniture;
    tabularData: TabularData.ITabularData;
    seriesColour: Array<SeriesColour.ISeriesColour>;
    displaySettings: DisplaySettings.IDisplaySettings;
    hiddenColumns?: Array<number>;
    hiddenRows?: Array<number>;
    xAxis?: Axis.IAxis;
    yAxis?: Axis.IAxis;
}
export interface IChartAtomArgs {
    chartType: ChartType.ChartType;
    furniture: Furniture.IFurnitureArgs;
    tabularData: TabularData.ITabularDataArgs;
    seriesColour: Array<SeriesColour.ISeriesColourArgs>;
    displaySettings: DisplaySettings.IDisplaySettingsArgs;
    hiddenColumns?: Array<number>;
    hiddenRows?: Array<number>;
    xAxis?: Axis.IAxisArgs;
    yAxis?: Axis.IAxisArgs;
}
export const ChartAtomCodec: thrift.IStructCodec<IChartAtomArgs, IChartAtom> = {
    encode(args: IChartAtomArgs, output: thrift.TProtocol): void {
        const obj: any = {
            chartType: args.chartType,
            furniture: args.furniture,
            tabularData: args.tabularData,
            seriesColour: args.seriesColour,
            displaySettings: args.displaySettings,
            hiddenColumns: args.hiddenColumns,
            hiddenRows: args.hiddenRows,
            xAxis: args.xAxis,
            yAxis: args.yAxis
        };
        output.writeStructBegin("ChartAtom");
        if (obj.chartType != null) {
            output.writeFieldBegin("chartType", thrift.TType.I32, 1);
            output.writeI32(obj.chartType);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[chartType] is unset!");
        }
        if (obj.furniture != null) {
            output.writeFieldBegin("furniture", thrift.TType.STRUCT, 2);
            Furniture.FurnitureCodec.encode(obj.furniture, output);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[furniture] is unset!");
        }
        if (obj.tabularData != null) {
            output.writeFieldBegin("tabularData", thrift.TType.STRUCT, 3);
            TabularData.TabularDataCodec.encode(obj.tabularData, output);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[tabularData] is unset!");
        }
        if (obj.seriesColour != null) {
            output.writeFieldBegin("seriesColour", thrift.TType.LIST, 4);
            output.writeListBegin(thrift.TType.STRUCT, obj.seriesColour.length);
            obj.seriesColour.forEach((value_1: SeriesColour.ISeriesColourArgs): void => {
                SeriesColour.SeriesColourCodec.encode(value_1, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[seriesColour] is unset!");
        }
        if (obj.displaySettings != null) {
            output.writeFieldBegin("displaySettings", thrift.TType.STRUCT, 5);
            DisplaySettings.DisplaySettingsCodec.encode(obj.displaySettings, output);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[displaySettings] is unset!");
        }
        if (obj.hiddenColumns != null) {
            output.writeFieldBegin("hiddenColumns", thrift.TType.LIST, 6);
            output.writeListBegin(thrift.TType.I32, obj.hiddenColumns.length);
            obj.hiddenColumns.forEach((value_2: number): void => {
                output.writeI32(value_2);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.hiddenRows != null) {
            output.writeFieldBegin("hiddenRows", thrift.TType.LIST, 7);
            output.writeListBegin(thrift.TType.I32, obj.hiddenRows.length);
            obj.hiddenRows.forEach((value_3: number): void => {
                output.writeI32(value_3);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.xAxis != null) {
            output.writeFieldBegin("xAxis", thrift.TType.STRUCT, 8);
            Axis.AxisCodec.encode(obj.xAxis, output);
            output.writeFieldEnd();
        }
        if (obj.yAxis != null) {
            output.writeFieldBegin("yAxis", thrift.TType.STRUCT, 9);
            Axis.AxisCodec.encode(obj.yAxis, output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IChartAtom {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.I32) {
                        const value_4: ChartType.ChartType = input.readI32();
                        _args.chartType = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_5: Furniture.IFurniture = Furniture.FurnitureCodec.decode(input);
                        _args.furniture = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_6: TabularData.ITabularData = TabularData.TabularDataCodec.decode(input);
                        _args.tabularData = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.LIST) {
                        const value_7: Array<SeriesColour.ISeriesColour> = new Array<SeriesColour.ISeriesColour>();
                        const metadata_1: thrift.IThriftList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_8: SeriesColour.ISeriesColour = SeriesColour.SeriesColourCodec.decode(input);
                            value_7.push(value_8);
                        }
                        input.readListEnd();
                        _args.seriesColour = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_9: DisplaySettings.IDisplaySettings = DisplaySettings.DisplaySettingsCodec.decode(input);
                        _args.displaySettings = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.LIST) {
                        const value_10: Array<number> = new Array<number>();
                        const metadata_2: thrift.IThriftList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_11: number = input.readI32();
                            value_10.push(value_11);
                        }
                        input.readListEnd();
                        _args.hiddenColumns = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.TType.LIST) {
                        const value_12: Array<number> = new Array<number>();
                        const metadata_3: thrift.IThriftList = input.readListBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const value_13: number = input.readI32();
                            value_12.push(value_13);
                        }
                        input.readListEnd();
                        _args.hiddenRows = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_14: Axis.IAxis = Axis.AxisCodec.decode(input);
                        _args.xAxis = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_15: Axis.IAxis = Axis.AxisCodec.decode(input);
                        _args.yAxis = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.chartType !== undefined && _args.furniture !== undefined && _args.tabularData !== undefined && _args.seriesColour !== undefined && _args.displaySettings !== undefined) {
            return {
                chartType: _args.chartType,
                furniture: _args.furniture,
                tabularData: _args.tabularData,
                seriesColour: _args.seriesColour,
                displaySettings: _args.displaySettings,
                hiddenColumns: _args.hiddenColumns,
                hiddenRows: _args.hiddenRows,
                xAxis: _args.xAxis,
                yAxis: _args.yAxis
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read ChartAtom from input");
        }
    }
};
export class ChartAtom extends thrift.StructLike implements IChartAtom {
    public chartType: ChartType.ChartType;
    public furniture: Furniture.IFurniture;
    public tabularData: TabularData.ITabularData;
    public seriesColour: Array<SeriesColour.ISeriesColour>;
    public displaySettings: DisplaySettings.IDisplaySettings;
    public hiddenColumns?: Array<number>;
    public hiddenRows?: Array<number>;
    public xAxis?: Axis.IAxis;
    public yAxis?: Axis.IAxis;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IChartAtomArgs) {
        super();
        if (args.chartType != null) {
            const value_16: ChartType.ChartType = args.chartType;
            this.chartType = value_16;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[chartType] is unset!");
        }
        if (args.furniture != null) {
            const value_17: Furniture.IFurniture = new Furniture.Furniture(args.furniture);
            this.furniture = value_17;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[furniture] is unset!");
        }
        if (args.tabularData != null) {
            const value_18: TabularData.ITabularData = new TabularData.TabularData(args.tabularData);
            this.tabularData = value_18;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[tabularData] is unset!");
        }
        if (args.seriesColour != null) {
            const value_19: Array<SeriesColour.ISeriesColour> = new Array<SeriesColour.ISeriesColour>();
            args.seriesColour.forEach((value_25: SeriesColour.ISeriesColourArgs): void => {
                const value_26: SeriesColour.ISeriesColour = new SeriesColour.SeriesColour(value_25);
                value_19.push(value_26);
            });
            this.seriesColour = value_19;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[seriesColour] is unset!");
        }
        if (args.displaySettings != null) {
            const value_20: DisplaySettings.IDisplaySettings = new DisplaySettings.DisplaySettings(args.displaySettings);
            this.displaySettings = value_20;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[displaySettings] is unset!");
        }
        if (args.hiddenColumns != null) {
            const value_21: Array<number> = new Array<number>();
            args.hiddenColumns.forEach((value_27: number): void => {
                const value_28: number = value_27;
                value_21.push(value_28);
            });
            this.hiddenColumns = value_21;
        }
        if (args.hiddenRows != null) {
            const value_22: Array<number> = new Array<number>();
            args.hiddenRows.forEach((value_29: number): void => {
                const value_30: number = value_29;
                value_22.push(value_30);
            });
            this.hiddenRows = value_22;
        }
        if (args.xAxis != null) {
            const value_23: Axis.IAxis = new Axis.Axis(args.xAxis);
            this.xAxis = value_23;
        }
        if (args.yAxis != null) {
            const value_24: Axis.IAxis = new Axis.Axis(args.yAxis);
            this.yAxis = value_24;
        }
    }
    public static read(input: thrift.TProtocol): ChartAtom {
        return new ChartAtom(ChartAtomCodec.decode(input));
    }
    public static write(args: IChartAtomArgs, output: thrift.TProtocol): void {
        return ChartAtomCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return ChartAtomCodec.encode(this, output);
    }
}
