/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
export interface IRightsArgs {
    syndicatable?: boolean;
    subscriptionDatabases?: boolean;
    developerCommunity?: boolean;
}
export class Rights {
    public syndicatable?: boolean = false;
    public subscriptionDatabases?: boolean = false;
    public developerCommunity?: boolean = false;
    constructor(args?: IRightsArgs) {
        if (args != null && args.syndicatable != null) {
            this.syndicatable = args.syndicatable;
        }
        if (args != null && args.subscriptionDatabases != null) {
            this.subscriptionDatabases = args.subscriptionDatabases;
        }
        if (args != null && args.developerCommunity != null) {
            this.developerCommunity = args.developerCommunity;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("Rights");
        if (this.syndicatable != null) {
            output.writeFieldBegin("syndicatable", thrift.TType.BOOL, 1);
            output.writeBool(this.syndicatable);
            output.writeFieldEnd();
        }
        if (this.subscriptionDatabases != null) {
            output.writeFieldBegin("subscriptionDatabases", thrift.TType.BOOL, 2);
            output.writeBool(this.subscriptionDatabases);
            output.writeFieldEnd();
        }
        if (this.developerCommunity != null) {
            output.writeFieldBegin("developerCommunity", thrift.TType.BOOL, 3);
            output.writeBool(this.developerCommunity);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): Rights {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_1: boolean = input.readBool();
                        _args.syndicatable = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_2: boolean = input.readBool();
                        _args.subscriptionDatabases = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_3: boolean = input.readBool();
                        _args.developerCommunity = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new Rights(_args);
    }
}
