/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
export interface IDisplaySettings {
    showHeadline: boolean;
    showSource: boolean;
    showStandfirst?: boolean;
    showLegend?: boolean;
}
export interface IDisplaySettingsArgs {
    showHeadline?: boolean;
    showSource?: boolean;
    showStandfirst?: boolean;
    showLegend?: boolean;
}
export const DisplaySettingsCodec: thrift.IStructCodec<IDisplaySettingsArgs, IDisplaySettings> = {
    encode(args: IDisplaySettingsArgs, output: thrift.TProtocol): void {
        const obj: any = {
            showHeadline: (args.showHeadline != null ? args.showHeadline : true),
            showSource: (args.showSource != null ? args.showSource : true),
            showStandfirst: args.showStandfirst,
            showLegend: args.showLegend
        };
        output.writeStructBegin("DisplaySettings");
        if (obj.showHeadline != null) {
            output.writeFieldBegin("showHeadline", thrift.TType.BOOL, 1);
            output.writeBool(obj.showHeadline);
            output.writeFieldEnd();
        }
        if (obj.showSource != null) {
            output.writeFieldBegin("showSource", thrift.TType.BOOL, 2);
            output.writeBool(obj.showSource);
            output.writeFieldEnd();
        }
        if (obj.showStandfirst != null) {
            output.writeFieldBegin("showStandfirst", thrift.TType.BOOL, 3);
            output.writeBool(obj.showStandfirst);
            output.writeFieldEnd();
        }
        if (obj.showLegend != null) {
            output.writeFieldBegin("showLegend", thrift.TType.BOOL, 4);
            output.writeBool(obj.showLegend);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IDisplaySettings {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_1: boolean = input.readBool();
                        _args.showHeadline = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_2: boolean = input.readBool();
                        _args.showSource = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_3: boolean = input.readBool();
                        _args.showStandfirst = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_4: boolean = input.readBool();
                        _args.showLegend = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.showHeadline !== undefined && _args.showSource !== undefined) {
            return {
                showHeadline: (_args.showHeadline != null ? _args.showHeadline : true),
                showSource: (_args.showSource != null ? _args.showSource : true),
                showStandfirst: _args.showStandfirst,
                showLegend: _args.showLegend
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read DisplaySettings from input");
        }
    }
};
export class DisplaySettings extends thrift.StructLike implements IDisplaySettings {
    public showHeadline: boolean = true;
    public showSource: boolean = true;
    public showStandfirst?: boolean;
    public showLegend?: boolean;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IDisplaySettingsArgs) {
        super();
        if (args.showHeadline != null) {
            const value_5: boolean = args.showHeadline;
            this.showHeadline = value_5;
        }
        if (args.showSource != null) {
            const value_6: boolean = args.showSource;
            this.showSource = value_6;
        }
        if (args.showStandfirst != null) {
            const value_7: boolean = args.showStandfirst;
            this.showStandfirst = value_7;
        }
        if (args.showLegend != null) {
            const value_8: boolean = args.showLegend;
            this.showLegend = value_8;
        }
    }
    public static read(input: thrift.TProtocol): DisplaySettings {
        return new DisplaySettings(DisplaySettingsCodec.decode(input));
    }
    public static write(args: IDisplaySettingsArgs, output: thrift.TProtocol): void {
        return DisplaySettingsCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return DisplaySettingsCodec.encode(this, output);
    }
}
