/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as BlockAttributes from "./BlockAttributes";
import * as CapiDateTime from "./CapiDateTime";
import * as User from "./User";
import * as BlockElement from "./BlockElement";
export interface IBlockArgs {
    id: string;
    bodyHtml: string;
    bodyTextSummary: string;
    title?: string;
    attributes: BlockAttributes.BlockAttributes;
    published: boolean;
    createdDate?: CapiDateTime.CapiDateTime;
    firstPublishedDate?: CapiDateTime.CapiDateTime;
    publishedDate?: CapiDateTime.CapiDateTime;
    lastModifiedDate?: CapiDateTime.CapiDateTime;
    contributors: Array<string>;
    createdBy?: User.User;
    lastModifiedBy?: User.User;
    elements: Array<BlockElement.BlockElement>;
}
export class Block {
    public id: string;
    public bodyHtml: string;
    public bodyTextSummary: string;
    public title?: string;
    public attributes: BlockAttributes.BlockAttributes;
    public published: boolean;
    public createdDate?: CapiDateTime.CapiDateTime;
    public firstPublishedDate?: CapiDateTime.CapiDateTime;
    public publishedDate?: CapiDateTime.CapiDateTime;
    public lastModifiedDate?: CapiDateTime.CapiDateTime;
    public contributors: Array<string>;
    public createdBy?: User.User;
    public lastModifiedBy?: User.User;
    public elements: Array<BlockElement.BlockElement> = [];
    constructor(args: IBlockArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[id] is unset!");
        }
        if (args != null && args.bodyHtml != null) {
            this.bodyHtml = args.bodyHtml;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[bodyHtml] is unset!");
        }
        if (args != null && args.bodyTextSummary != null) {
            this.bodyTextSummary = args.bodyTextSummary;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[bodyTextSummary] is unset!");
        }
        if (args != null && args.title != null) {
            this.title = args.title;
        }
        if (args != null && args.attributes != null) {
            this.attributes = args.attributes;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[attributes] is unset!");
        }
        if (args != null && args.published != null) {
            this.published = args.published;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[published] is unset!");
        }
        if (args != null && args.createdDate != null) {
            this.createdDate = args.createdDate;
        }
        if (args != null && args.firstPublishedDate != null) {
            this.firstPublishedDate = args.firstPublishedDate;
        }
        if (args != null && args.publishedDate != null) {
            this.publishedDate = args.publishedDate;
        }
        if (args != null && args.lastModifiedDate != null) {
            this.lastModifiedDate = args.lastModifiedDate;
        }
        if (args != null && args.contributors != null) {
            this.contributors = args.contributors;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[contributors] is unset!");
        }
        if (args != null && args.createdBy != null) {
            this.createdBy = args.createdBy;
        }
        if (args != null && args.lastModifiedBy != null) {
            this.lastModifiedBy = args.lastModifiedBy;
        }
        if (args != null && args.elements != null) {
            this.elements = args.elements;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[elements] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("Block");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.TType.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.bodyHtml != null) {
            output.writeFieldBegin("bodyHtml", thrift.TType.STRING, 2);
            output.writeString(this.bodyHtml);
            output.writeFieldEnd();
        }
        if (this.bodyTextSummary != null) {
            output.writeFieldBegin("bodyTextSummary", thrift.TType.STRING, 3);
            output.writeString(this.bodyTextSummary);
            output.writeFieldEnd();
        }
        if (this.title != null) {
            output.writeFieldBegin("title", thrift.TType.STRING, 4);
            output.writeString(this.title);
            output.writeFieldEnd();
        }
        if (this.attributes != null) {
            output.writeFieldBegin("attributes", thrift.TType.STRUCT, 5);
            this.attributes.write(output);
            output.writeFieldEnd();
        }
        if (this.published != null) {
            output.writeFieldBegin("published", thrift.TType.BOOL, 6);
            output.writeBool(this.published);
            output.writeFieldEnd();
        }
        if (this.createdDate != null) {
            output.writeFieldBegin("createdDate", thrift.TType.STRUCT, 7);
            this.createdDate.write(output);
            output.writeFieldEnd();
        }
        if (this.firstPublishedDate != null) {
            output.writeFieldBegin("firstPublishedDate", thrift.TType.STRUCT, 8);
            this.firstPublishedDate.write(output);
            output.writeFieldEnd();
        }
        if (this.publishedDate != null) {
            output.writeFieldBegin("publishedDate", thrift.TType.STRUCT, 9);
            this.publishedDate.write(output);
            output.writeFieldEnd();
        }
        if (this.lastModifiedDate != null) {
            output.writeFieldBegin("lastModifiedDate", thrift.TType.STRUCT, 10);
            this.lastModifiedDate.write(output);
            output.writeFieldEnd();
        }
        if (this.contributors != null) {
            output.writeFieldBegin("contributors", thrift.TType.LIST, 11);
            output.writeListBegin(thrift.TType.STRING, this.contributors.length);
            this.contributors.forEach((value_1: string): void => {
                output.writeString(value_1);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.createdBy != null) {
            output.writeFieldBegin("createdBy", thrift.TType.STRUCT, 12);
            this.createdBy.write(output);
            output.writeFieldEnd();
        }
        if (this.lastModifiedBy != null) {
            output.writeFieldBegin("lastModifiedBy", thrift.TType.STRUCT, 13);
            this.lastModifiedBy.write(output);
            output.writeFieldEnd();
        }
        if (this.elements != null) {
            output.writeFieldBegin("elements", thrift.TType.LIST, 14);
            output.writeListBegin(thrift.TType.STRUCT, this.elements.length);
            this.elements.forEach((value_2: BlockElement.BlockElement): void => {
                value_2.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): Block {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_3: string = input.readString();
                        _args.id = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_4: string = input.readString();
                        _args.bodyHtml = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_5: string = input.readString();
                        _args.bodyTextSummary = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRING) {
                        const value_6: string = input.readString();
                        _args.title = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_7: BlockAttributes.BlockAttributes = BlockAttributes.BlockAttributes.read(input);
                        _args.attributes = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_8: boolean = input.readBool();
                        _args.published = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_9: CapiDateTime.CapiDateTime = CapiDateTime.CapiDateTime.read(input);
                        _args.createdDate = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_10: CapiDateTime.CapiDateTime = CapiDateTime.CapiDateTime.read(input);
                        _args.firstPublishedDate = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_11: CapiDateTime.CapiDateTime = CapiDateTime.CapiDateTime.read(input);
                        _args.publishedDate = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_12: CapiDateTime.CapiDateTime = CapiDateTime.CapiDateTime.read(input);
                        _args.lastModifiedDate = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.TType.LIST) {
                        const value_13: Array<string> = new Array<string>();
                        const metadata_1: thrift.IThriftList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_14: string = input.readString();
                            value_13.push(value_14);
                        }
                        input.readListEnd();
                        _args.contributors = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_15: User.User = User.User.read(input);
                        _args.createdBy = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_16: User.User = User.User.read(input);
                        _args.lastModifiedBy = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.TType.LIST) {
                        const value_17: Array<BlockElement.BlockElement> = new Array<BlockElement.BlockElement>();
                        const metadata_2: thrift.IThriftList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_18: BlockElement.BlockElement = BlockElement.BlockElement.read(input);
                            value_17.push(value_18);
                        }
                        input.readListEnd();
                        _args.elements = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.id !== undefined && _args.bodyHtml !== undefined && _args.bodyTextSummary !== undefined && _args.attributes !== undefined && _args.published !== undefined && _args.contributors !== undefined && _args.elements !== undefined) {
            return new Block(_args);
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read Block from input");
        }
    }
}
