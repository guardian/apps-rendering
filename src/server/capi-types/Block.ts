/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as BlockAttributes from "./BlockAttributes";
import * as CapiDateTime from "./CapiDateTime";
import * as User from "./User";
import * as BlockElement from "./BlockElement";
export interface IBlock {
    id: string;
    bodyHtml: string;
    bodyTextSummary: string;
    title?: string;
    attributes: BlockAttributes.IBlockAttributes;
    published: boolean;
    createdDate?: CapiDateTime.ICapiDateTime;
    firstPublishedDate?: CapiDateTime.ICapiDateTime;
    publishedDate?: CapiDateTime.ICapiDateTime;
    lastModifiedDate?: CapiDateTime.ICapiDateTime;
    contributors: Array<string>;
    createdBy?: User.IUser;
    lastModifiedBy?: User.IUser;
    elements: Array<BlockElement.IBlockElement>;
}
export interface IBlockArgs {
    id: string;
    bodyHtml: string;
    bodyTextSummary: string;
    title?: string;
    attributes: BlockAttributes.IBlockAttributesArgs;
    published: boolean;
    createdDate?: CapiDateTime.ICapiDateTimeArgs;
    firstPublishedDate?: CapiDateTime.ICapiDateTimeArgs;
    publishedDate?: CapiDateTime.ICapiDateTimeArgs;
    lastModifiedDate?: CapiDateTime.ICapiDateTimeArgs;
    contributors: Array<string>;
    createdBy?: User.IUserArgs;
    lastModifiedBy?: User.IUserArgs;
    elements?: Array<BlockElement.IBlockElementArgs>;
}
export const BlockCodec: thrift.IStructCodec<IBlockArgs, IBlock> = {
    encode(args: IBlockArgs, output: thrift.TProtocol): void {
        const obj: any = {
            id: args.id,
            bodyHtml: args.bodyHtml,
            bodyTextSummary: args.bodyTextSummary,
            title: args.title,
            attributes: args.attributes,
            published: args.published,
            createdDate: args.createdDate,
            firstPublishedDate: args.firstPublishedDate,
            publishedDate: args.publishedDate,
            lastModifiedDate: args.lastModifiedDate,
            contributors: args.contributors,
            createdBy: args.createdBy,
            lastModifiedBy: args.lastModifiedBy,
            elements: (args.elements != null ? args.elements : [])
        };
        output.writeStructBegin("Block");
        if (obj.id != null) {
            output.writeFieldBegin("id", thrift.TType.STRING, 1);
            output.writeString(obj.id);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[id] is unset!");
        }
        if (obj.bodyHtml != null) {
            output.writeFieldBegin("bodyHtml", thrift.TType.STRING, 2);
            output.writeString(obj.bodyHtml);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[bodyHtml] is unset!");
        }
        if (obj.bodyTextSummary != null) {
            output.writeFieldBegin("bodyTextSummary", thrift.TType.STRING, 3);
            output.writeString(obj.bodyTextSummary);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[bodyTextSummary] is unset!");
        }
        if (obj.title != null) {
            output.writeFieldBegin("title", thrift.TType.STRING, 4);
            output.writeString(obj.title);
            output.writeFieldEnd();
        }
        if (obj.attributes != null) {
            output.writeFieldBegin("attributes", thrift.TType.STRUCT, 5);
            BlockAttributes.BlockAttributesCodec.encode(obj.attributes, output);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[attributes] is unset!");
        }
        if (obj.published != null) {
            output.writeFieldBegin("published", thrift.TType.BOOL, 6);
            output.writeBool(obj.published);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[published] is unset!");
        }
        if (obj.createdDate != null) {
            output.writeFieldBegin("createdDate", thrift.TType.STRUCT, 7);
            CapiDateTime.CapiDateTimeCodec.encode(obj.createdDate, output);
            output.writeFieldEnd();
        }
        if (obj.firstPublishedDate != null) {
            output.writeFieldBegin("firstPublishedDate", thrift.TType.STRUCT, 8);
            CapiDateTime.CapiDateTimeCodec.encode(obj.firstPublishedDate, output);
            output.writeFieldEnd();
        }
        if (obj.publishedDate != null) {
            output.writeFieldBegin("publishedDate", thrift.TType.STRUCT, 9);
            CapiDateTime.CapiDateTimeCodec.encode(obj.publishedDate, output);
            output.writeFieldEnd();
        }
        if (obj.lastModifiedDate != null) {
            output.writeFieldBegin("lastModifiedDate", thrift.TType.STRUCT, 10);
            CapiDateTime.CapiDateTimeCodec.encode(obj.lastModifiedDate, output);
            output.writeFieldEnd();
        }
        if (obj.contributors != null) {
            output.writeFieldBegin("contributors", thrift.TType.LIST, 11);
            output.writeListBegin(thrift.TType.STRING, obj.contributors.length);
            obj.contributors.forEach((value_1: string): void => {
                output.writeString(value_1);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[contributors] is unset!");
        }
        if (obj.createdBy != null) {
            output.writeFieldBegin("createdBy", thrift.TType.STRUCT, 12);
            User.UserCodec.encode(obj.createdBy, output);
            output.writeFieldEnd();
        }
        if (obj.lastModifiedBy != null) {
            output.writeFieldBegin("lastModifiedBy", thrift.TType.STRUCT, 13);
            User.UserCodec.encode(obj.lastModifiedBy, output);
            output.writeFieldEnd();
        }
        if (obj.elements != null) {
            output.writeFieldBegin("elements", thrift.TType.LIST, 14);
            output.writeListBegin(thrift.TType.STRUCT, obj.elements.length);
            obj.elements.forEach((value_2: BlockElement.IBlockElementArgs): void => {
                BlockElement.BlockElementCodec.encode(value_2, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IBlock {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_3: string = input.readString();
                        _args.id = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_4: string = input.readString();
                        _args.bodyHtml = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_5: string = input.readString();
                        _args.bodyTextSummary = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRING) {
                        const value_6: string = input.readString();
                        _args.title = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_7: BlockAttributes.IBlockAttributes = BlockAttributes.BlockAttributesCodec.decode(input);
                        _args.attributes = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_8: boolean = input.readBool();
                        _args.published = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_9: CapiDateTime.ICapiDateTime = CapiDateTime.CapiDateTimeCodec.decode(input);
                        _args.createdDate = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_10: CapiDateTime.ICapiDateTime = CapiDateTime.CapiDateTimeCodec.decode(input);
                        _args.firstPublishedDate = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_11: CapiDateTime.ICapiDateTime = CapiDateTime.CapiDateTimeCodec.decode(input);
                        _args.publishedDate = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_12: CapiDateTime.ICapiDateTime = CapiDateTime.CapiDateTimeCodec.decode(input);
                        _args.lastModifiedDate = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.TType.LIST) {
                        const value_13: Array<string> = new Array<string>();
                        const metadata_1: thrift.IThriftList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_14: string = input.readString();
                            value_13.push(value_14);
                        }
                        input.readListEnd();
                        _args.contributors = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_15: User.IUser = User.UserCodec.decode(input);
                        _args.createdBy = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_16: User.IUser = User.UserCodec.decode(input);
                        _args.lastModifiedBy = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.TType.LIST) {
                        const value_17: Array<BlockElement.IBlockElement> = new Array<BlockElement.IBlockElement>();
                        const metadata_2: thrift.IThriftList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_18: BlockElement.IBlockElement = BlockElement.BlockElementCodec.decode(input);
                            value_17.push(value_18);
                        }
                        input.readListEnd();
                        _args.elements = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.id !== undefined && _args.bodyHtml !== undefined && _args.bodyTextSummary !== undefined && _args.attributes !== undefined && _args.published !== undefined && _args.contributors !== undefined && _args.elements !== undefined) {
            return {
                id: _args.id,
                bodyHtml: _args.bodyHtml,
                bodyTextSummary: _args.bodyTextSummary,
                title: _args.title,
                attributes: _args.attributes,
                published: _args.published,
                createdDate: _args.createdDate,
                firstPublishedDate: _args.firstPublishedDate,
                publishedDate: _args.publishedDate,
                lastModifiedDate: _args.lastModifiedDate,
                contributors: _args.contributors,
                createdBy: _args.createdBy,
                lastModifiedBy: _args.lastModifiedBy,
                elements: (_args.elements != null ? _args.elements : [])
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read Block from input");
        }
    }
};
export class Block extends thrift.StructLike implements IBlock {
    public id: string;
    public bodyHtml: string;
    public bodyTextSummary: string;
    public title?: string;
    public attributes: BlockAttributes.IBlockAttributes;
    public published: boolean;
    public createdDate?: CapiDateTime.ICapiDateTime;
    public firstPublishedDate?: CapiDateTime.ICapiDateTime;
    public publishedDate?: CapiDateTime.ICapiDateTime;
    public lastModifiedDate?: CapiDateTime.ICapiDateTime;
    public contributors: Array<string>;
    public createdBy?: User.IUser;
    public lastModifiedBy?: User.IUser;
    public elements: Array<BlockElement.IBlockElement> = [];
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IBlockArgs) {
        super();
        if (args.id != null) {
            const value_19: string = args.id;
            this.id = value_19;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[id] is unset!");
        }
        if (args.bodyHtml != null) {
            const value_20: string = args.bodyHtml;
            this.bodyHtml = value_20;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[bodyHtml] is unset!");
        }
        if (args.bodyTextSummary != null) {
            const value_21: string = args.bodyTextSummary;
            this.bodyTextSummary = value_21;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[bodyTextSummary] is unset!");
        }
        if (args.title != null) {
            const value_22: string = args.title;
            this.title = value_22;
        }
        if (args.attributes != null) {
            const value_23: BlockAttributes.IBlockAttributes = new BlockAttributes.BlockAttributes(args.attributes);
            this.attributes = value_23;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[attributes] is unset!");
        }
        if (args.published != null) {
            const value_24: boolean = args.published;
            this.published = value_24;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[published] is unset!");
        }
        if (args.createdDate != null) {
            const value_25: CapiDateTime.ICapiDateTime = new CapiDateTime.CapiDateTime(args.createdDate);
            this.createdDate = value_25;
        }
        if (args.firstPublishedDate != null) {
            const value_26: CapiDateTime.ICapiDateTime = new CapiDateTime.CapiDateTime(args.firstPublishedDate);
            this.firstPublishedDate = value_26;
        }
        if (args.publishedDate != null) {
            const value_27: CapiDateTime.ICapiDateTime = new CapiDateTime.CapiDateTime(args.publishedDate);
            this.publishedDate = value_27;
        }
        if (args.lastModifiedDate != null) {
            const value_28: CapiDateTime.ICapiDateTime = new CapiDateTime.CapiDateTime(args.lastModifiedDate);
            this.lastModifiedDate = value_28;
        }
        if (args.contributors != null) {
            const value_29: Array<string> = new Array<string>();
            args.contributors.forEach((value_33: string): void => {
                const value_34: string = value_33;
                value_29.push(value_34);
            });
            this.contributors = value_29;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[contributors] is unset!");
        }
        if (args.createdBy != null) {
            const value_30: User.IUser = new User.User(args.createdBy);
            this.createdBy = value_30;
        }
        if (args.lastModifiedBy != null) {
            const value_31: User.IUser = new User.User(args.lastModifiedBy);
            this.lastModifiedBy = value_31;
        }
        if (args.elements != null) {
            const value_32: Array<BlockElement.IBlockElement> = new Array<BlockElement.IBlockElement>();
            args.elements.forEach((value_35: BlockElement.IBlockElementArgs): void => {
                const value_36: BlockElement.IBlockElement = new BlockElement.BlockElement(value_35);
                value_32.push(value_36);
            });
            this.elements = value_32;
        }
    }
    public static read(input: thrift.TProtocol): Block {
        return new Block(BlockCodec.decode(input));
    }
    public static write(args: IBlockArgs, output: thrift.TProtocol): void {
        return BlockCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return BlockCodec.encode(this, output);
    }
}
