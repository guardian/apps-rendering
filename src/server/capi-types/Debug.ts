/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as CapiDateTime from "./CapiDateTime";
import { Int64 } from "@creditkarma/thrift-server-core";
export interface IDebugArgs {
    lastSeenByPorterAt?: CapiDateTime.CapiDateTime;
    revisionSeenByPorter?: number | Int64;
    contentSource?: string;
    originatingSystem?: string;
}
export class Debug {
    public lastSeenByPorterAt?: CapiDateTime.CapiDateTime;
    public revisionSeenByPorter?: Int64;
    public contentSource?: string;
    public originatingSystem?: string;
    constructor(args?: IDebugArgs) {
        if (args != null && args.lastSeenByPorterAt != null) {
            this.lastSeenByPorterAt = args.lastSeenByPorterAt;
        }
        if (args != null && args.revisionSeenByPorter != null) {
            if (typeof args.revisionSeenByPorter === "number") {
                this.revisionSeenByPorter = new Int64(args.revisionSeenByPorter);
            }
            else {
                this.revisionSeenByPorter = args.revisionSeenByPorter;
            }
        }
        if (args != null && args.contentSource != null) {
            this.contentSource = args.contentSource;
        }
        if (args != null && args.originatingSystem != null) {
            this.originatingSystem = args.originatingSystem;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("Debug");
        if (this.lastSeenByPorterAt != null) {
            output.writeFieldBegin("lastSeenByPorterAt", thrift.TType.STRUCT, 1);
            this.lastSeenByPorterAt.write(output);
            output.writeFieldEnd();
        }
        if (this.revisionSeenByPorter != null) {
            output.writeFieldBegin("revisionSeenByPorter", thrift.TType.I64, 2);
            output.writeI64(this.revisionSeenByPorter);
            output.writeFieldEnd();
        }
        if (this.contentSource != null) {
            output.writeFieldBegin("contentSource", thrift.TType.STRING, 3);
            output.writeString(this.contentSource);
            output.writeFieldEnd();
        }
        if (this.originatingSystem != null) {
            output.writeFieldBegin("originatingSystem", thrift.TType.STRING, 4);
            output.writeString(this.originatingSystem);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): Debug {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_1: CapiDateTime.CapiDateTime = CapiDateTime.CapiDateTime.read(input);
                        _args.lastSeenByPorterAt = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.I64) {
                        const value_2: Int64 = input.readI64();
                        _args.revisionSeenByPorter = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_3: string = input.readString();
                        _args.contentSource = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRING) {
                        const value_4: string = input.readString();
                        _args.originatingSystem = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new Debug(_args);
    }
}
