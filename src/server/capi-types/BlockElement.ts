/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as ElementType from "./ElementType";
import * as Asset from "./Asset";
import * as TextElementFields from "./TextElementFields";
import * as VideoElementFields from "./VideoElementFields";
import * as TweetElementFields from "./TweetElementFields";
import * as ImageElementFields from "./ImageElementFields";
import * as AudioElementFields from "./AudioElementFields";
import * as PullquoteElementFields from "./PullquoteElementFields";
import * as InteractiveElementFields from "./InteractiveElementFields";
import * as StandardElementFields from "./StandardElementFields";
import * as WitnessElementFields from "./WitnessElementFields";
import * as RichLinkElementFields from "./RichLinkElementFields";
import * as MembershipElementFields from "./MembershipElementFields";
import * as EmbedElementFields from "./EmbedElementFields";
import * as InstagramElementFields from "./InstagramElementFields";
import * as CommentElementFields from "./CommentElementFields";
import * as VineElementFields from "./VineElementFields";
import * as ContentAtomElementFields from "./ContentAtomElementFields";
export interface IBlockElement {
    type: ElementType.ElementType;
    assets: Array<Asset.IAsset>;
    textTypeData?: TextElementFields.ITextElementFields;
    videoTypeData?: VideoElementFields.IVideoElementFields;
    tweetTypeData?: TweetElementFields.ITweetElementFields;
    imageTypeData?: ImageElementFields.IImageElementFields;
    audioTypeData?: AudioElementFields.IAudioElementFields;
    pullquoteTypeData?: PullquoteElementFields.IPullquoteElementFields;
    interactiveTypeData?: InteractiveElementFields.IInteractiveElementFields;
    mapTypeData?: StandardElementFields.IStandardElementFields;
    documentTypeData?: StandardElementFields.IStandardElementFields;
    tableTypeData?: StandardElementFields.IStandardElementFields;
    witnessTypeData?: WitnessElementFields.IWitnessElementFields;
    richLinkTypeData?: RichLinkElementFields.IRichLinkElementFields;
    membershipTypeData?: MembershipElementFields.IMembershipElementFields;
    embedTypeData?: EmbedElementFields.IEmbedElementFields;
    instagramTypeData?: InstagramElementFields.IInstagramElementFields;
    commentTypeData?: CommentElementFields.ICommentElementFields;
    vineTypeData?: VineElementFields.IVineElementFields;
    contentAtomTypeData?: ContentAtomElementFields.IContentAtomElementFields;
}
export interface IBlockElementArgs {
    type: ElementType.ElementType;
    assets: Array<Asset.IAssetArgs>;
    textTypeData?: TextElementFields.ITextElementFieldsArgs;
    videoTypeData?: VideoElementFields.IVideoElementFieldsArgs;
    tweetTypeData?: TweetElementFields.ITweetElementFieldsArgs;
    imageTypeData?: ImageElementFields.IImageElementFieldsArgs;
    audioTypeData?: AudioElementFields.IAudioElementFieldsArgs;
    pullquoteTypeData?: PullquoteElementFields.IPullquoteElementFieldsArgs;
    interactiveTypeData?: InteractiveElementFields.IInteractiveElementFieldsArgs;
    mapTypeData?: StandardElementFields.IStandardElementFieldsArgs;
    documentTypeData?: StandardElementFields.IStandardElementFieldsArgs;
    tableTypeData?: StandardElementFields.IStandardElementFieldsArgs;
    witnessTypeData?: WitnessElementFields.IWitnessElementFieldsArgs;
    richLinkTypeData?: RichLinkElementFields.IRichLinkElementFieldsArgs;
    membershipTypeData?: MembershipElementFields.IMembershipElementFieldsArgs;
    embedTypeData?: EmbedElementFields.IEmbedElementFieldsArgs;
    instagramTypeData?: InstagramElementFields.IInstagramElementFieldsArgs;
    commentTypeData?: CommentElementFields.ICommentElementFieldsArgs;
    vineTypeData?: VineElementFields.IVineElementFieldsArgs;
    contentAtomTypeData?: ContentAtomElementFields.IContentAtomElementFieldsArgs;
}
export const BlockElementCodec: thrift.IStructCodec<IBlockElementArgs, IBlockElement> = {
    encode(args: IBlockElementArgs, output: thrift.TProtocol): void {
        const obj: any = {
            type: args.type,
            assets: args.assets,
            textTypeData: args.textTypeData,
            videoTypeData: args.videoTypeData,
            tweetTypeData: args.tweetTypeData,
            imageTypeData: args.imageTypeData,
            audioTypeData: args.audioTypeData,
            pullquoteTypeData: args.pullquoteTypeData,
            interactiveTypeData: args.interactiveTypeData,
            mapTypeData: args.mapTypeData,
            documentTypeData: args.documentTypeData,
            tableTypeData: args.tableTypeData,
            witnessTypeData: args.witnessTypeData,
            richLinkTypeData: args.richLinkTypeData,
            membershipTypeData: args.membershipTypeData,
            embedTypeData: args.embedTypeData,
            instagramTypeData: args.instagramTypeData,
            commentTypeData: args.commentTypeData,
            vineTypeData: args.vineTypeData,
            contentAtomTypeData: args.contentAtomTypeData
        };
        output.writeStructBegin("BlockElement");
        if (obj.type != null) {
            output.writeFieldBegin("type", thrift.TType.I32, 1);
            output.writeI32(obj.type);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[type] is unset!");
        }
        if (obj.assets != null) {
            output.writeFieldBegin("assets", thrift.TType.LIST, 2);
            output.writeListBegin(thrift.TType.STRUCT, obj.assets.length);
            obj.assets.forEach((value_1: Asset.IAssetArgs): void => {
                Asset.AssetCodec.encode(value_1, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[assets] is unset!");
        }
        if (obj.textTypeData != null) {
            output.writeFieldBegin("textTypeData", thrift.TType.STRUCT, 3);
            TextElementFields.TextElementFieldsCodec.encode(obj.textTypeData, output);
            output.writeFieldEnd();
        }
        if (obj.videoTypeData != null) {
            output.writeFieldBegin("videoTypeData", thrift.TType.STRUCT, 4);
            VideoElementFields.VideoElementFieldsCodec.encode(obj.videoTypeData, output);
            output.writeFieldEnd();
        }
        if (obj.tweetTypeData != null) {
            output.writeFieldBegin("tweetTypeData", thrift.TType.STRUCT, 5);
            TweetElementFields.TweetElementFieldsCodec.encode(obj.tweetTypeData, output);
            output.writeFieldEnd();
        }
        if (obj.imageTypeData != null) {
            output.writeFieldBegin("imageTypeData", thrift.TType.STRUCT, 6);
            ImageElementFields.ImageElementFieldsCodec.encode(obj.imageTypeData, output);
            output.writeFieldEnd();
        }
        if (obj.audioTypeData != null) {
            output.writeFieldBegin("audioTypeData", thrift.TType.STRUCT, 7);
            AudioElementFields.AudioElementFieldsCodec.encode(obj.audioTypeData, output);
            output.writeFieldEnd();
        }
        if (obj.pullquoteTypeData != null) {
            output.writeFieldBegin("pullquoteTypeData", thrift.TType.STRUCT, 8);
            PullquoteElementFields.PullquoteElementFieldsCodec.encode(obj.pullquoteTypeData, output);
            output.writeFieldEnd();
        }
        if (obj.interactiveTypeData != null) {
            output.writeFieldBegin("interactiveTypeData", thrift.TType.STRUCT, 9);
            InteractiveElementFields.InteractiveElementFieldsCodec.encode(obj.interactiveTypeData, output);
            output.writeFieldEnd();
        }
        if (obj.mapTypeData != null) {
            output.writeFieldBegin("mapTypeData", thrift.TType.STRUCT, 10);
            StandardElementFields.StandardElementFieldsCodec.encode(obj.mapTypeData, output);
            output.writeFieldEnd();
        }
        if (obj.documentTypeData != null) {
            output.writeFieldBegin("documentTypeData", thrift.TType.STRUCT, 11);
            StandardElementFields.StandardElementFieldsCodec.encode(obj.documentTypeData, output);
            output.writeFieldEnd();
        }
        if (obj.tableTypeData != null) {
            output.writeFieldBegin("tableTypeData", thrift.TType.STRUCT, 12);
            StandardElementFields.StandardElementFieldsCodec.encode(obj.tableTypeData, output);
            output.writeFieldEnd();
        }
        if (obj.witnessTypeData != null) {
            output.writeFieldBegin("witnessTypeData", thrift.TType.STRUCT, 13);
            WitnessElementFields.WitnessElementFieldsCodec.encode(obj.witnessTypeData, output);
            output.writeFieldEnd();
        }
        if (obj.richLinkTypeData != null) {
            output.writeFieldBegin("richLinkTypeData", thrift.TType.STRUCT, 14);
            RichLinkElementFields.RichLinkElementFieldsCodec.encode(obj.richLinkTypeData, output);
            output.writeFieldEnd();
        }
        if (obj.membershipTypeData != null) {
            output.writeFieldBegin("membershipTypeData", thrift.TType.STRUCT, 15);
            MembershipElementFields.MembershipElementFieldsCodec.encode(obj.membershipTypeData, output);
            output.writeFieldEnd();
        }
        if (obj.embedTypeData != null) {
            output.writeFieldBegin("embedTypeData", thrift.TType.STRUCT, 16);
            EmbedElementFields.EmbedElementFieldsCodec.encode(obj.embedTypeData, output);
            output.writeFieldEnd();
        }
        if (obj.instagramTypeData != null) {
            output.writeFieldBegin("instagramTypeData", thrift.TType.STRUCT, 17);
            InstagramElementFields.InstagramElementFieldsCodec.encode(obj.instagramTypeData, output);
            output.writeFieldEnd();
        }
        if (obj.commentTypeData != null) {
            output.writeFieldBegin("commentTypeData", thrift.TType.STRUCT, 18);
            CommentElementFields.CommentElementFieldsCodec.encode(obj.commentTypeData, output);
            output.writeFieldEnd();
        }
        if (obj.vineTypeData != null) {
            output.writeFieldBegin("vineTypeData", thrift.TType.STRUCT, 19);
            VineElementFields.VineElementFieldsCodec.encode(obj.vineTypeData, output);
            output.writeFieldEnd();
        }
        if (obj.contentAtomTypeData != null) {
            output.writeFieldBegin("contentAtomTypeData", thrift.TType.STRUCT, 20);
            ContentAtomElementFields.ContentAtomElementFieldsCodec.encode(obj.contentAtomTypeData, output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IBlockElement {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.I32) {
                        const value_2: ElementType.ElementType = input.readI32();
                        _args.type = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.LIST) {
                        const value_3: Array<Asset.IAsset> = new Array<Asset.IAsset>();
                        const metadata_1: thrift.IThriftList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_4: Asset.IAsset = Asset.AssetCodec.decode(input);
                            value_3.push(value_4);
                        }
                        input.readListEnd();
                        _args.assets = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_5: TextElementFields.ITextElementFields = TextElementFields.TextElementFieldsCodec.decode(input);
                        _args.textTypeData = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_6: VideoElementFields.IVideoElementFields = VideoElementFields.VideoElementFieldsCodec.decode(input);
                        _args.videoTypeData = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_7: TweetElementFields.ITweetElementFields = TweetElementFields.TweetElementFieldsCodec.decode(input);
                        _args.tweetTypeData = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_8: ImageElementFields.IImageElementFields = ImageElementFields.ImageElementFieldsCodec.decode(input);
                        _args.imageTypeData = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_9: AudioElementFields.IAudioElementFields = AudioElementFields.AudioElementFieldsCodec.decode(input);
                        _args.audioTypeData = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_10: PullquoteElementFields.IPullquoteElementFields = PullquoteElementFields.PullquoteElementFieldsCodec.decode(input);
                        _args.pullquoteTypeData = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_11: InteractiveElementFields.IInteractiveElementFields = InteractiveElementFields.InteractiveElementFieldsCodec.decode(input);
                        _args.interactiveTypeData = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_12: StandardElementFields.IStandardElementFields = StandardElementFields.StandardElementFieldsCodec.decode(input);
                        _args.mapTypeData = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_13: StandardElementFields.IStandardElementFields = StandardElementFields.StandardElementFieldsCodec.decode(input);
                        _args.documentTypeData = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_14: StandardElementFields.IStandardElementFields = StandardElementFields.StandardElementFieldsCodec.decode(input);
                        _args.tableTypeData = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_15: WitnessElementFields.IWitnessElementFields = WitnessElementFields.WitnessElementFieldsCodec.decode(input);
                        _args.witnessTypeData = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_16: RichLinkElementFields.IRichLinkElementFields = RichLinkElementFields.RichLinkElementFieldsCodec.decode(input);
                        _args.richLinkTypeData = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_17: MembershipElementFields.IMembershipElementFields = MembershipElementFields.MembershipElementFieldsCodec.decode(input);
                        _args.membershipTypeData = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 16:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_18: EmbedElementFields.IEmbedElementFields = EmbedElementFields.EmbedElementFieldsCodec.decode(input);
                        _args.embedTypeData = value_18;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 17:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_19: InstagramElementFields.IInstagramElementFields = InstagramElementFields.InstagramElementFieldsCodec.decode(input);
                        _args.instagramTypeData = value_19;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 18:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_20: CommentElementFields.ICommentElementFields = CommentElementFields.CommentElementFieldsCodec.decode(input);
                        _args.commentTypeData = value_20;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 19:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_21: VineElementFields.IVineElementFields = VineElementFields.VineElementFieldsCodec.decode(input);
                        _args.vineTypeData = value_21;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 20:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_22: ContentAtomElementFields.IContentAtomElementFields = ContentAtomElementFields.ContentAtomElementFieldsCodec.decode(input);
                        _args.contentAtomTypeData = value_22;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.type !== undefined && _args.assets !== undefined) {
            return {
                type: _args.type,
                assets: _args.assets,
                textTypeData: _args.textTypeData,
                videoTypeData: _args.videoTypeData,
                tweetTypeData: _args.tweetTypeData,
                imageTypeData: _args.imageTypeData,
                audioTypeData: _args.audioTypeData,
                pullquoteTypeData: _args.pullquoteTypeData,
                interactiveTypeData: _args.interactiveTypeData,
                mapTypeData: _args.mapTypeData,
                documentTypeData: _args.documentTypeData,
                tableTypeData: _args.tableTypeData,
                witnessTypeData: _args.witnessTypeData,
                richLinkTypeData: _args.richLinkTypeData,
                membershipTypeData: _args.membershipTypeData,
                embedTypeData: _args.embedTypeData,
                instagramTypeData: _args.instagramTypeData,
                commentTypeData: _args.commentTypeData,
                vineTypeData: _args.vineTypeData,
                contentAtomTypeData: _args.contentAtomTypeData
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read BlockElement from input");
        }
    }
};
export class BlockElement extends thrift.StructLike implements IBlockElement {
    public type: ElementType.ElementType;
    public assets: Array<Asset.IAsset>;
    public textTypeData?: TextElementFields.ITextElementFields;
    public videoTypeData?: VideoElementFields.IVideoElementFields;
    public tweetTypeData?: TweetElementFields.ITweetElementFields;
    public imageTypeData?: ImageElementFields.IImageElementFields;
    public audioTypeData?: AudioElementFields.IAudioElementFields;
    public pullquoteTypeData?: PullquoteElementFields.IPullquoteElementFields;
    public interactiveTypeData?: InteractiveElementFields.IInteractiveElementFields;
    public mapTypeData?: StandardElementFields.IStandardElementFields;
    public documentTypeData?: StandardElementFields.IStandardElementFields;
    public tableTypeData?: StandardElementFields.IStandardElementFields;
    public witnessTypeData?: WitnessElementFields.IWitnessElementFields;
    public richLinkTypeData?: RichLinkElementFields.IRichLinkElementFields;
    public membershipTypeData?: MembershipElementFields.IMembershipElementFields;
    public embedTypeData?: EmbedElementFields.IEmbedElementFields;
    public instagramTypeData?: InstagramElementFields.IInstagramElementFields;
    public commentTypeData?: CommentElementFields.ICommentElementFields;
    public vineTypeData?: VineElementFields.IVineElementFields;
    public contentAtomTypeData?: ContentAtomElementFields.IContentAtomElementFields;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IBlockElementArgs) {
        super();
        if (args.type != null) {
            const value_23: ElementType.ElementType = args.type;
            this.type = value_23;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[type] is unset!");
        }
        if (args.assets != null) {
            const value_24: Array<Asset.IAsset> = new Array<Asset.IAsset>();
            args.assets.forEach((value_43: Asset.IAssetArgs): void => {
                const value_44: Asset.IAsset = new Asset.Asset(value_43);
                value_24.push(value_44);
            });
            this.assets = value_24;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[assets] is unset!");
        }
        if (args.textTypeData != null) {
            const value_25: TextElementFields.ITextElementFields = new TextElementFields.TextElementFields(args.textTypeData);
            this.textTypeData = value_25;
        }
        if (args.videoTypeData != null) {
            const value_26: VideoElementFields.IVideoElementFields = new VideoElementFields.VideoElementFields(args.videoTypeData);
            this.videoTypeData = value_26;
        }
        if (args.tweetTypeData != null) {
            const value_27: TweetElementFields.ITweetElementFields = new TweetElementFields.TweetElementFields(args.tweetTypeData);
            this.tweetTypeData = value_27;
        }
        if (args.imageTypeData != null) {
            const value_28: ImageElementFields.IImageElementFields = new ImageElementFields.ImageElementFields(args.imageTypeData);
            this.imageTypeData = value_28;
        }
        if (args.audioTypeData != null) {
            const value_29: AudioElementFields.IAudioElementFields = new AudioElementFields.AudioElementFields(args.audioTypeData);
            this.audioTypeData = value_29;
        }
        if (args.pullquoteTypeData != null) {
            const value_30: PullquoteElementFields.IPullquoteElementFields = new PullquoteElementFields.PullquoteElementFields(args.pullquoteTypeData);
            this.pullquoteTypeData = value_30;
        }
        if (args.interactiveTypeData != null) {
            const value_31: InteractiveElementFields.IInteractiveElementFields = new InteractiveElementFields.InteractiveElementFields(args.interactiveTypeData);
            this.interactiveTypeData = value_31;
        }
        if (args.mapTypeData != null) {
            const value_32: StandardElementFields.IStandardElementFields = new StandardElementFields.StandardElementFields(args.mapTypeData);
            this.mapTypeData = value_32;
        }
        if (args.documentTypeData != null) {
            const value_33: StandardElementFields.IStandardElementFields = new StandardElementFields.StandardElementFields(args.documentTypeData);
            this.documentTypeData = value_33;
        }
        if (args.tableTypeData != null) {
            const value_34: StandardElementFields.IStandardElementFields = new StandardElementFields.StandardElementFields(args.tableTypeData);
            this.tableTypeData = value_34;
        }
        if (args.witnessTypeData != null) {
            const value_35: WitnessElementFields.IWitnessElementFields = new WitnessElementFields.WitnessElementFields(args.witnessTypeData);
            this.witnessTypeData = value_35;
        }
        if (args.richLinkTypeData != null) {
            const value_36: RichLinkElementFields.IRichLinkElementFields = new RichLinkElementFields.RichLinkElementFields(args.richLinkTypeData);
            this.richLinkTypeData = value_36;
        }
        if (args.membershipTypeData != null) {
            const value_37: MembershipElementFields.IMembershipElementFields = new MembershipElementFields.MembershipElementFields(args.membershipTypeData);
            this.membershipTypeData = value_37;
        }
        if (args.embedTypeData != null) {
            const value_38: EmbedElementFields.IEmbedElementFields = new EmbedElementFields.EmbedElementFields(args.embedTypeData);
            this.embedTypeData = value_38;
        }
        if (args.instagramTypeData != null) {
            const value_39: InstagramElementFields.IInstagramElementFields = new InstagramElementFields.InstagramElementFields(args.instagramTypeData);
            this.instagramTypeData = value_39;
        }
        if (args.commentTypeData != null) {
            const value_40: CommentElementFields.ICommentElementFields = new CommentElementFields.CommentElementFields(args.commentTypeData);
            this.commentTypeData = value_40;
        }
        if (args.vineTypeData != null) {
            const value_41: VineElementFields.IVineElementFields = new VineElementFields.VineElementFields(args.vineTypeData);
            this.vineTypeData = value_41;
        }
        if (args.contentAtomTypeData != null) {
            const value_42: ContentAtomElementFields.IContentAtomElementFields = new ContentAtomElementFields.ContentAtomElementFields(args.contentAtomTypeData);
            this.contentAtomTypeData = value_42;
        }
    }
    public static read(input: thrift.TProtocol): BlockElement {
        return new BlockElement(BlockElementCodec.decode(input));
    }
    public static write(args: IBlockElementArgs, output: thrift.TProtocol): void {
        return BlockElementCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return BlockElementCodec.encode(this, output);
    }
}
