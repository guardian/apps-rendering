/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as ElementType from "./ElementType";
import * as Asset from "./Asset";
import * as TextElementFields from "./TextElementFields";
import * as VideoElementFields from "./VideoElementFields";
import * as TweetElementFields from "./TweetElementFields";
import * as ImageElementFields from "./ImageElementFields";
import * as AudioElementFields from "./AudioElementFields";
import * as PullquoteElementFields from "./PullquoteElementFields";
import * as InteractiveElementFields from "./InteractiveElementFields";
import * as StandardElementFields from "./StandardElementFields";
import * as WitnessElementFields from "./WitnessElementFields";
import * as RichLinkElementFields from "./RichLinkElementFields";
import * as MembershipElementFields from "./MembershipElementFields";
import * as EmbedElementFields from "./EmbedElementFields";
import * as InstagramElementFields from "./InstagramElementFields";
import * as CommentElementFields from "./CommentElementFields";
import * as VineElementFields from "./VineElementFields";
import * as ContentAtomElementFields from "./ContentAtomElementFields";
export interface IBlockElementArgs {
    type: ElementType.ElementType;
    assets: Array<Asset.Asset>;
    textTypeData?: TextElementFields.TextElementFields;
    videoTypeData?: VideoElementFields.VideoElementFields;
    tweetTypeData?: TweetElementFields.TweetElementFields;
    imageTypeData?: ImageElementFields.ImageElementFields;
    audioTypeData?: AudioElementFields.AudioElementFields;
    pullquoteTypeData?: PullquoteElementFields.PullquoteElementFields;
    interactiveTypeData?: InteractiveElementFields.InteractiveElementFields;
    mapTypeData?: StandardElementFields.StandardElementFields;
    documentTypeData?: StandardElementFields.StandardElementFields;
    tableTypeData?: StandardElementFields.StandardElementFields;
    witnessTypeData?: WitnessElementFields.WitnessElementFields;
    richLinkTypeData?: RichLinkElementFields.RichLinkElementFields;
    membershipTypeData?: MembershipElementFields.MembershipElementFields;
    embedTypeData?: EmbedElementFields.EmbedElementFields;
    instagramTypeData?: InstagramElementFields.InstagramElementFields;
    commentTypeData?: CommentElementFields.CommentElementFields;
    vineTypeData?: VineElementFields.VineElementFields;
    contentAtomTypeData?: ContentAtomElementFields.ContentAtomElementFields;
}
export class BlockElement {
    public type: ElementType.ElementType;
    public assets: Array<Asset.Asset>;
    public textTypeData?: TextElementFields.TextElementFields;
    public videoTypeData?: VideoElementFields.VideoElementFields;
    public tweetTypeData?: TweetElementFields.TweetElementFields;
    public imageTypeData?: ImageElementFields.ImageElementFields;
    public audioTypeData?: AudioElementFields.AudioElementFields;
    public pullquoteTypeData?: PullquoteElementFields.PullquoteElementFields;
    public interactiveTypeData?: InteractiveElementFields.InteractiveElementFields;
    public mapTypeData?: StandardElementFields.StandardElementFields;
    public documentTypeData?: StandardElementFields.StandardElementFields;
    public tableTypeData?: StandardElementFields.StandardElementFields;
    public witnessTypeData?: WitnessElementFields.WitnessElementFields;
    public richLinkTypeData?: RichLinkElementFields.RichLinkElementFields;
    public membershipTypeData?: MembershipElementFields.MembershipElementFields;
    public embedTypeData?: EmbedElementFields.EmbedElementFields;
    public instagramTypeData?: InstagramElementFields.InstagramElementFields;
    public commentTypeData?: CommentElementFields.CommentElementFields;
    public vineTypeData?: VineElementFields.VineElementFields;
    public contentAtomTypeData?: ContentAtomElementFields.ContentAtomElementFields;
    constructor(args: IBlockElementArgs) {
        if (args != null && args.type != null) {
            this.type = args.type;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[type] is unset!");
        }
        if (args != null && args.assets != null) {
            this.assets = args.assets;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[assets] is unset!");
        }
        if (args != null && args.textTypeData != null) {
            this.textTypeData = args.textTypeData;
        }
        if (args != null && args.videoTypeData != null) {
            this.videoTypeData = args.videoTypeData;
        }
        if (args != null && args.tweetTypeData != null) {
            this.tweetTypeData = args.tweetTypeData;
        }
        if (args != null && args.imageTypeData != null) {
            this.imageTypeData = args.imageTypeData;
        }
        if (args != null && args.audioTypeData != null) {
            this.audioTypeData = args.audioTypeData;
        }
        if (args != null && args.pullquoteTypeData != null) {
            this.pullquoteTypeData = args.pullquoteTypeData;
        }
        if (args != null && args.interactiveTypeData != null) {
            this.interactiveTypeData = args.interactiveTypeData;
        }
        if (args != null && args.mapTypeData != null) {
            this.mapTypeData = args.mapTypeData;
        }
        if (args != null && args.documentTypeData != null) {
            this.documentTypeData = args.documentTypeData;
        }
        if (args != null && args.tableTypeData != null) {
            this.tableTypeData = args.tableTypeData;
        }
        if (args != null && args.witnessTypeData != null) {
            this.witnessTypeData = args.witnessTypeData;
        }
        if (args != null && args.richLinkTypeData != null) {
            this.richLinkTypeData = args.richLinkTypeData;
        }
        if (args != null && args.membershipTypeData != null) {
            this.membershipTypeData = args.membershipTypeData;
        }
        if (args != null && args.embedTypeData != null) {
            this.embedTypeData = args.embedTypeData;
        }
        if (args != null && args.instagramTypeData != null) {
            this.instagramTypeData = args.instagramTypeData;
        }
        if (args != null && args.commentTypeData != null) {
            this.commentTypeData = args.commentTypeData;
        }
        if (args != null && args.vineTypeData != null) {
            this.vineTypeData = args.vineTypeData;
        }
        if (args != null && args.contentAtomTypeData != null) {
            this.contentAtomTypeData = args.contentAtomTypeData;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("BlockElement");
        if (this.type != null) {
            output.writeFieldBegin("type", thrift.TType.I32, 1);
            output.writeI32(this.type);
            output.writeFieldEnd();
        }
        if (this.assets != null) {
            output.writeFieldBegin("assets", thrift.TType.LIST, 2);
            output.writeListBegin(thrift.TType.STRUCT, this.assets.length);
            this.assets.forEach((value_1: Asset.Asset): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.textTypeData != null) {
            output.writeFieldBegin("textTypeData", thrift.TType.STRUCT, 3);
            this.textTypeData.write(output);
            output.writeFieldEnd();
        }
        if (this.videoTypeData != null) {
            output.writeFieldBegin("videoTypeData", thrift.TType.STRUCT, 4);
            this.videoTypeData.write(output);
            output.writeFieldEnd();
        }
        if (this.tweetTypeData != null) {
            output.writeFieldBegin("tweetTypeData", thrift.TType.STRUCT, 5);
            this.tweetTypeData.write(output);
            output.writeFieldEnd();
        }
        if (this.imageTypeData != null) {
            output.writeFieldBegin("imageTypeData", thrift.TType.STRUCT, 6);
            this.imageTypeData.write(output);
            output.writeFieldEnd();
        }
        if (this.audioTypeData != null) {
            output.writeFieldBegin("audioTypeData", thrift.TType.STRUCT, 7);
            this.audioTypeData.write(output);
            output.writeFieldEnd();
        }
        if (this.pullquoteTypeData != null) {
            output.writeFieldBegin("pullquoteTypeData", thrift.TType.STRUCT, 8);
            this.pullquoteTypeData.write(output);
            output.writeFieldEnd();
        }
        if (this.interactiveTypeData != null) {
            output.writeFieldBegin("interactiveTypeData", thrift.TType.STRUCT, 9);
            this.interactiveTypeData.write(output);
            output.writeFieldEnd();
        }
        if (this.mapTypeData != null) {
            output.writeFieldBegin("mapTypeData", thrift.TType.STRUCT, 10);
            this.mapTypeData.write(output);
            output.writeFieldEnd();
        }
        if (this.documentTypeData != null) {
            output.writeFieldBegin("documentTypeData", thrift.TType.STRUCT, 11);
            this.documentTypeData.write(output);
            output.writeFieldEnd();
        }
        if (this.tableTypeData != null) {
            output.writeFieldBegin("tableTypeData", thrift.TType.STRUCT, 12);
            this.tableTypeData.write(output);
            output.writeFieldEnd();
        }
        if (this.witnessTypeData != null) {
            output.writeFieldBegin("witnessTypeData", thrift.TType.STRUCT, 13);
            this.witnessTypeData.write(output);
            output.writeFieldEnd();
        }
        if (this.richLinkTypeData != null) {
            output.writeFieldBegin("richLinkTypeData", thrift.TType.STRUCT, 14);
            this.richLinkTypeData.write(output);
            output.writeFieldEnd();
        }
        if (this.membershipTypeData != null) {
            output.writeFieldBegin("membershipTypeData", thrift.TType.STRUCT, 15);
            this.membershipTypeData.write(output);
            output.writeFieldEnd();
        }
        if (this.embedTypeData != null) {
            output.writeFieldBegin("embedTypeData", thrift.TType.STRUCT, 16);
            this.embedTypeData.write(output);
            output.writeFieldEnd();
        }
        if (this.instagramTypeData != null) {
            output.writeFieldBegin("instagramTypeData", thrift.TType.STRUCT, 17);
            this.instagramTypeData.write(output);
            output.writeFieldEnd();
        }
        if (this.commentTypeData != null) {
            output.writeFieldBegin("commentTypeData", thrift.TType.STRUCT, 18);
            this.commentTypeData.write(output);
            output.writeFieldEnd();
        }
        if (this.vineTypeData != null) {
            output.writeFieldBegin("vineTypeData", thrift.TType.STRUCT, 19);
            this.vineTypeData.write(output);
            output.writeFieldEnd();
        }
        if (this.contentAtomTypeData != null) {
            output.writeFieldBegin("contentAtomTypeData", thrift.TType.STRUCT, 20);
            this.contentAtomTypeData.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): BlockElement {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.I32) {
                        const value_2: ElementType.ElementType = input.readI32();
                        _args.type = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.LIST) {
                        const value_3: Array<Asset.Asset> = new Array<Asset.Asset>();
                        const metadata_1: thrift.IThriftList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_4: Asset.Asset = Asset.Asset.read(input);
                            value_3.push(value_4);
                        }
                        input.readListEnd();
                        _args.assets = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_5: TextElementFields.TextElementFields = TextElementFields.TextElementFields.read(input);
                        _args.textTypeData = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_6: VideoElementFields.VideoElementFields = VideoElementFields.VideoElementFields.read(input);
                        _args.videoTypeData = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_7: TweetElementFields.TweetElementFields = TweetElementFields.TweetElementFields.read(input);
                        _args.tweetTypeData = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_8: ImageElementFields.ImageElementFields = ImageElementFields.ImageElementFields.read(input);
                        _args.imageTypeData = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_9: AudioElementFields.AudioElementFields = AudioElementFields.AudioElementFields.read(input);
                        _args.audioTypeData = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_10: PullquoteElementFields.PullquoteElementFields = PullquoteElementFields.PullquoteElementFields.read(input);
                        _args.pullquoteTypeData = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_11: InteractiveElementFields.InteractiveElementFields = InteractiveElementFields.InteractiveElementFields.read(input);
                        _args.interactiveTypeData = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_12: StandardElementFields.StandardElementFields = StandardElementFields.StandardElementFields.read(input);
                        _args.mapTypeData = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_13: StandardElementFields.StandardElementFields = StandardElementFields.StandardElementFields.read(input);
                        _args.documentTypeData = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_14: StandardElementFields.StandardElementFields = StandardElementFields.StandardElementFields.read(input);
                        _args.tableTypeData = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_15: WitnessElementFields.WitnessElementFields = WitnessElementFields.WitnessElementFields.read(input);
                        _args.witnessTypeData = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_16: RichLinkElementFields.RichLinkElementFields = RichLinkElementFields.RichLinkElementFields.read(input);
                        _args.richLinkTypeData = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_17: MembershipElementFields.MembershipElementFields = MembershipElementFields.MembershipElementFields.read(input);
                        _args.membershipTypeData = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 16:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_18: EmbedElementFields.EmbedElementFields = EmbedElementFields.EmbedElementFields.read(input);
                        _args.embedTypeData = value_18;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 17:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_19: InstagramElementFields.InstagramElementFields = InstagramElementFields.InstagramElementFields.read(input);
                        _args.instagramTypeData = value_19;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 18:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_20: CommentElementFields.CommentElementFields = CommentElementFields.CommentElementFields.read(input);
                        _args.commentTypeData = value_20;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 19:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_21: VineElementFields.VineElementFields = VineElementFields.VineElementFields.read(input);
                        _args.vineTypeData = value_21;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 20:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_22: ContentAtomElementFields.ContentAtomElementFields = ContentAtomElementFields.ContentAtomElementFields.read(input);
                        _args.contentAtomTypeData = value_22;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.type !== undefined && _args.assets !== undefined) {
            return new BlockElement(_args);
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read BlockElement from input");
        }
    }
}
