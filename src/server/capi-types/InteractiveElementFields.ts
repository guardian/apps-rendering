/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
export interface IInteractiveElementFields {
    url?: string;
    originalUrl?: string;
    source?: string;
    caption?: string;
    alt?: string;
    scriptUrl?: string;
    html?: string;
    scriptName?: string;
    iframeUrl?: string;
    role?: string;
    isMandatory?: boolean;
}
export interface IInteractiveElementFieldsArgs {
    url?: string;
    originalUrl?: string;
    source?: string;
    caption?: string;
    alt?: string;
    scriptUrl?: string;
    html?: string;
    scriptName?: string;
    iframeUrl?: string;
    role?: string;
    isMandatory?: boolean;
}
export const InteractiveElementFieldsCodec: thrift.IStructCodec<IInteractiveElementFieldsArgs, IInteractiveElementFields> = {
    encode(args: IInteractiveElementFieldsArgs, output: thrift.TProtocol): void {
        const obj: any = {
            url: args.url,
            originalUrl: args.originalUrl,
            source: args.source,
            caption: args.caption,
            alt: args.alt,
            scriptUrl: args.scriptUrl,
            html: args.html,
            scriptName: args.scriptName,
            iframeUrl: args.iframeUrl,
            role: args.role,
            isMandatory: args.isMandatory
        };
        output.writeStructBegin("InteractiveElementFields");
        if (obj.url != null) {
            output.writeFieldBegin("url", thrift.TType.STRING, 1);
            output.writeString(obj.url);
            output.writeFieldEnd();
        }
        if (obj.originalUrl != null) {
            output.writeFieldBegin("originalUrl", thrift.TType.STRING, 2);
            output.writeString(obj.originalUrl);
            output.writeFieldEnd();
        }
        if (obj.source != null) {
            output.writeFieldBegin("source", thrift.TType.STRING, 3);
            output.writeString(obj.source);
            output.writeFieldEnd();
        }
        if (obj.caption != null) {
            output.writeFieldBegin("caption", thrift.TType.STRING, 4);
            output.writeString(obj.caption);
            output.writeFieldEnd();
        }
        if (obj.alt != null) {
            output.writeFieldBegin("alt", thrift.TType.STRING, 5);
            output.writeString(obj.alt);
            output.writeFieldEnd();
        }
        if (obj.scriptUrl != null) {
            output.writeFieldBegin("scriptUrl", thrift.TType.STRING, 6);
            output.writeString(obj.scriptUrl);
            output.writeFieldEnd();
        }
        if (obj.html != null) {
            output.writeFieldBegin("html", thrift.TType.STRING, 7);
            output.writeString(obj.html);
            output.writeFieldEnd();
        }
        if (obj.scriptName != null) {
            output.writeFieldBegin("scriptName", thrift.TType.STRING, 8);
            output.writeString(obj.scriptName);
            output.writeFieldEnd();
        }
        if (obj.iframeUrl != null) {
            output.writeFieldBegin("iframeUrl", thrift.TType.STRING, 9);
            output.writeString(obj.iframeUrl);
            output.writeFieldEnd();
        }
        if (obj.role != null) {
            output.writeFieldBegin("role", thrift.TType.STRING, 10);
            output.writeString(obj.role);
            output.writeFieldEnd();
        }
        if (obj.isMandatory != null) {
            output.writeFieldBegin("isMandatory", thrift.TType.BOOL, 11);
            output.writeBool(obj.isMandatory);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IInteractiveElementFields {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_1: string = input.readString();
                        _args.url = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: string = input.readString();
                        _args.originalUrl = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_3: string = input.readString();
                        _args.source = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRING) {
                        const value_4: string = input.readString();
                        _args.caption = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.STRING) {
                        const value_5: string = input.readString();
                        _args.alt = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.STRING) {
                        const value_6: string = input.readString();
                        _args.scriptUrl = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.TType.STRING) {
                        const value_7: string = input.readString();
                        _args.html = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.TType.STRING) {
                        const value_8: string = input.readString();
                        _args.scriptName = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.TType.STRING) {
                        const value_9: string = input.readString();
                        _args.iframeUrl = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.TType.STRING) {
                        const value_10: string = input.readString();
                        _args.role = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_11: boolean = input.readBool();
                        _args.isMandatory = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            url: _args.url,
            originalUrl: _args.originalUrl,
            source: _args.source,
            caption: _args.caption,
            alt: _args.alt,
            scriptUrl: _args.scriptUrl,
            html: _args.html,
            scriptName: _args.scriptName,
            iframeUrl: _args.iframeUrl,
            role: _args.role,
            isMandatory: _args.isMandatory
        };
    }
};
export class InteractiveElementFields extends thrift.StructLike implements IInteractiveElementFields {
    public url?: string;
    public originalUrl?: string;
    public source?: string;
    public caption?: string;
    public alt?: string;
    public scriptUrl?: string;
    public html?: string;
    public scriptName?: string;
    public iframeUrl?: string;
    public role?: string;
    public isMandatory?: boolean;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IInteractiveElementFieldsArgs = {}) {
        super();
        if (args.url != null) {
            const value_12: string = args.url;
            this.url = value_12;
        }
        if (args.originalUrl != null) {
            const value_13: string = args.originalUrl;
            this.originalUrl = value_13;
        }
        if (args.source != null) {
            const value_14: string = args.source;
            this.source = value_14;
        }
        if (args.caption != null) {
            const value_15: string = args.caption;
            this.caption = value_15;
        }
        if (args.alt != null) {
            const value_16: string = args.alt;
            this.alt = value_16;
        }
        if (args.scriptUrl != null) {
            const value_17: string = args.scriptUrl;
            this.scriptUrl = value_17;
        }
        if (args.html != null) {
            const value_18: string = args.html;
            this.html = value_18;
        }
        if (args.scriptName != null) {
            const value_19: string = args.scriptName;
            this.scriptName = value_19;
        }
        if (args.iframeUrl != null) {
            const value_20: string = args.iframeUrl;
            this.iframeUrl = value_20;
        }
        if (args.role != null) {
            const value_21: string = args.role;
            this.role = value_21;
        }
        if (args.isMandatory != null) {
            const value_22: boolean = args.isMandatory;
            this.isMandatory = value_22;
        }
    }
    public static read(input: thrift.TProtocol): InteractiveElementFields {
        return new InteractiveElementFields(InteractiveElementFieldsCodec.decode(input));
    }
    public static write(args: IInteractiveElementFieldsArgs, output: thrift.TProtocol): void {
        return InteractiveElementFieldsCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return InteractiveElementFieldsCodec.encode(this, output);
    }
}
