/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
export interface IInteractiveElementFieldsArgs {
    url?: string;
    originalUrl?: string;
    source?: string;
    caption?: string;
    alt?: string;
    scriptUrl?: string;
    html?: string;
    scriptName?: string;
    iframeUrl?: string;
    role?: string;
    isMandatory?: boolean;
}
export class InteractiveElementFields {
    public url?: string;
    public originalUrl?: string;
    public source?: string;
    public caption?: string;
    public alt?: string;
    public scriptUrl?: string;
    public html?: string;
    public scriptName?: string;
    public iframeUrl?: string;
    public role?: string;
    public isMandatory?: boolean;
    constructor(args?: IInteractiveElementFieldsArgs) {
        if (args != null && args.url != null) {
            this.url = args.url;
        }
        if (args != null && args.originalUrl != null) {
            this.originalUrl = args.originalUrl;
        }
        if (args != null && args.source != null) {
            this.source = args.source;
        }
        if (args != null && args.caption != null) {
            this.caption = args.caption;
        }
        if (args != null && args.alt != null) {
            this.alt = args.alt;
        }
        if (args != null && args.scriptUrl != null) {
            this.scriptUrl = args.scriptUrl;
        }
        if (args != null && args.html != null) {
            this.html = args.html;
        }
        if (args != null && args.scriptName != null) {
            this.scriptName = args.scriptName;
        }
        if (args != null && args.iframeUrl != null) {
            this.iframeUrl = args.iframeUrl;
        }
        if (args != null && args.role != null) {
            this.role = args.role;
        }
        if (args != null && args.isMandatory != null) {
            this.isMandatory = args.isMandatory;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("InteractiveElementFields");
        if (this.url != null) {
            output.writeFieldBegin("url", thrift.TType.STRING, 1);
            output.writeString(this.url);
            output.writeFieldEnd();
        }
        if (this.originalUrl != null) {
            output.writeFieldBegin("originalUrl", thrift.TType.STRING, 2);
            output.writeString(this.originalUrl);
            output.writeFieldEnd();
        }
        if (this.source != null) {
            output.writeFieldBegin("source", thrift.TType.STRING, 3);
            output.writeString(this.source);
            output.writeFieldEnd();
        }
        if (this.caption != null) {
            output.writeFieldBegin("caption", thrift.TType.STRING, 4);
            output.writeString(this.caption);
            output.writeFieldEnd();
        }
        if (this.alt != null) {
            output.writeFieldBegin("alt", thrift.TType.STRING, 5);
            output.writeString(this.alt);
            output.writeFieldEnd();
        }
        if (this.scriptUrl != null) {
            output.writeFieldBegin("scriptUrl", thrift.TType.STRING, 6);
            output.writeString(this.scriptUrl);
            output.writeFieldEnd();
        }
        if (this.html != null) {
            output.writeFieldBegin("html", thrift.TType.STRING, 7);
            output.writeString(this.html);
            output.writeFieldEnd();
        }
        if (this.scriptName != null) {
            output.writeFieldBegin("scriptName", thrift.TType.STRING, 8);
            output.writeString(this.scriptName);
            output.writeFieldEnd();
        }
        if (this.iframeUrl != null) {
            output.writeFieldBegin("iframeUrl", thrift.TType.STRING, 9);
            output.writeString(this.iframeUrl);
            output.writeFieldEnd();
        }
        if (this.role != null) {
            output.writeFieldBegin("role", thrift.TType.STRING, 10);
            output.writeString(this.role);
            output.writeFieldEnd();
        }
        if (this.isMandatory != null) {
            output.writeFieldBegin("isMandatory", thrift.TType.BOOL, 11);
            output.writeBool(this.isMandatory);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): InteractiveElementFields {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_1: string = input.readString();
                        _args.url = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: string = input.readString();
                        _args.originalUrl = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_3: string = input.readString();
                        _args.source = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRING) {
                        const value_4: string = input.readString();
                        _args.caption = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.STRING) {
                        const value_5: string = input.readString();
                        _args.alt = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.STRING) {
                        const value_6: string = input.readString();
                        _args.scriptUrl = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.TType.STRING) {
                        const value_7: string = input.readString();
                        _args.html = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.TType.STRING) {
                        const value_8: string = input.readString();
                        _args.scriptName = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.TType.STRING) {
                        const value_9: string = input.readString();
                        _args.iframeUrl = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.TType.STRING) {
                        const value_10: string = input.readString();
                        _args.role = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_11: boolean = input.readBool();
                        _args.isMandatory = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new InteractiveElementFields(_args);
    }
}
