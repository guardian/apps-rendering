/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as Range from "./Range";
export interface IIngredient {
    item: string;
    comment?: string;
    quantity?: number;
    quantityRange?: Range.IRange;
    unit?: string;
}
export interface IIngredientArgs {
    item: string;
    comment?: string;
    quantity?: number;
    quantityRange?: Range.IRangeArgs;
    unit?: string;
}
export const IngredientCodec: thrift.IStructCodec<IIngredientArgs, IIngredient> = {
    encode(args: IIngredientArgs, output: thrift.TProtocol): void {
        const obj: any = {
            item: args.item,
            comment: args.comment,
            quantity: args.quantity,
            quantityRange: args.quantityRange,
            unit: args.unit
        };
        output.writeStructBegin("Ingredient");
        if (obj.item != null) {
            output.writeFieldBegin("item", thrift.TType.STRING, 1);
            output.writeString(obj.item);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[item] is unset!");
        }
        if (obj.comment != null) {
            output.writeFieldBegin("comment", thrift.TType.STRING, 2);
            output.writeString(obj.comment);
            output.writeFieldEnd();
        }
        if (obj.quantity != null) {
            output.writeFieldBegin("quantity", thrift.TType.DOUBLE, 3);
            output.writeDouble(obj.quantity);
            output.writeFieldEnd();
        }
        if (obj.quantityRange != null) {
            output.writeFieldBegin("quantityRange", thrift.TType.STRUCT, 4);
            Range.RangeCodec.encode(obj.quantityRange, output);
            output.writeFieldEnd();
        }
        if (obj.unit != null) {
            output.writeFieldBegin("unit", thrift.TType.STRING, 5);
            output.writeString(obj.unit);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IIngredient {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_1: string = input.readString();
                        _args.item = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: string = input.readString();
                        _args.comment = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.DOUBLE) {
                        const value_3: number = input.readDouble();
                        _args.quantity = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_4: Range.IRange = Range.RangeCodec.decode(input);
                        _args.quantityRange = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.STRING) {
                        const value_5: string = input.readString();
                        _args.unit = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.item !== undefined) {
            return {
                item: _args.item,
                comment: _args.comment,
                quantity: _args.quantity,
                quantityRange: _args.quantityRange,
                unit: _args.unit
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read Ingredient from input");
        }
    }
};
export class Ingredient extends thrift.StructLike implements IIngredient {
    public item: string;
    public comment?: string;
    public quantity?: number;
    public quantityRange?: Range.IRange;
    public unit?: string;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IIngredientArgs) {
        super();
        if (args.item != null) {
            const value_6: string = args.item;
            this.item = value_6;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[item] is unset!");
        }
        if (args.comment != null) {
            const value_7: string = args.comment;
            this.comment = value_7;
        }
        if (args.quantity != null) {
            const value_8: number = args.quantity;
            this.quantity = value_8;
        }
        if (args.quantityRange != null) {
            const value_9: Range.IRange = new Range.Range(args.quantityRange);
            this.quantityRange = value_9;
        }
        if (args.unit != null) {
            const value_10: string = args.unit;
            this.unit = value_10;
        }
    }
    public static read(input: thrift.TProtocol): Ingredient {
        return new Ingredient(IngredientCodec.decode(input));
    }
    public static write(args: IIngredientArgs, output: thrift.TProtocol): void {
        return IngredientCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return IngredientCodec.encode(this, output);
    }
}
