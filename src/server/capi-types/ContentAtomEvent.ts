/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as Atom from "./Atom";
import * as EventType from "./EventType";
export interface IContentAtomEvent {
    atom: Atom.IAtom;
    eventType: EventType.EventType;
    eventCreationTime: thrift.Int64;
}
export interface IContentAtomEventArgs {
    atom: Atom.IAtomArgs;
    eventType: EventType.EventType;
    eventCreationTime: number | string | thrift.Int64;
}
export const ContentAtomEventCodec: thrift.IStructCodec<IContentAtomEventArgs, IContentAtomEvent> = {
    encode(args: IContentAtomEventArgs, output: thrift.TProtocol): void {
        const obj: any = {
            atom: args.atom,
            eventType: args.eventType,
            eventCreationTime: (typeof args.eventCreationTime === "number" ? new thrift.Int64(args.eventCreationTime) : typeof args.eventCreationTime === "string" ? thrift.Int64.fromDecimalString(args.eventCreationTime) : args.eventCreationTime)
        };
        output.writeStructBegin("ContentAtomEvent");
        if (obj.atom != null) {
            output.writeFieldBegin("atom", thrift.TType.STRUCT, 1);
            Atom.AtomCodec.encode(obj.atom, output);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[atom] is unset!");
        }
        if (obj.eventType != null) {
            output.writeFieldBegin("eventType", thrift.TType.I32, 2);
            output.writeI32(obj.eventType);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[eventType] is unset!");
        }
        if (obj.eventCreationTime != null) {
            output.writeFieldBegin("eventCreationTime", thrift.TType.I64, 3);
            output.writeI64((typeof obj.eventCreationTime === "number" ? new thrift.Int64(obj.eventCreationTime) : typeof obj.eventCreationTime === "string" ? thrift.Int64.fromDecimalString(obj.eventCreationTime) : obj.eventCreationTime));
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[eventCreationTime] is unset!");
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IContentAtomEvent {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_1: Atom.IAtom = Atom.AtomCodec.decode(input);
                        _args.atom = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.I32) {
                        const value_2: EventType.EventType = input.readI32();
                        _args.eventType = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.I64) {
                        const value_3: thrift.Int64 = input.readI64();
                        _args.eventCreationTime = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.atom !== undefined && _args.eventType !== undefined && _args.eventCreationTime !== undefined) {
            return {
                atom: _args.atom,
                eventType: _args.eventType,
                eventCreationTime: _args.eventCreationTime
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read ContentAtomEvent from input");
        }
    }
};
export class ContentAtomEvent extends thrift.StructLike implements IContentAtomEvent {
    public atom: Atom.IAtom;
    public eventType: EventType.EventType;
    public eventCreationTime: thrift.Int64;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IContentAtomEventArgs) {
        super();
        if (args.atom != null) {
            const value_4: Atom.IAtom = new Atom.Atom(args.atom);
            this.atom = value_4;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[atom] is unset!");
        }
        if (args.eventType != null) {
            const value_5: EventType.EventType = args.eventType;
            this.eventType = value_5;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[eventType] is unset!");
        }
        if (args.eventCreationTime != null) {
            const value_6: thrift.Int64 = (typeof args.eventCreationTime === "number" ? new thrift.Int64(args.eventCreationTime) : typeof args.eventCreationTime === "string" ? thrift.Int64.fromDecimalString(args.eventCreationTime) : args.eventCreationTime);
            this.eventCreationTime = value_6;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[eventCreationTime] is unset!");
        }
    }
    public static read(input: thrift.TProtocol): ContentAtomEvent {
        return new ContentAtomEvent(ContentAtomEventCodec.decode(input));
    }
    public static write(args: IContentAtomEventArgs, output: thrift.TProtocol): void {
        return ContentAtomEventCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return ContentAtomEventCodec.encode(this, output);
    }
}
