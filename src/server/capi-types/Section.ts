/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as Edition from "./Edition";
import * as Sponsorship from "./Sponsorship";
export interface ISectionArgs {
    id: string;
    webTitle: string;
    webUrl: string;
    apiUrl: string;
    editions: Array<Edition.Edition>;
    activeSponsorships?: Array<Sponsorship.Sponsorship>;
}
export class Section {
    public id: string;
    public webTitle: string;
    public webUrl: string;
    public apiUrl: string;
    public editions: Array<Edition.Edition>;
    public activeSponsorships?: Array<Sponsorship.Sponsorship>;
    constructor(args: ISectionArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[id] is unset!");
        }
        if (args != null && args.webTitle != null) {
            this.webTitle = args.webTitle;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[webTitle] is unset!");
        }
        if (args != null && args.webUrl != null) {
            this.webUrl = args.webUrl;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[webUrl] is unset!");
        }
        if (args != null && args.apiUrl != null) {
            this.apiUrl = args.apiUrl;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[apiUrl] is unset!");
        }
        if (args != null && args.editions != null) {
            this.editions = args.editions;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[editions] is unset!");
        }
        if (args != null && args.activeSponsorships != null) {
            this.activeSponsorships = args.activeSponsorships;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("Section");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.TType.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.webTitle != null) {
            output.writeFieldBegin("webTitle", thrift.TType.STRING, 2);
            output.writeString(this.webTitle);
            output.writeFieldEnd();
        }
        if (this.webUrl != null) {
            output.writeFieldBegin("webUrl", thrift.TType.STRING, 3);
            output.writeString(this.webUrl);
            output.writeFieldEnd();
        }
        if (this.apiUrl != null) {
            output.writeFieldBegin("apiUrl", thrift.TType.STRING, 4);
            output.writeString(this.apiUrl);
            output.writeFieldEnd();
        }
        if (this.editions != null) {
            output.writeFieldBegin("editions", thrift.TType.LIST, 5);
            output.writeListBegin(thrift.TType.STRUCT, this.editions.length);
            this.editions.forEach((value_1: Edition.Edition): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.activeSponsorships != null) {
            output.writeFieldBegin("activeSponsorships", thrift.TType.LIST, 6);
            output.writeListBegin(thrift.TType.STRUCT, this.activeSponsorships.length);
            this.activeSponsorships.forEach((value_2: Sponsorship.Sponsorship): void => {
                value_2.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): Section {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_3: string = input.readString();
                        _args.id = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_4: string = input.readString();
                        _args.webTitle = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_5: string = input.readString();
                        _args.webUrl = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRING) {
                        const value_6: string = input.readString();
                        _args.apiUrl = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.LIST) {
                        const value_7: Array<Edition.Edition> = new Array<Edition.Edition>();
                        const metadata_1: thrift.IThriftList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_8: Edition.Edition = Edition.Edition.read(input);
                            value_7.push(value_8);
                        }
                        input.readListEnd();
                        _args.editions = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.LIST) {
                        const value_9: Array<Sponsorship.Sponsorship> = new Array<Sponsorship.Sponsorship>();
                        const metadata_2: thrift.IThriftList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_10: Sponsorship.Sponsorship = Sponsorship.Sponsorship.read(input);
                            value_9.push(value_10);
                        }
                        input.readListEnd();
                        _args.activeSponsorships = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.id !== undefined && _args.webTitle !== undefined && _args.webUrl !== undefined && _args.apiUrl !== undefined && _args.editions !== undefined) {
            return new Section(_args);
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read Section from input");
        }
    }
}
