/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as Sponsorship from "./Sponsorship";
export interface IRichLinkElementFieldsArgs {
    url?: string;
    originalUrl?: string;
    linkText?: string;
    linkPrefix?: string;
    role?: string;
    sponsorship?: Sponsorship.Sponsorship;
}
export class RichLinkElementFields {
    public url?: string;
    public originalUrl?: string;
    public linkText?: string;
    public linkPrefix?: string;
    public role?: string;
    public sponsorship?: Sponsorship.Sponsorship;
    constructor(args?: IRichLinkElementFieldsArgs) {
        if (args != null && args.url != null) {
            this.url = args.url;
        }
        if (args != null && args.originalUrl != null) {
            this.originalUrl = args.originalUrl;
        }
        if (args != null && args.linkText != null) {
            this.linkText = args.linkText;
        }
        if (args != null && args.linkPrefix != null) {
            this.linkPrefix = args.linkPrefix;
        }
        if (args != null && args.role != null) {
            this.role = args.role;
        }
        if (args != null && args.sponsorship != null) {
            this.sponsorship = args.sponsorship;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("RichLinkElementFields");
        if (this.url != null) {
            output.writeFieldBegin("url", thrift.TType.STRING, 1);
            output.writeString(this.url);
            output.writeFieldEnd();
        }
        if (this.originalUrl != null) {
            output.writeFieldBegin("originalUrl", thrift.TType.STRING, 2);
            output.writeString(this.originalUrl);
            output.writeFieldEnd();
        }
        if (this.linkText != null) {
            output.writeFieldBegin("linkText", thrift.TType.STRING, 3);
            output.writeString(this.linkText);
            output.writeFieldEnd();
        }
        if (this.linkPrefix != null) {
            output.writeFieldBegin("linkPrefix", thrift.TType.STRING, 4);
            output.writeString(this.linkPrefix);
            output.writeFieldEnd();
        }
        if (this.role != null) {
            output.writeFieldBegin("role", thrift.TType.STRING, 5);
            output.writeString(this.role);
            output.writeFieldEnd();
        }
        if (this.sponsorship != null) {
            output.writeFieldBegin("sponsorship", thrift.TType.STRUCT, 6);
            this.sponsorship.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): RichLinkElementFields {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_1: string = input.readString();
                        _args.url = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: string = input.readString();
                        _args.originalUrl = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_3: string = input.readString();
                        _args.linkText = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRING) {
                        const value_4: string = input.readString();
                        _args.linkPrefix = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.STRING) {
                        const value_5: string = input.readString();
                        _args.role = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_6: Sponsorship.Sponsorship = Sponsorship.Sponsorship.read(input);
                        _args.sponsorship = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new RichLinkElementFields(_args);
    }
}
