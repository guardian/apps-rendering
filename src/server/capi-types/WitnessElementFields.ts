/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as CapiDateTime from "./CapiDateTime";
export interface IWitnessElementFields {
    url?: string;
    originalUrl?: string;
    witnessEmbedType?: string;
    mediaId?: string;
    source?: string;
    title?: string;
    description?: string;
    authorName?: string;
    authorUsername?: string;
    authorWitnessProfileUrl?: string;
    authorGuardianProfileUrl?: string;
    caption?: string;
    alt?: string;
    width?: number;
    height?: number;
    html?: string;
    apiUrl?: string;
    photographer?: string;
    dateCreated?: CapiDateTime.ICapiDateTime;
    youtubeUrl?: string;
    youtubeSource?: string;
    youtubeTitle?: string;
    youtubeDescription?: string;
    youtubeAuthorName?: string;
    youtubeHtml?: string;
    role?: string;
}
export interface IWitnessElementFieldsArgs {
    url?: string;
    originalUrl?: string;
    witnessEmbedType?: string;
    mediaId?: string;
    source?: string;
    title?: string;
    description?: string;
    authorName?: string;
    authorUsername?: string;
    authorWitnessProfileUrl?: string;
    authorGuardianProfileUrl?: string;
    caption?: string;
    alt?: string;
    width?: number;
    height?: number;
    html?: string;
    apiUrl?: string;
    photographer?: string;
    dateCreated?: CapiDateTime.ICapiDateTimeArgs;
    youtubeUrl?: string;
    youtubeSource?: string;
    youtubeTitle?: string;
    youtubeDescription?: string;
    youtubeAuthorName?: string;
    youtubeHtml?: string;
    role?: string;
}
export const WitnessElementFieldsCodec: thrift.IStructCodec<IWitnessElementFieldsArgs, IWitnessElementFields> = {
    encode(args: IWitnessElementFieldsArgs, output: thrift.TProtocol): void {
        const obj: any = {
            url: args.url,
            originalUrl: args.originalUrl,
            witnessEmbedType: args.witnessEmbedType,
            mediaId: args.mediaId,
            source: args.source,
            title: args.title,
            description: args.description,
            authorName: args.authorName,
            authorUsername: args.authorUsername,
            authorWitnessProfileUrl: args.authorWitnessProfileUrl,
            authorGuardianProfileUrl: args.authorGuardianProfileUrl,
            caption: args.caption,
            alt: args.alt,
            width: args.width,
            height: args.height,
            html: args.html,
            apiUrl: args.apiUrl,
            photographer: args.photographer,
            dateCreated: args.dateCreated,
            youtubeUrl: args.youtubeUrl,
            youtubeSource: args.youtubeSource,
            youtubeTitle: args.youtubeTitle,
            youtubeDescription: args.youtubeDescription,
            youtubeAuthorName: args.youtubeAuthorName,
            youtubeHtml: args.youtubeHtml,
            role: args.role
        };
        output.writeStructBegin("WitnessElementFields");
        if (obj.url != null) {
            output.writeFieldBegin("url", thrift.TType.STRING, 1);
            output.writeString(obj.url);
            output.writeFieldEnd();
        }
        if (obj.originalUrl != null) {
            output.writeFieldBegin("originalUrl", thrift.TType.STRING, 2);
            output.writeString(obj.originalUrl);
            output.writeFieldEnd();
        }
        if (obj.witnessEmbedType != null) {
            output.writeFieldBegin("witnessEmbedType", thrift.TType.STRING, 3);
            output.writeString(obj.witnessEmbedType);
            output.writeFieldEnd();
        }
        if (obj.mediaId != null) {
            output.writeFieldBegin("mediaId", thrift.TType.STRING, 4);
            output.writeString(obj.mediaId);
            output.writeFieldEnd();
        }
        if (obj.source != null) {
            output.writeFieldBegin("source", thrift.TType.STRING, 5);
            output.writeString(obj.source);
            output.writeFieldEnd();
        }
        if (obj.title != null) {
            output.writeFieldBegin("title", thrift.TType.STRING, 6);
            output.writeString(obj.title);
            output.writeFieldEnd();
        }
        if (obj.description != null) {
            output.writeFieldBegin("description", thrift.TType.STRING, 7);
            output.writeString(obj.description);
            output.writeFieldEnd();
        }
        if (obj.authorName != null) {
            output.writeFieldBegin("authorName", thrift.TType.STRING, 8);
            output.writeString(obj.authorName);
            output.writeFieldEnd();
        }
        if (obj.authorUsername != null) {
            output.writeFieldBegin("authorUsername", thrift.TType.STRING, 9);
            output.writeString(obj.authorUsername);
            output.writeFieldEnd();
        }
        if (obj.authorWitnessProfileUrl != null) {
            output.writeFieldBegin("authorWitnessProfileUrl", thrift.TType.STRING, 10);
            output.writeString(obj.authorWitnessProfileUrl);
            output.writeFieldEnd();
        }
        if (obj.authorGuardianProfileUrl != null) {
            output.writeFieldBegin("authorGuardianProfileUrl", thrift.TType.STRING, 11);
            output.writeString(obj.authorGuardianProfileUrl);
            output.writeFieldEnd();
        }
        if (obj.caption != null) {
            output.writeFieldBegin("caption", thrift.TType.STRING, 12);
            output.writeString(obj.caption);
            output.writeFieldEnd();
        }
        if (obj.alt != null) {
            output.writeFieldBegin("alt", thrift.TType.STRING, 13);
            output.writeString(obj.alt);
            output.writeFieldEnd();
        }
        if (obj.width != null) {
            output.writeFieldBegin("width", thrift.TType.I32, 14);
            output.writeI32(obj.width);
            output.writeFieldEnd();
        }
        if (obj.height != null) {
            output.writeFieldBegin("height", thrift.TType.I32, 15);
            output.writeI32(obj.height);
            output.writeFieldEnd();
        }
        if (obj.html != null) {
            output.writeFieldBegin("html", thrift.TType.STRING, 16);
            output.writeString(obj.html);
            output.writeFieldEnd();
        }
        if (obj.apiUrl != null) {
            output.writeFieldBegin("apiUrl", thrift.TType.STRING, 17);
            output.writeString(obj.apiUrl);
            output.writeFieldEnd();
        }
        if (obj.photographer != null) {
            output.writeFieldBegin("photographer", thrift.TType.STRING, 18);
            output.writeString(obj.photographer);
            output.writeFieldEnd();
        }
        if (obj.dateCreated != null) {
            output.writeFieldBegin("dateCreated", thrift.TType.STRUCT, 19);
            CapiDateTime.CapiDateTimeCodec.encode(obj.dateCreated, output);
            output.writeFieldEnd();
        }
        if (obj.youtubeUrl != null) {
            output.writeFieldBegin("youtubeUrl", thrift.TType.STRING, 20);
            output.writeString(obj.youtubeUrl);
            output.writeFieldEnd();
        }
        if (obj.youtubeSource != null) {
            output.writeFieldBegin("youtubeSource", thrift.TType.STRING, 21);
            output.writeString(obj.youtubeSource);
            output.writeFieldEnd();
        }
        if (obj.youtubeTitle != null) {
            output.writeFieldBegin("youtubeTitle", thrift.TType.STRING, 22);
            output.writeString(obj.youtubeTitle);
            output.writeFieldEnd();
        }
        if (obj.youtubeDescription != null) {
            output.writeFieldBegin("youtubeDescription", thrift.TType.STRING, 23);
            output.writeString(obj.youtubeDescription);
            output.writeFieldEnd();
        }
        if (obj.youtubeAuthorName != null) {
            output.writeFieldBegin("youtubeAuthorName", thrift.TType.STRING, 24);
            output.writeString(obj.youtubeAuthorName);
            output.writeFieldEnd();
        }
        if (obj.youtubeHtml != null) {
            output.writeFieldBegin("youtubeHtml", thrift.TType.STRING, 25);
            output.writeString(obj.youtubeHtml);
            output.writeFieldEnd();
        }
        if (obj.role != null) {
            output.writeFieldBegin("role", thrift.TType.STRING, 26);
            output.writeString(obj.role);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IWitnessElementFields {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_1: string = input.readString();
                        _args.url = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: string = input.readString();
                        _args.originalUrl = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_3: string = input.readString();
                        _args.witnessEmbedType = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRING) {
                        const value_4: string = input.readString();
                        _args.mediaId = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.STRING) {
                        const value_5: string = input.readString();
                        _args.source = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.STRING) {
                        const value_6: string = input.readString();
                        _args.title = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.TType.STRING) {
                        const value_7: string = input.readString();
                        _args.description = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.TType.STRING) {
                        const value_8: string = input.readString();
                        _args.authorName = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.TType.STRING) {
                        const value_9: string = input.readString();
                        _args.authorUsername = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.TType.STRING) {
                        const value_10: string = input.readString();
                        _args.authorWitnessProfileUrl = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.TType.STRING) {
                        const value_11: string = input.readString();
                        _args.authorGuardianProfileUrl = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.TType.STRING) {
                        const value_12: string = input.readString();
                        _args.caption = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.TType.STRING) {
                        const value_13: string = input.readString();
                        _args.alt = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.TType.I32) {
                        const value_14: number = input.readI32();
                        _args.width = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.TType.I32) {
                        const value_15: number = input.readI32();
                        _args.height = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 16:
                    if (fieldType === thrift.TType.STRING) {
                        const value_16: string = input.readString();
                        _args.html = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 17:
                    if (fieldType === thrift.TType.STRING) {
                        const value_17: string = input.readString();
                        _args.apiUrl = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 18:
                    if (fieldType === thrift.TType.STRING) {
                        const value_18: string = input.readString();
                        _args.photographer = value_18;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 19:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_19: CapiDateTime.ICapiDateTime = CapiDateTime.CapiDateTimeCodec.decode(input);
                        _args.dateCreated = value_19;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 20:
                    if (fieldType === thrift.TType.STRING) {
                        const value_20: string = input.readString();
                        _args.youtubeUrl = value_20;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 21:
                    if (fieldType === thrift.TType.STRING) {
                        const value_21: string = input.readString();
                        _args.youtubeSource = value_21;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 22:
                    if (fieldType === thrift.TType.STRING) {
                        const value_22: string = input.readString();
                        _args.youtubeTitle = value_22;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 23:
                    if (fieldType === thrift.TType.STRING) {
                        const value_23: string = input.readString();
                        _args.youtubeDescription = value_23;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 24:
                    if (fieldType === thrift.TType.STRING) {
                        const value_24: string = input.readString();
                        _args.youtubeAuthorName = value_24;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 25:
                    if (fieldType === thrift.TType.STRING) {
                        const value_25: string = input.readString();
                        _args.youtubeHtml = value_25;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 26:
                    if (fieldType === thrift.TType.STRING) {
                        const value_26: string = input.readString();
                        _args.role = value_26;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            url: _args.url,
            originalUrl: _args.originalUrl,
            witnessEmbedType: _args.witnessEmbedType,
            mediaId: _args.mediaId,
            source: _args.source,
            title: _args.title,
            description: _args.description,
            authorName: _args.authorName,
            authorUsername: _args.authorUsername,
            authorWitnessProfileUrl: _args.authorWitnessProfileUrl,
            authorGuardianProfileUrl: _args.authorGuardianProfileUrl,
            caption: _args.caption,
            alt: _args.alt,
            width: _args.width,
            height: _args.height,
            html: _args.html,
            apiUrl: _args.apiUrl,
            photographer: _args.photographer,
            dateCreated: _args.dateCreated,
            youtubeUrl: _args.youtubeUrl,
            youtubeSource: _args.youtubeSource,
            youtubeTitle: _args.youtubeTitle,
            youtubeDescription: _args.youtubeDescription,
            youtubeAuthorName: _args.youtubeAuthorName,
            youtubeHtml: _args.youtubeHtml,
            role: _args.role
        };
    }
};
export class WitnessElementFields extends thrift.StructLike implements IWitnessElementFields {
    public url?: string;
    public originalUrl?: string;
    public witnessEmbedType?: string;
    public mediaId?: string;
    public source?: string;
    public title?: string;
    public description?: string;
    public authorName?: string;
    public authorUsername?: string;
    public authorWitnessProfileUrl?: string;
    public authorGuardianProfileUrl?: string;
    public caption?: string;
    public alt?: string;
    public width?: number;
    public height?: number;
    public html?: string;
    public apiUrl?: string;
    public photographer?: string;
    public dateCreated?: CapiDateTime.ICapiDateTime;
    public youtubeUrl?: string;
    public youtubeSource?: string;
    public youtubeTitle?: string;
    public youtubeDescription?: string;
    public youtubeAuthorName?: string;
    public youtubeHtml?: string;
    public role?: string;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IWitnessElementFieldsArgs = {}) {
        super();
        if (args.url != null) {
            const value_27: string = args.url;
            this.url = value_27;
        }
        if (args.originalUrl != null) {
            const value_28: string = args.originalUrl;
            this.originalUrl = value_28;
        }
        if (args.witnessEmbedType != null) {
            const value_29: string = args.witnessEmbedType;
            this.witnessEmbedType = value_29;
        }
        if (args.mediaId != null) {
            const value_30: string = args.mediaId;
            this.mediaId = value_30;
        }
        if (args.source != null) {
            const value_31: string = args.source;
            this.source = value_31;
        }
        if (args.title != null) {
            const value_32: string = args.title;
            this.title = value_32;
        }
        if (args.description != null) {
            const value_33: string = args.description;
            this.description = value_33;
        }
        if (args.authorName != null) {
            const value_34: string = args.authorName;
            this.authorName = value_34;
        }
        if (args.authorUsername != null) {
            const value_35: string = args.authorUsername;
            this.authorUsername = value_35;
        }
        if (args.authorWitnessProfileUrl != null) {
            const value_36: string = args.authorWitnessProfileUrl;
            this.authorWitnessProfileUrl = value_36;
        }
        if (args.authorGuardianProfileUrl != null) {
            const value_37: string = args.authorGuardianProfileUrl;
            this.authorGuardianProfileUrl = value_37;
        }
        if (args.caption != null) {
            const value_38: string = args.caption;
            this.caption = value_38;
        }
        if (args.alt != null) {
            const value_39: string = args.alt;
            this.alt = value_39;
        }
        if (args.width != null) {
            const value_40: number = args.width;
            this.width = value_40;
        }
        if (args.height != null) {
            const value_41: number = args.height;
            this.height = value_41;
        }
        if (args.html != null) {
            const value_42: string = args.html;
            this.html = value_42;
        }
        if (args.apiUrl != null) {
            const value_43: string = args.apiUrl;
            this.apiUrl = value_43;
        }
        if (args.photographer != null) {
            const value_44: string = args.photographer;
            this.photographer = value_44;
        }
        if (args.dateCreated != null) {
            const value_45: CapiDateTime.ICapiDateTime = new CapiDateTime.CapiDateTime(args.dateCreated);
            this.dateCreated = value_45;
        }
        if (args.youtubeUrl != null) {
            const value_46: string = args.youtubeUrl;
            this.youtubeUrl = value_46;
        }
        if (args.youtubeSource != null) {
            const value_47: string = args.youtubeSource;
            this.youtubeSource = value_47;
        }
        if (args.youtubeTitle != null) {
            const value_48: string = args.youtubeTitle;
            this.youtubeTitle = value_48;
        }
        if (args.youtubeDescription != null) {
            const value_49: string = args.youtubeDescription;
            this.youtubeDescription = value_49;
        }
        if (args.youtubeAuthorName != null) {
            const value_50: string = args.youtubeAuthorName;
            this.youtubeAuthorName = value_50;
        }
        if (args.youtubeHtml != null) {
            const value_51: string = args.youtubeHtml;
            this.youtubeHtml = value_51;
        }
        if (args.role != null) {
            const value_52: string = args.role;
            this.role = value_52;
        }
    }
    public static read(input: thrift.TProtocol): WitnessElementFields {
        return new WitnessElementFields(WitnessElementFieldsCodec.decode(input));
    }
    public static write(args: IWitnessElementFieldsArgs, output: thrift.TProtocol): void {
        return WitnessElementFieldsCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return WitnessElementFieldsCodec.encode(this, output);
    }
}
