/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as ContentType from "./ContentType";
import * as CapiDateTime from "./CapiDateTime";
import * as ContentFields from "./ContentFields";
import * as Tag from "./Tag";
import * as Element from "./Element";
import * as Reference from "./Reference";
import * as Blocks from "./Blocks";
import * as Rights from "./Rights";
import * as Crossword from "./Crossword";
import * as ContentStats from "./ContentStats";
import * as Section from "./Section";
import * as Debug from "./Debug";
export interface IContentArgs {
    id: string;
    type: ContentType.ContentType;
    sectionId?: string;
    sectionName?: string;
    webPublicationDate?: CapiDateTime.CapiDateTime;
    webTitle: string;
    webUrl: string;
    apiUrl: string;
    fields?: ContentFields.ContentFields;
    tags: Array<Tag.Tag>;
    elements?: Array<Element.Element>;
    references: Array<Reference.Reference>;
    isExpired?: boolean;
    blocks?: Blocks.Blocks;
    rights?: Rights.Rights;
    crossword?: Crossword.Crossword;
    stats?: ContentStats.ContentStats;
    section?: Section.Section;
    debug?: Debug.Debug;
    isGone?: boolean;
    isHosted: boolean;
    pillarId?: string;
    pillarName?: string;
}
export class Content {
    public id: string;
    public type: ContentType.ContentType = ContentType.ContentType.ARTICLE;
    public sectionId?: string;
    public sectionName?: string;
    public webPublicationDate?: CapiDateTime.CapiDateTime;
    public webTitle: string;
    public webUrl: string;
    public apiUrl: string;
    public fields?: ContentFields.ContentFields;
    public tags: Array<Tag.Tag> = [];
    public elements?: Array<Element.Element>;
    public references: Array<Reference.Reference> = [];
    public isExpired?: boolean;
    public blocks?: Blocks.Blocks;
    public rights?: Rights.Rights;
    public crossword?: Crossword.Crossword;
    public stats?: ContentStats.ContentStats;
    public section?: Section.Section;
    public debug?: Debug.Debug;
    public isGone?: boolean;
    public isHosted: boolean = false;
    public pillarId?: string;
    public pillarName?: string;
    constructor(args: IContentArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[id] is unset!");
        }
        if (args != null && args.type != null) {
            this.type = args.type;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[type] is unset!");
        }
        if (args != null && args.sectionId != null) {
            this.sectionId = args.sectionId;
        }
        if (args != null && args.sectionName != null) {
            this.sectionName = args.sectionName;
        }
        if (args != null && args.webPublicationDate != null) {
            this.webPublicationDate = args.webPublicationDate;
        }
        if (args != null && args.webTitle != null) {
            this.webTitle = args.webTitle;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[webTitle] is unset!");
        }
        if (args != null && args.webUrl != null) {
            this.webUrl = args.webUrl;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[webUrl] is unset!");
        }
        if (args != null && args.apiUrl != null) {
            this.apiUrl = args.apiUrl;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[apiUrl] is unset!");
        }
        if (args != null && args.fields != null) {
            this.fields = args.fields;
        }
        if (args != null && args.tags != null) {
            this.tags = args.tags;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[tags] is unset!");
        }
        if (args != null && args.elements != null) {
            this.elements = args.elements;
        }
        if (args != null && args.references != null) {
            this.references = args.references;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[references] is unset!");
        }
        if (args != null && args.isExpired != null) {
            this.isExpired = args.isExpired;
        }
        if (args != null && args.blocks != null) {
            this.blocks = args.blocks;
        }
        if (args != null && args.rights != null) {
            this.rights = args.rights;
        }
        if (args != null && args.crossword != null) {
            this.crossword = args.crossword;
        }
        if (args != null && args.stats != null) {
            this.stats = args.stats;
        }
        if (args != null && args.section != null) {
            this.section = args.section;
        }
        if (args != null && args.debug != null) {
            this.debug = args.debug;
        }
        if (args != null && args.isGone != null) {
            this.isGone = args.isGone;
        }
        if (args != null && args.isHosted != null) {
            this.isHosted = args.isHosted;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[isHosted] is unset!");
        }
        if (args != null && args.pillarId != null) {
            this.pillarId = args.pillarId;
        }
        if (args != null && args.pillarName != null) {
            this.pillarName = args.pillarName;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("Content");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.TType.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.type != null) {
            output.writeFieldBegin("type", thrift.TType.I32, 2);
            output.writeI32(this.type);
            output.writeFieldEnd();
        }
        if (this.sectionId != null) {
            output.writeFieldBegin("sectionId", thrift.TType.STRING, 3);
            output.writeString(this.sectionId);
            output.writeFieldEnd();
        }
        if (this.sectionName != null) {
            output.writeFieldBegin("sectionName", thrift.TType.STRING, 4);
            output.writeString(this.sectionName);
            output.writeFieldEnd();
        }
        if (this.webPublicationDate != null) {
            output.writeFieldBegin("webPublicationDate", thrift.TType.STRUCT, 5);
            this.webPublicationDate.write(output);
            output.writeFieldEnd();
        }
        if (this.webTitle != null) {
            output.writeFieldBegin("webTitle", thrift.TType.STRING, 6);
            output.writeString(this.webTitle);
            output.writeFieldEnd();
        }
        if (this.webUrl != null) {
            output.writeFieldBegin("webUrl", thrift.TType.STRING, 7);
            output.writeString(this.webUrl);
            output.writeFieldEnd();
        }
        if (this.apiUrl != null) {
            output.writeFieldBegin("apiUrl", thrift.TType.STRING, 8);
            output.writeString(this.apiUrl);
            output.writeFieldEnd();
        }
        if (this.fields != null) {
            output.writeFieldBegin("fields", thrift.TType.STRUCT, 9);
            this.fields.write(output);
            output.writeFieldEnd();
        }
        if (this.tags != null) {
            output.writeFieldBegin("tags", thrift.TType.LIST, 10);
            output.writeListBegin(thrift.TType.STRUCT, this.tags.length);
            this.tags.forEach((value_1: Tag.Tag): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.elements != null) {
            output.writeFieldBegin("elements", thrift.TType.LIST, 11);
            output.writeListBegin(thrift.TType.STRUCT, this.elements.length);
            this.elements.forEach((value_2: Element.Element): void => {
                value_2.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.references != null) {
            output.writeFieldBegin("references", thrift.TType.LIST, 12);
            output.writeListBegin(thrift.TType.STRUCT, this.references.length);
            this.references.forEach((value_3: Reference.Reference): void => {
                value_3.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.isExpired != null) {
            output.writeFieldBegin("isExpired", thrift.TType.BOOL, 13);
            output.writeBool(this.isExpired);
            output.writeFieldEnd();
        }
        if (this.blocks != null) {
            output.writeFieldBegin("blocks", thrift.TType.STRUCT, 14);
            this.blocks.write(output);
            output.writeFieldEnd();
        }
        if (this.rights != null) {
            output.writeFieldBegin("rights", thrift.TType.STRUCT, 15);
            this.rights.write(output);
            output.writeFieldEnd();
        }
        if (this.crossword != null) {
            output.writeFieldBegin("crossword", thrift.TType.STRUCT, 16);
            this.crossword.write(output);
            output.writeFieldEnd();
        }
        if (this.stats != null) {
            output.writeFieldBegin("stats", thrift.TType.STRUCT, 18);
            this.stats.write(output);
            output.writeFieldEnd();
        }
        if (this.section != null) {
            output.writeFieldBegin("section", thrift.TType.STRUCT, 19);
            this.section.write(output);
            output.writeFieldEnd();
        }
        if (this.debug != null) {
            output.writeFieldBegin("debug", thrift.TType.STRUCT, 20);
            this.debug.write(output);
            output.writeFieldEnd();
        }
        if (this.isGone != null) {
            output.writeFieldBegin("isGone", thrift.TType.BOOL, 21);
            output.writeBool(this.isGone);
            output.writeFieldEnd();
        }
        if (this.isHosted != null) {
            output.writeFieldBegin("isHosted", thrift.TType.BOOL, 23);
            output.writeBool(this.isHosted);
            output.writeFieldEnd();
        }
        if (this.pillarId != null) {
            output.writeFieldBegin("pillarId", thrift.TType.STRING, 24);
            output.writeString(this.pillarId);
            output.writeFieldEnd();
        }
        if (this.pillarName != null) {
            output.writeFieldBegin("pillarName", thrift.TType.STRING, 25);
            output.writeString(this.pillarName);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): Content {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            console.log(input)

            if (fieldType === thrift.TType.STOP) {
                console.log("breaking")
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_4: string = input.readString();
                        _args.id = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.I32) {
                        const value_5: ContentType.ContentType = input.readI32();
                        _args.type = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_6: string = input.readString();
                        _args.sectionId = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRING) {
                        const value_7: string = input.readString();
                        _args.sectionName = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_8: CapiDateTime.CapiDateTime = CapiDateTime.CapiDateTime.read(input);
                        _args.webPublicationDate = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.STRING) {
                        const value_9: string = input.readString();
                        _args.webTitle = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.TType.STRING) {
                        const value_10: string = input.readString();
                        _args.webUrl = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.TType.STRING) {
                        const value_11: string = input.readString();
                        _args.apiUrl = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_12: ContentFields.ContentFields = ContentFields.ContentFields.read(input);
                        _args.fields = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.TType.LIST) {
                        const value_13: Array<Tag.Tag> = new Array<Tag.Tag>();
                        const metadata_1: thrift.IThriftList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_14: Tag.Tag = Tag.Tag.read(input);
                            value_13.push(value_14);
                        }
                        input.readListEnd();
                        _args.tags = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.TType.LIST) {
                        const value_15: Array<Element.Element> = new Array<Element.Element>();
                        const metadata_2: thrift.IThriftList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_16: Element.Element = Element.Element.read(input);
                            value_15.push(value_16);
                        }
                        input.readListEnd();
                        _args.elements = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.TType.LIST) {
                        const value_17: Array<Reference.Reference> = new Array<Reference.Reference>();
                        const metadata_3: thrift.IThriftList = input.readListBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const value_18: Reference.Reference = Reference.Reference.read(input);
                            value_17.push(value_18);
                        }
                        input.readListEnd();
                        _args.references = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_19: boolean = input.readBool();
                        _args.isExpired = value_19;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_20: Blocks.Blocks = Blocks.Blocks.read(input);
                        _args.blocks = value_20;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_21: Rights.Rights = Rights.Rights.read(input);
                        _args.rights = value_21;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 16:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_22: Crossword.Crossword = Crossword.Crossword.read(input);
                        _args.crossword = value_22;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 18:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_23: ContentStats.ContentStats = ContentStats.ContentStats.read(input);
                        _args.stats = value_23;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 19:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_24: Section.Section = Section.Section.read(input);
                        _args.section = value_24;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 20:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_25: Debug.Debug = Debug.Debug.read(input);
                        _args.debug = value_25;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 21:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_26: boolean = input.readBool();
                        _args.isGone = value_26;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 23:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_27: boolean = input.readBool();
                        _args.isHosted = value_27;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 24:
                    if (fieldType === thrift.TType.STRING) {
                        const value_28: string = input.readString();
                        _args.pillarId = value_28;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 25:
                    if (fieldType === thrift.TType.STRING) {
                        const value_29: string = input.readString();
                        _args.pillarName = value_29;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        console.log(_args)
        if (_args.id !== undefined && _args.type !== undefined && _args.webTitle !== undefined && _args.webUrl !== undefined && _args.apiUrl !== undefined && _args.tags !== undefined && _args.references !== undefined && _args.isHosted !== undefined) {
            return new Content(_args);
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read Content from input");
        }
    }
}
