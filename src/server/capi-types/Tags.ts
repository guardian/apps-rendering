/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
export interface ITags {
    cuisine: Array<string>;
    category: Array<string>;
    celebration: Array<string>;
    dietary: Array<string>;
}
export interface ITagsArgs {
    cuisine: Array<string>;
    category: Array<string>;
    celebration: Array<string>;
    dietary: Array<string>;
}
export const TagsCodec: thrift.IStructCodec<ITagsArgs, ITags> = {
    encode(args: ITagsArgs, output: thrift.TProtocol): void {
        const obj: any = {
            cuisine: args.cuisine,
            category: args.category,
            celebration: args.celebration,
            dietary: args.dietary
        };
        output.writeStructBegin("Tags");
        if (obj.cuisine != null) {
            output.writeFieldBegin("cuisine", thrift.TType.LIST, 1);
            output.writeListBegin(thrift.TType.STRING, obj.cuisine.length);
            obj.cuisine.forEach((value_1: string): void => {
                output.writeString(value_1);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[cuisine] is unset!");
        }
        if (obj.category != null) {
            output.writeFieldBegin("category", thrift.TType.LIST, 2);
            output.writeListBegin(thrift.TType.STRING, obj.category.length);
            obj.category.forEach((value_2: string): void => {
                output.writeString(value_2);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[category] is unset!");
        }
        if (obj.celebration != null) {
            output.writeFieldBegin("celebration", thrift.TType.LIST, 3);
            output.writeListBegin(thrift.TType.STRING, obj.celebration.length);
            obj.celebration.forEach((value_3: string): void => {
                output.writeString(value_3);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[celebration] is unset!");
        }
        if (obj.dietary != null) {
            output.writeFieldBegin("dietary", thrift.TType.LIST, 4);
            output.writeListBegin(thrift.TType.STRING, obj.dietary.length);
            obj.dietary.forEach((value_4: string): void => {
                output.writeString(value_4);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[dietary] is unset!");
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): ITags {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.LIST) {
                        const value_5: Array<string> = new Array<string>();
                        const metadata_1: thrift.IThriftList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_6: string = input.readString();
                            value_5.push(value_6);
                        }
                        input.readListEnd();
                        _args.cuisine = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.LIST) {
                        const value_7: Array<string> = new Array<string>();
                        const metadata_2: thrift.IThriftList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_8: string = input.readString();
                            value_7.push(value_8);
                        }
                        input.readListEnd();
                        _args.category = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.LIST) {
                        const value_9: Array<string> = new Array<string>();
                        const metadata_3: thrift.IThriftList = input.readListBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const value_10: string = input.readString();
                            value_9.push(value_10);
                        }
                        input.readListEnd();
                        _args.celebration = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.LIST) {
                        const value_11: Array<string> = new Array<string>();
                        const metadata_4: thrift.IThriftList = input.readListBegin();
                        const size_4: number = metadata_4.size;
                        for (let i_4: number = 0; i_4 < size_4; i_4++) {
                            const value_12: string = input.readString();
                            value_11.push(value_12);
                        }
                        input.readListEnd();
                        _args.dietary = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.cuisine !== undefined && _args.category !== undefined && _args.celebration !== undefined && _args.dietary !== undefined) {
            return {
                cuisine: _args.cuisine,
                category: _args.category,
                celebration: _args.celebration,
                dietary: _args.dietary
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read Tags from input");
        }
    }
};
export class Tags extends thrift.StructLike implements ITags {
    public cuisine: Array<string>;
    public category: Array<string>;
    public celebration: Array<string>;
    public dietary: Array<string>;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: ITagsArgs) {
        super();
        if (args.cuisine != null) {
            const value_13: Array<string> = new Array<string>();
            args.cuisine.forEach((value_17: string): void => {
                const value_18: string = value_17;
                value_13.push(value_18);
            });
            this.cuisine = value_13;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[cuisine] is unset!");
        }
        if (args.category != null) {
            const value_14: Array<string> = new Array<string>();
            args.category.forEach((value_19: string): void => {
                const value_20: string = value_19;
                value_14.push(value_20);
            });
            this.category = value_14;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[category] is unset!");
        }
        if (args.celebration != null) {
            const value_15: Array<string> = new Array<string>();
            args.celebration.forEach((value_21: string): void => {
                const value_22: string = value_21;
                value_15.push(value_22);
            });
            this.celebration = value_15;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[celebration] is unset!");
        }
        if (args.dietary != null) {
            const value_16: Array<string> = new Array<string>();
            args.dietary.forEach((value_23: string): void => {
                const value_24: string = value_23;
                value_16.push(value_24);
            });
            this.dietary = value_16;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[dietary] is unset!");
        }
    }
    public static read(input: thrift.TProtocol): Tags {
        return new Tags(TagsCodec.decode(input));
    }
    public static write(args: ITagsArgs, output: thrift.TProtocol): void {
        return TagsCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return TagsCodec.encode(this, output);
    }
}
