/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as CapiDateTime from "./CapiDateTime";
export interface ISponsorshipTargeting {
    publishedSince?: CapiDateTime.ICapiDateTime;
    validEditions?: Array<string>;
}
export interface ISponsorshipTargetingArgs {
    publishedSince?: CapiDateTime.ICapiDateTimeArgs;
    validEditions?: Array<string>;
}
export const SponsorshipTargetingCodec: thrift.IStructCodec<ISponsorshipTargetingArgs, ISponsorshipTargeting> = {
    encode(args: ISponsorshipTargetingArgs, output: thrift.TProtocol): void {
        const obj: any = {
            publishedSince: args.publishedSince,
            validEditions: args.validEditions
        };
        output.writeStructBegin("SponsorshipTargeting");
        if (obj.publishedSince != null) {
            output.writeFieldBegin("publishedSince", thrift.TType.STRUCT, 1);
            CapiDateTime.CapiDateTimeCodec.encode(obj.publishedSince, output);
            output.writeFieldEnd();
        }
        if (obj.validEditions != null) {
            output.writeFieldBegin("validEditions", thrift.TType.LIST, 2);
            output.writeListBegin(thrift.TType.STRING, obj.validEditions.length);
            obj.validEditions.forEach((value_1: string): void => {
                output.writeString(value_1);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): ISponsorshipTargeting {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_2: CapiDateTime.ICapiDateTime = CapiDateTime.CapiDateTimeCodec.decode(input);
                        _args.publishedSince = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.LIST) {
                        const value_3: Array<string> = new Array<string>();
                        const metadata_1: thrift.IThriftList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_4: string = input.readString();
                            value_3.push(value_4);
                        }
                        input.readListEnd();
                        _args.validEditions = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            publishedSince: _args.publishedSince,
            validEditions: _args.validEditions
        };
    }
};
export class SponsorshipTargeting extends thrift.StructLike implements ISponsorshipTargeting {
    public publishedSince?: CapiDateTime.ICapiDateTime;
    public validEditions?: Array<string>;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: ISponsorshipTargetingArgs = {}) {
        super();
        if (args.publishedSince != null) {
            const value_5: CapiDateTime.ICapiDateTime = new CapiDateTime.CapiDateTime(args.publishedSince);
            this.publishedSince = value_5;
        }
        if (args.validEditions != null) {
            const value_6: Array<string> = new Array<string>();
            args.validEditions.forEach((value_7: string): void => {
                const value_8: string = value_7;
                value_6.push(value_8);
            });
            this.validEditions = value_6;
        }
    }
    public static read(input: thrift.TProtocol): SponsorshipTargeting {
        return new SponsorshipTargeting(SponsorshipTargetingCodec.decode(input));
    }
    public static write(args: ISponsorshipTargetingArgs, output: thrift.TProtocol): void {
        return SponsorshipTargetingCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return SponsorshipTargetingCodec.encode(this, output);
    }
}
